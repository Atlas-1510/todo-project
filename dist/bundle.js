(()=>{var e={444:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,'.qs-datepicker-container{font-size:1rem;font-family:sans-serif;color:#000;position:absolute;width:15.625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:9001;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid grey;border-radius:.263921875em;overflow:hidden;background:#fff;-webkit-box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3);box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3)}.qs-datepicker-container *{-webkit-box-sizing:border-box;box-sizing:border-box}.qs-centered{position:fixed;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.qs-hidden{display:none}.qs-overlay{position:absolute;top:0;left:0;background:rgba(0,0,0,.75);color:#fff;width:100%;height:100%;padding:.5em;z-index:1;opacity:1;-webkit-transition:opacity .3s;transition:opacity .3s;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.qs-overlay.qs-hidden{opacity:0;z-index:-1}.qs-overlay .qs-overlay-year{background:rgba(0,0,0,0);border:none;border-bottom:1px solid #fff;border-radius:0;color:#fff;font-size:.875em;padding:.25em 0;width:80%;text-align:center;margin:0 auto;display:block}.qs-overlay .qs-overlay-year::-webkit-inner-spin-button{-webkit-appearance:none}.qs-overlay .qs-close{padding:.5em;cursor:pointer;position:absolute;top:0;right:0}.qs-overlay .qs-submit{border:1px solid #fff;border-radius:.263921875em;padding:.5em;margin:0 auto auto;cursor:pointer;background:hsla(0,0%,50.2%,.4)}.qs-overlay .qs-submit.qs-disabled{color:grey;border-color:grey;cursor:not-allowed}.qs-overlay .qs-overlay-month-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.qs-overlay .qs-overlay-month{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:calc(100% / 3);cursor:pointer;opacity:.5;-webkit-transition:opacity .15s;transition:opacity .15s}.qs-overlay .qs-overlay-month.active,.qs-overlay .qs-overlay-month:hover{opacity:1}.qs-controls{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:0;flex-shrink:0;background:#d3d3d3;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-controls.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-arrow{height:1.5625em;width:1.5625em;position:relative;cursor:pointer;border-radius:.263921875em;-webkit-transition:background .15s;transition:background .15s}.qs-arrow:hover{background:rgba(0,0,0,.1)}.qs-arrow:hover.qs-left:after{border-right-color:#000}.qs-arrow:hover.qs-right:after{border-left-color:#000}.qs-arrow:after{content:"";border:.390625em solid rgba(0,0,0,0);position:absolute;top:50%;-webkit-transition:border .2s;transition:border .2s}.qs-arrow.qs-left:after{border-right-color:grey;right:50%;-webkit-transform:translate(25%,-50%);-ms-transform:translate(25%,-50%);transform:translate(25%,-50%)}.qs-arrow.qs-right:after{border-left-color:grey;left:50%;-webkit-transform:translate(-25%,-50%);-ms-transform:translate(-25%,-50%);transform:translate(-25%,-50%)}.qs-month-year{font-weight:700;-webkit-transition:border .2s;transition:border .2s;border-bottom:1px solid rgba(0,0,0,0);cursor:pointer}.qs-month-year:hover{border-bottom:1px solid grey}.qs-month-year:active:focus,.qs-month-year:focus{outline:none}.qs-month{padding-right:.5ex}.qs-year{padding-left:.5ex}.qs-squares{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.3125em;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-squares.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-square{width:calc(100% / 7);height:1.5625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;cursor:pointer;-webkit-transition:background .1s;transition:background .1s;border-radius:.263921875em}.qs-square:not(.qs-empty):not(.qs-disabled):not(.qs-day):not(.qs-active):hover{background:orange}.qs-current{font-weight:700;text-decoration:underline}.qs-active,.qs-range-end,.qs-range-start{background:#add8e6}.qs-range-start:not(.qs-range-6){border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-middle{background:#d4ebf2}.qs-range-middle:not(.qs-range-0):not(.qs-range-6){border-radius:0}.qs-range-middle.qs-range-0{border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-end:not(.qs-range-0),.qs-range-middle.qs-range-6{border-top-left-radius:0;border-bottom-left-radius:0}.qs-disabled,.qs-outside-current-month{opacity:.2}.qs-disabled{cursor:not-allowed}.qs-day,.qs-empty{cursor:default}.qs-day{font-weight:700;color:grey}.qs-event{position:relative}.qs-event:after{content:"";position:absolute;width:.46875em;height:.46875em;border-radius:50%;background:#07f;bottom:0;right:0}\n',"",{version:3,sources:["webpack://./node_modules/js-datepicker/dist/datepicker.min.css"],names:[],mappings:"AAAA,yBAAyB,cAAc,CAAC,sBAAsB,CAAC,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,2BAA2B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,eAAe,CAAC,eAAe,CAAC,0DAA0D,CAAC,kDAAkD,CAAC,2BAA2B,6BAA6B,CAAC,qBAAqB,CAAC,aAAa,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,sCAAsC,CAAC,kCAAkC,CAAC,8BAA8B,CAAC,WAAW,YAAY,CAAC,YAAY,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,0BAA0B,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,8BAA8B,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,2BAA2B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,sBAAsB,SAAS,CAAC,UAAU,CAAC,6BAA6B,wBAAwB,CAAC,WAAW,CAAC,4BAA4B,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC,aAAa,CAAC,aAAa,CAAC,wDAAwD,uBAAuB,CAAC,sBAAsB,YAAY,CAAC,cAAc,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,qBAAqB,CAAC,0BAA0B,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,8BAA8B,CAAC,mCAAmC,UAAU,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,wCAAwC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,8BAA8B,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,cAAc,CAAC,UAAU,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,yEAAyE,SAAS,CAAC,aAAa,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,mBAAmB,CAAC,aAAa,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,cAAc,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,wCAAwC,CAAC,qBAAqB,wBAAwB,CAAC,gBAAgB,CAAC,UAAU,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,cAAc,CAAC,0BAA0B,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,gBAAgB,yBAAyB,CAAC,8BAA8B,uBAAuB,CAAC,+BAA+B,sBAAsB,CAAC,gBAAgB,UAAU,CAAC,oCAAoC,CAAC,iBAAiB,CAAC,OAAO,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,wBAAwB,uBAAuB,CAAC,SAAS,CAAC,qCAAqC,CAAC,iCAAiC,CAAC,6BAA6B,CAAC,yBAAyB,sBAAsB,CAAC,QAAQ,CAAC,sCAAsC,CAAC,kCAAkC,CAAC,8BAA8B,CAAC,eAAe,eAAe,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,qCAAqC,CAAC,cAAc,CAAC,qBAAqB,4BAA4B,CAAC,iDAAiD,YAAY,CAAC,UAAU,kBAAkB,CAAC,SAAS,iBAAiB,CAAC,YAAY,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,eAAe,CAAC,sBAAsB,CAAC,cAAc,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,wCAAwC,CAAC,oBAAoB,wBAAwB,CAAC,gBAAgB,CAAC,WAAW,oBAAoB,CAAC,eAAe,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,cAAc,CAAC,iCAAiC,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,+EAA+E,iBAAiB,CAAC,YAAY,eAAe,CAAC,yBAAyB,CAAC,yCAAyC,kBAAkB,CAAC,iCAAiC,yBAAyB,CAAC,4BAA4B,CAAC,iBAAiB,kBAAkB,CAAC,mDAAmD,eAAe,CAAC,4BAA4B,yBAAyB,CAAC,4BAA4B,CAAC,2DAA2D,wBAAwB,CAAC,2BAA2B,CAAC,uCAAuC,UAAU,CAAC,aAAa,kBAAkB,CAAC,kBAAkB,cAAc,CAAC,QAAQ,eAAe,CAAC,UAAU,CAAC,UAAU,iBAAiB,CAAC,gBAAgB,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,eAAe,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO",sourcesContent:['.qs-datepicker-container{font-size:1rem;font-family:sans-serif;color:#000;position:absolute;width:15.625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:9001;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid grey;border-radius:.263921875em;overflow:hidden;background:#fff;-webkit-box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3);box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3)}.qs-datepicker-container *{-webkit-box-sizing:border-box;box-sizing:border-box}.qs-centered{position:fixed;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.qs-hidden{display:none}.qs-overlay{position:absolute;top:0;left:0;background:rgba(0,0,0,.75);color:#fff;width:100%;height:100%;padding:.5em;z-index:1;opacity:1;-webkit-transition:opacity .3s;transition:opacity .3s;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.qs-overlay.qs-hidden{opacity:0;z-index:-1}.qs-overlay .qs-overlay-year{background:rgba(0,0,0,0);border:none;border-bottom:1px solid #fff;border-radius:0;color:#fff;font-size:.875em;padding:.25em 0;width:80%;text-align:center;margin:0 auto;display:block}.qs-overlay .qs-overlay-year::-webkit-inner-spin-button{-webkit-appearance:none}.qs-overlay .qs-close{padding:.5em;cursor:pointer;position:absolute;top:0;right:0}.qs-overlay .qs-submit{border:1px solid #fff;border-radius:.263921875em;padding:.5em;margin:0 auto auto;cursor:pointer;background:hsla(0,0%,50.2%,.4)}.qs-overlay .qs-submit.qs-disabled{color:grey;border-color:grey;cursor:not-allowed}.qs-overlay .qs-overlay-month-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.qs-overlay .qs-overlay-month{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:calc(100% / 3);cursor:pointer;opacity:.5;-webkit-transition:opacity .15s;transition:opacity .15s}.qs-overlay .qs-overlay-month.active,.qs-overlay .qs-overlay-month:hover{opacity:1}.qs-controls{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:0;flex-shrink:0;background:#d3d3d3;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-controls.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-arrow{height:1.5625em;width:1.5625em;position:relative;cursor:pointer;border-radius:.263921875em;-webkit-transition:background .15s;transition:background .15s}.qs-arrow:hover{background:rgba(0,0,0,.1)}.qs-arrow:hover.qs-left:after{border-right-color:#000}.qs-arrow:hover.qs-right:after{border-left-color:#000}.qs-arrow:after{content:"";border:.390625em solid rgba(0,0,0,0);position:absolute;top:50%;-webkit-transition:border .2s;transition:border .2s}.qs-arrow.qs-left:after{border-right-color:grey;right:50%;-webkit-transform:translate(25%,-50%);-ms-transform:translate(25%,-50%);transform:translate(25%,-50%)}.qs-arrow.qs-right:after{border-left-color:grey;left:50%;-webkit-transform:translate(-25%,-50%);-ms-transform:translate(-25%,-50%);transform:translate(-25%,-50%)}.qs-month-year{font-weight:700;-webkit-transition:border .2s;transition:border .2s;border-bottom:1px solid rgba(0,0,0,0);cursor:pointer}.qs-month-year:hover{border-bottom:1px solid grey}.qs-month-year:active:focus,.qs-month-year:focus{outline:none}.qs-month{padding-right:.5ex}.qs-year{padding-left:.5ex}.qs-squares{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.3125em;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-squares.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-square{width:calc(100% / 7);height:1.5625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;cursor:pointer;-webkit-transition:background .1s;transition:background .1s;border-radius:.263921875em}.qs-square:not(.qs-empty):not(.qs-disabled):not(.qs-day):not(.qs-active):hover{background:orange}.qs-current{font-weight:700;text-decoration:underline}.qs-active,.qs-range-end,.qs-range-start{background:#add8e6}.qs-range-start:not(.qs-range-6){border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-middle{background:#d4ebf2}.qs-range-middle:not(.qs-range-0):not(.qs-range-6){border-radius:0}.qs-range-middle.qs-range-0{border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-end:not(.qs-range-0),.qs-range-middle.qs-range-6{border-top-left-radius:0;border-bottom-left-radius:0}.qs-disabled,.qs-outside-current-month{opacity:.2}.qs-disabled{cursor:not-allowed}.qs-day,.qs-empty{cursor:default}.qs-day{font-weight:700;color:grey}.qs-event{position:relative}.qs-event:after{content:"";position:absolute;width:.46875em;height:.46875em;border-radius:50%;background:#07f;bottom:0;right:0}\n'],sourceRoot:""}]);const s=a},424:(e,t,n)=>{"use strict";n.d(t,{Z:()=>C});var r=n(15),o=n.n(r),i=n(645),a=n.n(i),s=n(444),d=n(667),l=n.n(d),A=n(685),c=n(17),u=n(845),h=a()(o());h.i(s.Z);var g=l()(A.Z),m=l()(c.Z),f=l()(u.Z);h.push([e.id,":root {\n    --topMargin: 40px;\n    --taskColor: #F1FAEE;\n    --contentWindowBackground: #A8DADC;\n    --sideBarToggleColor: #457B9D;\n    --sideBarColor: #1D3557;\n    --taskFormButtonColor: #EFD5C3;\n}\n\nbody {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n#projectContainer {\n    display: grid;\n    grid-template-columns: [first] 20% [second] 80% [third];\n    grid-template-rows: [first] 100px [second] 1fr [third];\n    height: 100vh;\n    width: 100vw;\n}\n\n#topBar {\n    grid-column: second / third;\n    grid-row: first / second;\n    background-color: var(--contentWindowBackground);\n    min-height: 100px;\n}\n\n#sideBar {\n    grid-column: first / second;\n    grid-row: first / third;\n    background-color: var(--sideBarColor);\n    display: flex;\n    flex-direction: column;\n}\n\n#displaySection {\n    grid-column: second / third;\n    grid-row: second / third;\n    min-height: 100%;\n    background-color: var(--contentWindowBackground);\n    display: flex;\n    flex-direction: column;\n}\n\n#topBar {\n    display: grid;\n    grid-template-columns: [first] 1fr [second] 1fr [third];\n    grid-template-rows: [first] 1fr [second] 1fr [third];\n}\n\n#listTitle {\n    grid-row: second / third;\n    grid-column: first / second;\n    font-size: xx-large;\n    font-weight: bold;\n    margin: 10px;\n}\n\n#topBarListCount {\n    grid-area: second / second / third / third;\n    font-size: xx-large;\n    font-weight: bold;\n    justify-self: end;\n    margin: 10px;\n}\n\n#higherAddTask {\n    grid-area: first / second / second / third;\n    max-width: 30px;\n    min-width: 20px;\n    justify-self: end;\n    max-height: 30px;\n    min-height: 20px;\n    margin: 10px;\n}\n\n#sideBarContentContainer {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 2;\n    justify-content: flex-start;\n    margin: 0 auto;\n    width: 90%;\n    margin-top: var(--topMargin);\n}\n\n#searchBarContainer {\n    box-sizing: border-box;\n    display: grid;\n    grid-template-columns: 1fr 8fr 1fr;\n    justify-items: center;\n    align-items: center;\n    min-width: 100px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 10px;\n    border: 1px solid rgb(92,95,93);\n    overflow: hidden;\n    background-color: var(--taskColor)\n}\n\n#searchBarForm {\n    width: 100%;\n    color: var(--sideBarColor);\n}\n\n#searchBar {\n    width: 98%;\n    padding: 0;\n    margin: 0;\n    border: 0;\n    outline: none;\n    background-color: var(--taskColor);\n    color: var(--sideBarColor);\n}\n\n#searchBar::placeholder {\n    color: var(--sideBarColor);\n}\n\n#clearIcon {\n    visibility: hidden;\n}\n\n#searchBarContainer:focus-within {\n    box-shadow: 0 0 5px 1px cyan;\n}\n\n\n#sideBarToggles {\n    margin-top: 15px;\n    display: grid;\n    gap: 10px;\n    grid-template-columns: [first] 1fr [second] 1fr [third];\n    grid-template-rows: [first] 1fr [second] 1fr [third];\n    --subItemMargin: 10px;\n}\n\n.sideBarToggle{\n    /* border: 1px solid black; */\n    background-color: var(--sideBarToggleColor);\n    border-radius: 15px;\n    display: grid;\n    grid-template-rows: [first] 1fr [second] 1fr [third];\n    grid-template-columns: [first] 25% [second] 1fr [third];\n}\n\n.toggleIcon {\n    grid-row: first / second;\n    grid-column: first / second;\n    margin: var(--subItemMargin);\n    width: 25px;\n}\n\n.toggleCount {\n    grid-row: first / second;\n    grid-column: second / third;\n    justify-self: end;\n    margin: var(--subItemMargin)\n}\n\n.toggleTitle {\n    grid-row: second / third;\n    grid-column: first / third;\n    margin: var(--subItemMargin);\n    font-weight: bold;\n    font-size: larger;\n}\n\n.scheduledToggleActive {\n    background-color: #F5A3CB;\n}\n\n.flaggedToggleActive {\n    background-color: #EFBC9B;\n}\n\n.allToggleActive {\n    background-color: #898DD1;\n}\n\n.todayToggleActive {\n    background-color: lightgreen;\n}\n\n#todayToggle > .toggleTitle {\n    color: rgb(86,207,48);\n}\n\n#scheduledToggle > .toggleTitle {\n    color: #E63946;\n}\n\n#flaggedToggle > .toggleTitle {\n    color: rgb(255,149,12);\n}\n\n#allToggle > .toggleTitle {\n    color: #53131E;\n}\n\n.sideBarWhiteInfo {\n    filter: invert(97%) sepia(38%) saturate(0%) hue-rotate(211deg) brightness(116%) contrast(100%);\n}\n\n#listsContainer {\n    margin: 20px 10px 10px 10px;\n    color: var(--taskColor);\n}\n\n.sideBarList {\n    display: grid;\n    width: 100%;\n    grid-template-columns: [first] 15% [second] 50% [third] 10% [fourth] 12.5% [fifth] 12.5% [sixth];\n    justify-content: center;\n    margin: 10px 0px 10px 0px;\n}\n\n.listPointer {\n    grid-column: first / second;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 20px;\n    min-height: 20px;\n    max-height: 20px;\n    border-radius: 5px;\n    background-color: white;\n}\n\n.listName {\n    grid-column: second / third;\n    margin-left: 5px;\n}\n\n.listCount {\n    grid-column: third / fourth;\n    justify-self: center;\n}\n\n.editListIcon {\n    grid-column: fourth / fifth;\n}\n\n.deleteListIcon {\n    grid-column: fifth / sixth;\n}\n\n.listIcon {\n    filter: invert(99%) sepia(1%) saturate(282%) hue-rotate(107deg) brightness(114%) contrast(100%);\n    justify-self: center;\n}\n\n#addListButton {\n\n    margin-top: auto;\n    background-color: var(--taskColor);\n    border-radius: 15px;\n    color: var(--sideBarColor);\n    border: none;\n    padding: 5px;\n    font-size: large;\n    margin-bottom: 10px;\n}\n\n#newListContainer {\n    display: none;\n    align-items: center;\n    justify-content: flex-start;\n    margin: 10px 0px 10px 0px;\n}\n\n#newListForm {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n}\n\n#newListTitleAndColor {\n    display: grid;\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n    max-height: 20px;\n}\n\n#newListSubmitAndAbort {\n    display: grid;\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n}\n\n#newListTitleContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-height: 1.5rem;\n    width: 100%;\n    border-radius: 10px;\n    /* border: 1px solid black; */\n    overflow: hidden;\n    background-color: var(--taskColor);\n    outline: none;\n    margin: 0.3rem;\n    max-height: 20px;\n    background-color: var(--taskColor);\n}\n\n#newListColor {\n    grid-column: third / fourth;\n    margin: 0.3rem;\n    border: none;\n    border-radius: 10px;\n    background-color: var(--taskColor);\n    color: none;\n    overflow: visible;\n    width: fit-content;\n    height: 1.5rem;\n    padding: 0.3rem;\n}\n\n.colorPickerHolder {\n    position: absolute;\n    z-index: 10;\n}\n\n#colorButtonHolder {\n    display: flex;\n    justify-content: center;\n}\n\n#colorButtonHolder > button {\n    width: 100%;\n    border-radius: 10px;\n    margin: 0.3rem;\n}\n\n#newListAbort {\n    grid-column: third / fourth;\n    min-height: 1.5rem;\n}\n\n#newListSubmit {\n    min-height: 1.5rem;\n}\n\n.inputListTitle {\n    margin-left: 10px;\n    padding: 0;\n    border: 0;\n    outline: none;\n    background-color: var(--taskColor);\n}\n\n#newListTitleContainer:focus-within {\n    box-shadow: 0 0 5px 1px cyan;\n}\n\n.listSubmitButton {\n    background-image: url("+g+");\n    background-repeat: no-repeat;\n    background-size: 20px;\n    background-position: center;\n}\n\n.listAbortButton {\n    background-image: url("+m+");\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: 20px;\n}\n\n.listButton {\n    width: 100%;\n    margin: 0.3rem;\n    padding: 10px;\n    position: relative;\n    border: 0;\n    border-radius: 10px;\n}\n\n/* LIST EDIT FORM */\n#editListContainer {\n    display: none;\n    align-items: center;\n    justify-content: flex-start;\n    margin: 10px 0px 10px 0px;\n}\n\n#editListForm {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n}\n\n#editListTitleAndColor {\n    display: grid;\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n    max-height: 20px;\n}\n\n#editListTitleContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-height: 1.5rem;\n    width: 100%;\n    border-radius: 10px;\n    overflow: hidden;\n    background-color: var(--taskColor);\n    outline: none;\n    margin: 0.3rem;\n    max-height: 20px;\n    background-color: var(--taskColor);\n}\n\n#editListTitleAndColor {\n    display: grid;\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n    max-height: 20px;\n}\n\n#editListColor {\n    grid-column: third / fourth;\n    margin: 0.3rem;\n    border: none;\n    border-radius: 10px;\n    background-color: var(--taskColor);\n    color: none;\n    overflow: visible;\n    width: fit-content;\n    height: 1.5rem;\n    padding: 0.3rem;\n}\n\n#editColorPickerHolder {\n    position: absolute;\n}\n\n#editListSubmitAndAbort {\n    display: grid;\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n}\n\n#editListAbort {\n    grid-column: third / fourth;\n    min-height: 1.5rem;\n}\n\n#editListSubmit {\n    min-height: 1.5rem;\n}\n\n/* USER CONTENT CONTAINER */\n\n#userContentContainer {\n    flex-grow: 2;\n    margin: 0 auto;\n    width: 70%;\n    margin-top: var(--topMargin);\n}\n\n#userContentContainer > li, #userContentContainer > div {\n    /* border: 1px solid grey; */\n    border-radius: 15px;\n    margin-bottom: 10px;\n    background-color: var(--taskColor);\n}\n\n.task {\n    display: grid;\n    grid-template-columns: [first] 5% [second] 70% [third] 10% [fourth] 5% [fifth] 5% [sixth] 5% [seventh];\n    justify-items: center;\n    align-items: center;\n    background-color: var(--taskColor);\n}\n\n.checkbox {\n    grid-column: first / second;\n}\n\n.taskDescription {\n    grid-column: second / third;\n    justify-self: start;\n}\n\n.taskDueDate {\n    grid-column: third / fourth;\n}\n\n.taskFlagIcon {\n    grid-column: fourth / fifth;\n}\n\n.flagNodeHolder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-width: 5%;\n}\n\n.editTaskIcon {\n    grid-column: fifth / sixth;\n}\n\n.deleteTaskIcon {\n    grid-column: sixth / seventh;\n}\n\n#lowerAddTask {\n    width: 100%;\n    display: none;\n    align-items: center;\n}\n\n.checkbox {\n    margin-left: 15px;\n    width: 25;\n}\n\n.taskDescription {\n    margin-left: 25px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n\n.taskDueDate {\n    margin-left: auto;\n    margin-right: 5px;\n}\n\n.editTaskIcon {\n    margin-left: 15px;\n}\n\n.deleteTaskIcon {\n    margin-left: 10px;\n    margin-right: 15px;\n}\n\n.taskInputContainer {\n    display: none;\n    align-items: center;\n    min-height: 30px;\n}\n\n.taskInputContainer > .checkbox {\n    align-self: flex-start;\n    margin-top: 10px;\n    background-color: var(--taskColor);\n}\n\n.inputItemTitle {\n    background-color: var(--taskColor);\n}\n\n.taskInputContainer > div {\n    margin-left: 25px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    width: 90%;\n    display: flex;\n    flex-direction: column;\n}\n\n.taskInputContainer > div > form > input {\n    grid-row: first / second;\n    grid-column: first / sixth;\n    font-size: medium;\n    padding: 0;\n    margin: 0;\n    margin-bottom: 5px;\n    border: 0;\n    outline: none;\n}\n\n.taskInputContainer > div > form > div {\n    display: flex;\n    align-items: baseline;\n}\n\n.taskInputContainer > div > form > div > button, .taskInputContainer > div > form > div > input {\n    height: 25px;\n    margin-right: 8px;\n    border-radius: 4px;\n    border: 0;\n}\n\n.taskInputForm {\n    border: none;\n}\n\n.formInput:focus {\n    outline: none;\n}\n\n.formInput {\n    background-color: var(--taskFormButtonColor);\n}\n\n.dateCheckBox {\n    position: relative;\n    top: 6px;\n}\n\n.date {\n    width: 80px;\n    text-align: center;\n    height: 25px;\n    padding: 0;\n}\n\n.date::placeholder {\n    color:black;\n    text-align: center;\n}\n\n.dateChosen {\n    background-color: yellow;\n}\n\n.flagButton {\n    background: url("+f+");\n    background-repeat: no-repeat;\n    background-position: center;\n    background-color: var(--taskFormButtonColor);\n    padding-left: 20px;\n    padding-right: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    position: relative;\n    bottom: 2px;\n}\n\n.flagActive {\n    background-color: orange;\n}\n\n.submitButton {\n    align-self: flex-end;\n    margin: 0 auto;\n    background-image: url("+g+");\n    background-repeat: no-repeat;\n    background-size: 20px;\n    background-position: center;\n    padding: 10px;\n    width: 50px;\n    height: auto;\n    position: relative;\n    bottom: 2px;\n}\n\n.abortButton {\n    background-image: url("+m+");\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: 20px;\n    width: 50px;\n    padding: 10px;\n    height: auto;\n    position: relative;\n    bottom: 2px;\n}","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,kCAAkC;IAClC,6BAA6B;IAC7B,uBAAuB;IACvB,8BAA8B;AAClC;;AAEA;IACI,SAAS;IACT,wIAAwI;AAC5I;;AAEA;IACI,aAAa;IACb,uDAAuD;IACvD,sDAAsD;IACtD,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;IACxB,gDAAgD;IAChD,iBAAiB;AACrB;;AAEA;IACI,2BAA2B;IAC3B,uBAAuB;IACvB,qCAAqC;IACrC,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;IACxB,gBAAgB;IAChB,gDAAgD;IAChD,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,uDAAuD;IACvD,oDAAoD;AACxD;;AAEA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,mBAAmB;IACnB,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,0CAA0C;IAC1C,mBAAmB;IACnB,iBAAiB;IACjB,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,0CAA0C;IAC1C,eAAe;IACf,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,2BAA2B;IAC3B,cAAc;IACd,UAAU;IACV,4BAA4B;AAChC;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,kCAAkC;IAClC,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,gBAAgB;IAChB,WAAW;IACX,mBAAmB;IACnB,+BAA+B;IAC/B,gBAAgB;IAChB;AACJ;;AAEA;IACI,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,UAAU;IACV,UAAU;IACV,SAAS;IACT,SAAS;IACT,aAAa;IACb,kCAAkC;IAClC,0BAA0B;AAC9B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;AAChC;;;AAGA;IACI,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,uDAAuD;IACvD,oDAAoD;IACpD,qBAAqB;AACzB;;AAEA;IACI,6BAA6B;IAC7B,2CAA2C;IAC3C,mBAAmB;IACnB,aAAa;IACb,oDAAoD;IACpD,uDAAuD;AAC3D;;AAEA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,4BAA4B;IAC5B,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,iBAAiB;IACjB;AACJ;;AAEA;IACI,wBAAwB;IACxB,0BAA0B;IAC1B,4BAA4B;IAC5B,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,8FAA8F;AAClG;;AAEA;IACI,2BAA2B;IAC3B,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,gGAAgG;IAChG,uBAAuB;IACvB,yBAAyB;AAC7B;;AAEA;IACI,2BAA2B;IAC3B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,gBAAgB;IAChB,kBAAkB;IAClB,uBAAuB;AAC3B;;AAEA;IACI,2BAA2B;IAC3B,gBAAgB;AACpB;;AAEA;IACI,2BAA2B;IAC3B,oBAAoB;AACxB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,+FAA+F;IAC/F,oBAAoB;AACxB;;AAEA;;IAEI,gBAAgB;IAChB,kCAAkC;IAClC,mBAAmB;IACnB,0BAA0B;IAC1B,YAAY;IACZ,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,6BAA6B;IAC7B,gBAAgB;IAChB,kCAAkC;IAClC,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,kCAAkC;AACtC;;AAEA;IACI,2BAA2B;IAC3B,cAAc;IACd,YAAY;IACZ,mBAAmB;IACnB,kCAAkC;IAClC,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,2BAA2B;IAC3B,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,UAAU;IACV,SAAS;IACT,aAAa;IACb,kCAAkC;AACtC;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,yDAA+C;IAC/C,4BAA4B;IAC5B,qBAAqB;IACrB,2BAA2B;AAC/B;;AAEA;IACI,yDAA2C;IAC3C,4BAA4B;IAC5B,2BAA2B;IAC3B,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;AACvB;;AAEA,mBAAmB;AACnB;IACI,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,gBAAgB;IAChB,kCAAkC;IAClC,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,2BAA2B;IAC3B,cAAc;IACd,YAAY;IACZ,mBAAmB;IACnB,kCAAkC;IAClC,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,2BAA2B;IAC3B,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA,2BAA2B;;AAE3B;IACI,YAAY;IACZ,cAAc;IACd,UAAU;IACV,4BAA4B;AAChC;;AAEA;IACI,4BAA4B;IAC5B,mBAAmB;IACnB,mBAAmB;IACnB,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,sGAAsG;IACtG,qBAAqB;IACrB,mBAAmB;IACnB,kCAAkC;AACtC;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;IAC3B,mBAAmB;AACvB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,sBAAsB;IACtB,gBAAgB;IAChB,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,UAAU;IACV,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;IACxB,0BAA0B;IAC1B,iBAAiB;IACjB,UAAU;IACV,SAAS;IACT,kBAAkB;IAClB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,kBAAkB;IAClB,QAAQ;AACZ;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,mDAAiC;IACjC,4BAA4B;IAC5B,2BAA2B;IAC3B,4CAA4C;IAC5C,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,oBAAoB;IACpB,cAAc;IACd,yDAA+C;IAC/C,4BAA4B;IAC5B,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,yDAA2C;IAC3C,4BAA4B;IAC5B,2BAA2B;IAC3B,qBAAqB;IACrB,WAAW;IACX,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,WAAW;AACf",sourcesContent:['@import \'~js-datepicker/dist/datepicker.min.css\';\n\n:root {\n    --topMargin: 40px;\n    --taskColor: #F1FAEE;\n    --contentWindowBackground: #A8DADC;\n    --sideBarToggleColor: #457B9D;\n    --sideBarColor: #1D3557;\n    --taskFormButtonColor: #EFD5C3;\n}\n\nbody {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;\n}\n\n#projectContainer {\n    display: grid;\n    grid-template-columns: [first] 20% [second] 80% [third];\n    grid-template-rows: [first] 100px [second] 1fr [third];\n    height: 100vh;\n    width: 100vw;\n}\n\n#topBar {\n    grid-column: second / third;\n    grid-row: first / second;\n    background-color: var(--contentWindowBackground);\n    min-height: 100px;\n}\n\n#sideBar {\n    grid-column: first / second;\n    grid-row: first / third;\n    background-color: var(--sideBarColor);\n    display: flex;\n    flex-direction: column;\n}\n\n#displaySection {\n    grid-column: second / third;\n    grid-row: second / third;\n    min-height: 100%;\n    background-color: var(--contentWindowBackground);\n    display: flex;\n    flex-direction: column;\n}\n\n#topBar {\n    display: grid;\n    grid-template-columns: [first] 1fr [second] 1fr [third];\n    grid-template-rows: [first] 1fr [second] 1fr [third];\n}\n\n#listTitle {\n    grid-row: second / third;\n    grid-column: first / second;\n    font-size: xx-large;\n    font-weight: bold;\n    margin: 10px;\n}\n\n#topBarListCount {\n    grid-area: second / second / third / third;\n    font-size: xx-large;\n    font-weight: bold;\n    justify-self: end;\n    margin: 10px;\n}\n\n#higherAddTask {\n    grid-area: first / second / second / third;\n    max-width: 30px;\n    min-width: 20px;\n    justify-self: end;\n    max-height: 30px;\n    min-height: 20px;\n    margin: 10px;\n}\n\n#sideBarContentContainer {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 2;\n    justify-content: flex-start;\n    margin: 0 auto;\n    width: 90%;\n    margin-top: var(--topMargin);\n}\n\n#searchBarContainer {\n    box-sizing: border-box;\n    display: grid;\n    grid-template-columns: 1fr 8fr 1fr;\n    justify-items: center;\n    align-items: center;\n    min-width: 100px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 10px;\n    border: 1px solid rgb(92,95,93);\n    overflow: hidden;\n    background-color: var(--taskColor)\n}\n\n#searchBarForm {\n    width: 100%;\n    color: var(--sideBarColor);\n}\n\n#searchBar {\n    width: 98%;\n    padding: 0;\n    margin: 0;\n    border: 0;\n    outline: none;\n    background-color: var(--taskColor);\n    color: var(--sideBarColor);\n}\n\n#searchBar::placeholder {\n    color: var(--sideBarColor);\n}\n\n#clearIcon {\n    visibility: hidden;\n}\n\n#searchBarContainer:focus-within {\n    box-shadow: 0 0 5px 1px cyan;\n}\n\n\n#sideBarToggles {\n    margin-top: 15px;\n    display: grid;\n    gap: 10px;\n    grid-template-columns: [first] 1fr [second] 1fr [third];\n    grid-template-rows: [first] 1fr [second] 1fr [third];\n    --subItemMargin: 10px;\n}\n\n.sideBarToggle{\n    /* border: 1px solid black; */\n    background-color: var(--sideBarToggleColor);\n    border-radius: 15px;\n    display: grid;\n    grid-template-rows: [first] 1fr [second] 1fr [third];\n    grid-template-columns: [first] 25% [second] 1fr [third];\n}\n\n.toggleIcon {\n    grid-row: first / second;\n    grid-column: first / second;\n    margin: var(--subItemMargin);\n    width: 25px;\n}\n\n.toggleCount {\n    grid-row: first / second;\n    grid-column: second / third;\n    justify-self: end;\n    margin: var(--subItemMargin)\n}\n\n.toggleTitle {\n    grid-row: second / third;\n    grid-column: first / third;\n    margin: var(--subItemMargin);\n    font-weight: bold;\n    font-size: larger;\n}\n\n.scheduledToggleActive {\n    background-color: #F5A3CB;\n}\n\n.flaggedToggleActive {\n    background-color: #EFBC9B;\n}\n\n.allToggleActive {\n    background-color: #898DD1;\n}\n\n.todayToggleActive {\n    background-color: lightgreen;\n}\n\n#todayToggle > .toggleTitle {\n    color: rgb(86,207,48);\n}\n\n#scheduledToggle > .toggleTitle {\n    color: #E63946;\n}\n\n#flaggedToggle > .toggleTitle {\n    color: rgb(255,149,12);\n}\n\n#allToggle > .toggleTitle {\n    color: #53131E;\n}\n\n.sideBarWhiteInfo {\n    filter: invert(97%) sepia(38%) saturate(0%) hue-rotate(211deg) brightness(116%) contrast(100%);\n}\n\n#listsContainer {\n    margin: 20px 10px 10px 10px;\n    color: var(--taskColor);\n}\n\n.sideBarList {\n    display: grid;\n    width: 100%;\n    grid-template-columns: [first] 15% [second] 50% [third] 10% [fourth] 12.5% [fifth] 12.5% [sixth];\n    justify-content: center;\n    margin: 10px 0px 10px 0px;\n}\n\n.listPointer {\n    grid-column: first / second;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 20px;\n    min-height: 20px;\n    max-height: 20px;\n    border-radius: 5px;\n    background-color: white;\n}\n\n.listName {\n    grid-column: second / third;\n    margin-left: 5px;\n}\n\n.listCount {\n    grid-column: third / fourth;\n    justify-self: center;\n}\n\n.editListIcon {\n    grid-column: fourth / fifth;\n}\n\n.deleteListIcon {\n    grid-column: fifth / sixth;\n}\n\n.listIcon {\n    filter: invert(99%) sepia(1%) saturate(282%) hue-rotate(107deg) brightness(114%) contrast(100%);\n    justify-self: center;\n}\n\n#addListButton {\n\n    margin-top: auto;\n    background-color: var(--taskColor);\n    border-radius: 15px;\n    color: var(--sideBarColor);\n    border: none;\n    padding: 5px;\n    font-size: large;\n    margin-bottom: 10px;\n}\n\n#newListContainer {\n    display: none;\n    align-items: center;\n    justify-content: flex-start;\n    margin: 10px 0px 10px 0px;\n}\n\n#newListForm {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n}\n\n#newListTitleAndColor {\n    display: grid;\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n    max-height: 20px;\n}\n\n#newListSubmitAndAbort {\n    display: grid;\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n}\n\n#newListTitleContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-height: 1.5rem;\n    width: 100%;\n    border-radius: 10px;\n    /* border: 1px solid black; */\n    overflow: hidden;\n    background-color: var(--taskColor);\n    outline: none;\n    margin: 0.3rem;\n    max-height: 20px;\n    background-color: var(--taskColor);\n}\n\n#newListColor {\n    grid-column: third / fourth;\n    margin: 0.3rem;\n    border: none;\n    border-radius: 10px;\n    background-color: var(--taskColor);\n    color: none;\n    overflow: visible;\n    width: fit-content;\n    height: 1.5rem;\n    padding: 0.3rem;\n}\n\n.colorPickerHolder {\n    position: absolute;\n    z-index: 10;\n}\n\n#colorButtonHolder {\n    display: flex;\n    justify-content: center;\n}\n\n#colorButtonHolder > button {\n    width: 100%;\n    border-radius: 10px;\n    margin: 0.3rem;\n}\n\n#newListAbort {\n    grid-column: third / fourth;\n    min-height: 1.5rem;\n}\n\n#newListSubmit {\n    min-height: 1.5rem;\n}\n\n.inputListTitle {\n    margin-left: 10px;\n    padding: 0;\n    border: 0;\n    outline: none;\n    background-color: var(--taskColor);\n}\n\n#newListTitleContainer:focus-within {\n    box-shadow: 0 0 5px 1px cyan;\n}\n\n.listSubmitButton {\n    background-image: url("./img/check-circle.svg");\n    background-repeat: no-repeat;\n    background-size: 20px;\n    background-position: center;\n}\n\n.listAbortButton {\n    background-image: url("./img/x-circle.svg");\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: 20px;\n}\n\n.listButton {\n    width: 100%;\n    margin: 0.3rem;\n    padding: 10px;\n    position: relative;\n    border: 0;\n    border-radius: 10px;\n}\n\n/* LIST EDIT FORM */\n#editListContainer {\n    display: none;\n    align-items: center;\n    justify-content: flex-start;\n    margin: 10px 0px 10px 0px;\n}\n\n#editListForm {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n}\n\n#editListTitleAndColor {\n    display: grid;\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n    max-height: 20px;\n}\n\n#editListTitleContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-height: 1.5rem;\n    width: 100%;\n    border-radius: 10px;\n    overflow: hidden;\n    background-color: var(--taskColor);\n    outline: none;\n    margin: 0.3rem;\n    max-height: 20px;\n    background-color: var(--taskColor);\n}\n\n#editListTitleAndColor {\n    display: grid;\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n    max-height: 20px;\n}\n\n#editListColor {\n    grid-column: third / fourth;\n    margin: 0.3rem;\n    border: none;\n    border-radius: 10px;\n    background-color: var(--taskColor);\n    color: none;\n    overflow: visible;\n    width: fit-content;\n    height: 1.5rem;\n    padding: 0.3rem;\n}\n\n#editColorPickerHolder {\n    position: absolute;\n}\n\n#editListSubmitAndAbort {\n    display: grid;\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\n    justify-items: center;\n    margin: 0.5rem;\n}\n\n#editListAbort {\n    grid-column: third / fourth;\n    min-height: 1.5rem;\n}\n\n#editListSubmit {\n    min-height: 1.5rem;\n}\n\n/* USER CONTENT CONTAINER */\n\n#userContentContainer {\n    flex-grow: 2;\n    margin: 0 auto;\n    width: 70%;\n    margin-top: var(--topMargin);\n}\n\n#userContentContainer > li, #userContentContainer > div {\n    /* border: 1px solid grey; */\n    border-radius: 15px;\n    margin-bottom: 10px;\n    background-color: var(--taskColor);\n}\n\n.task {\n    display: grid;\n    grid-template-columns: [first] 5% [second] 70% [third] 10% [fourth] 5% [fifth] 5% [sixth] 5% [seventh];\n    justify-items: center;\n    align-items: center;\n    background-color: var(--taskColor);\n}\n\n.checkbox {\n    grid-column: first / second;\n}\n\n.taskDescription {\n    grid-column: second / third;\n    justify-self: start;\n}\n\n.taskDueDate {\n    grid-column: third / fourth;\n}\n\n.taskFlagIcon {\n    grid-column: fourth / fifth;\n}\n\n.flagNodeHolder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-width: 5%;\n}\n\n.editTaskIcon {\n    grid-column: fifth / sixth;\n}\n\n.deleteTaskIcon {\n    grid-column: sixth / seventh;\n}\n\n#lowerAddTask {\n    width: 100%;\n    display: none;\n    align-items: center;\n}\n\n.checkbox {\n    margin-left: 15px;\n    width: 25;\n}\n\n.taskDescription {\n    margin-left: 25px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n\n.taskDueDate {\n    margin-left: auto;\n    margin-right: 5px;\n}\n\n.editTaskIcon {\n    margin-left: 15px;\n}\n\n.deleteTaskIcon {\n    margin-left: 10px;\n    margin-right: 15px;\n}\n\n.taskInputContainer {\n    display: none;\n    align-items: center;\n    min-height: 30px;\n}\n\n.taskInputContainer > .checkbox {\n    align-self: flex-start;\n    margin-top: 10px;\n    background-color: var(--taskColor);\n}\n\n.inputItemTitle {\n    background-color: var(--taskColor);\n}\n\n.taskInputContainer > div {\n    margin-left: 25px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    width: 90%;\n    display: flex;\n    flex-direction: column;\n}\n\n.taskInputContainer > div > form > input {\n    grid-row: first / second;\n    grid-column: first / sixth;\n    font-size: medium;\n    padding: 0;\n    margin: 0;\n    margin-bottom: 5px;\n    border: 0;\n    outline: none;\n}\n\n.taskInputContainer > div > form > div {\n    display: flex;\n    align-items: baseline;\n}\n\n.taskInputContainer > div > form > div > button, .taskInputContainer > div > form > div > input {\n    height: 25px;\n    margin-right: 8px;\n    border-radius: 4px;\n    border: 0;\n}\n\n.taskInputForm {\n    border: none;\n}\n\n.formInput:focus {\n    outline: none;\n}\n\n.formInput {\n    background-color: var(--taskFormButtonColor);\n}\n\n.dateCheckBox {\n    position: relative;\n    top: 6px;\n}\n\n.date {\n    width: 80px;\n    text-align: center;\n    height: 25px;\n    padding: 0;\n}\n\n.date::placeholder {\n    color:black;\n    text-align: center;\n}\n\n.dateChosen {\n    background-color: yellow;\n}\n\n.flagButton {\n    background: url("./img/flag.svg");\n    background-repeat: no-repeat;\n    background-position: center;\n    background-color: var(--taskFormButtonColor);\n    padding-left: 20px;\n    padding-right: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    position: relative;\n    bottom: 2px;\n}\n\n.flagActive {\n    background-color: orange;\n}\n\n.submitButton {\n    align-self: flex-end;\n    margin: 0 auto;\n    background-image: url("./img/check-circle.svg");\n    background-repeat: no-repeat;\n    background-size: 20px;\n    background-position: center;\n    padding: 10px;\n    width: 50px;\n    height: auto;\n    position: relative;\n    bottom: 2px;\n}\n\n.abortButton {\n    background-image: url("./img/x-circle.svg");\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: 20px;\n    width: 50px;\n    padding: 10px;\n    height: auto;\n    position: relative;\n    bottom: 2px;\n}'],sourceRoot:""}]);const C=h},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&o[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(d," */"),A=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},685:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"imgs/check-circle.6294639ee94bec2d5ce0d30f38cbe8fa.svg"},845:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"imgs/flag.6452829eb937a87db1de4aaf16fc3072.svg"},17:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"imgs/x-circle.bd4906d4f5c28e4d73214d1258d63a2e.svg"},448:e=>{window,e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=[],o=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],i=["January","February","March","April","May","June","July","August","September","October","November","December"],a={t:"top",r:"right",b:"bottom",l:"left",c:"centered"};function s(){}var d=["click","focusin","keydown","input"];function l(e){d.forEach((function(t){e.addEventListener(t,e===document?E:S)}))}function A(e){return Array.isArray(e)?e.map(A):"[object Object]"===I(e)?Object.keys(e).reduce((function(t,n){return t[n]=A(e[n]),t}),{}):e}function c(e,t){var n=e.calendar.querySelector(".qs-overlay"),r=n&&!n.classList.contains("qs-hidden");t=t||new Date(e.currentYear,e.currentMonth),e.calendar.innerHTML=[u(t,e,r),h(t,e,r),g(e,r)].join(""),r&&window.requestAnimationFrame((function(){x(!0,e)}))}function u(e,t,n){return['<div class="qs-controls'+(n?" qs-blur":"")+'">','<div class="qs-arrow qs-left"></div>','<div class="qs-month-year">','<span class="qs-month">'+t.months[e.getMonth()]+"</span>",'<span class="qs-year">'+e.getFullYear()+"</span>","</div>",'<div class="qs-arrow qs-right"></div>',"</div>"].join("")}function h(e,t,n){var r=t.currentMonth,o=t.currentYear,i=t.dateSelected,a=t.maxDate,s=t.minDate,d=t.showAllDates,l=t.days,A=t.disabledDates,c=t.startDay,u=t.weekendIndices,h=t.events,g=t.getRange?t.getRange():{},m=+g.start,f=+g.end,C=y(new Date(e).setDate(1)),p=C.getDay()-c,B=p<0?7:0;C.setMonth(C.getMonth()+1),C.setDate(0);var b=C.getDate(),v=[],w=B+7*((p+b)/7|0);w+=(p+b)%7?7:0;for(var x=1;x<=w;x++){var k=(x-1)%7,I=l[k],q=x-(p>=0?p:7+p),E=new Date(o,r,q),S=h[+E],D=q<1||q>b,T=D?q<1?-1:1:0,L=D&&!d,M=L?"":E.getDate(),j=+E==+i,_=k===u[0]||k===u[1],U=m!==f,Y="qs-square "+I;S&&!L&&(Y+=" qs-event"),D&&(Y+=" qs-outside-current-month"),!d&&D||(Y+=" qs-num"),j&&(Y+=" qs-active"),(A[+E]||t.disabler(E)||_&&t.noWeekends||s&&+E<+s||a&&+E>+a)&&!L&&(Y+=" qs-disabled"),+y(new Date)==+E&&(Y+=" qs-current"),+E===m&&f&&U&&(Y+=" qs-range-start"),+E>m&&+E<f&&(Y+=" qs-range-middle"),+E===f&&m&&U&&(Y+=" qs-range-end"),L&&(Y+=" qs-empty",M=""),v.push('<div class="'+Y+'" data-direction="'+T+'">'+M+"</div>")}var H=l.map((function(e){return'<div class="qs-square qs-day">'+e+"</div>"})).concat(v);return H.unshift('<div class="qs-squares'+(n?" qs-blur":"")+'">'),H.push("</div>"),H.join("")}function g(e,t){var n=e.overlayPlaceholder,r=e.overlayButton;return['<div class="qs-overlay'+(t?"":" qs-hidden")+'">',"<div>",'<input class="qs-overlay-year" placeholder="'+n+'" inputmode="numeric" />','<div class="qs-close">&#10005;</div>',"</div>",'<div class="qs-overlay-month-container">'+e.overlayMonths.map((function(e,t){return'<div class="qs-overlay-month" data-month-num="'+t+'">'+e+"</div>"})).join("")+"</div>",'<div class="qs-submit qs-disabled">'+r+"</div>","</div>"].join("")}function m(e,t,n){var r=t.el,o=t.calendar.querySelector(".qs-active"),i=e.textContent,a=t.sibling;(r.disabled||r.readOnly)&&t.respectDisabledReadOnly||(t.dateSelected=n?void 0:new Date(t.currentYear,t.currentMonth,i),o&&o.classList.remove("qs-active"),n||e.classList.add("qs-active"),C(r,t,n),n||v(t),a&&(f({instance:t,deselect:n}),t.first&&!a.dateSelected&&(a.currentYear=t.currentYear,a.currentMonth=t.currentMonth,a.currentMonthName=t.currentMonthName),c(t),c(a)),t.onSelect(t,n?void 0:new Date(t.dateSelected)))}function f(e){var t=e.instance.first?e.instance:e.instance.sibling,n=t.sibling;t===e.instance?e.deselect?(t.minDate=t.originalMinDate,n.minDate=n.originalMinDate):n.minDate=t.dateSelected:e.deselect?(n.maxDate=n.originalMaxDate,t.maxDate=t.originalMaxDate):t.maxDate=n.dateSelected}function C(e,t,n){if(!t.nonInput)return n?e.value="":t.formatter!==s?t.formatter(e,t.dateSelected,t):void(e.value=t.dateSelected.toDateString())}function p(e,t,n,r){n||r?(n&&(t.currentYear=+n),r&&(t.currentMonth=+r)):(t.currentMonth+=e.contains("qs-right")?1:-1,12===t.currentMonth?(t.currentMonth=0,t.currentYear++):-1===t.currentMonth&&(t.currentMonth=11,t.currentYear--)),t.currentMonthName=t.months[t.currentMonth],c(t),t.onMonthChange(t)}function B(e){if(!e.noPosition){var t=e.position.top,n=e.position.right;if(e.position.centered)return e.calendarContainer.classList.add("qs-centered");var r=e.positionedEl.getBoundingClientRect(),o=e.el.getBoundingClientRect(),i=e.calendarContainer.getBoundingClientRect(),a=o.top-r.top+(t?-1*i.height:o.height)+"px",s=o.left-r.left+(n?o.width-i.width:0)+"px";e.calendarContainer.style.setProperty("top",a),e.calendarContainer.style.setProperty("left",s)}}function b(e){return"[object Date]"===I(e)&&"Invalid Date"!==e.toString()}function y(e){if(b(e)||"number"==typeof e&&!isNaN(e)){var t=new Date(+e);return new Date(t.getFullYear(),t.getMonth(),t.getDate())}}function v(e){e.disabled||!e.calendarContainer.classList.contains("qs-hidden")&&!e.alwaysShow&&("overlay"!==e.defaultView&&x(!0,e),e.calendarContainer.classList.add("qs-hidden"),e.onHide(e))}function w(e){e.disabled||(e.calendarContainer.classList.remove("qs-hidden"),"overlay"===e.defaultView&&x(!1,e),B(e),e.onShow(e))}function x(e,t){var n=t.calendar,r=n.querySelector(".qs-overlay"),o=r.querySelector(".qs-overlay-year"),i=n.querySelector(".qs-controls"),a=n.querySelector(".qs-squares");e?(r.classList.add("qs-hidden"),i.classList.remove("qs-blur"),a.classList.remove("qs-blur"),o.value=""):(r.classList.remove("qs-hidden"),i.classList.add("qs-blur"),a.classList.add("qs-blur"),o.focus())}function k(e,t,n,r){var o=isNaN(+(new Date).setFullYear(t.value||void 0)),i=o?null:t.value;13===e.which||13===e.keyCode||"click"===e.type?r?p(null,n,i,r):o||t.classList.contains("qs-disabled")||p(null,n,i):n.calendar.contains(t)&&n.calendar.querySelector(".qs-submit").classList[o?"add":"remove"]("qs-disabled")}function I(e){return{}.toString.call(e)}function q(e){r.forEach((function(t){t!==e&&v(t)}))}function E(e){if(!e.__qs_shadow_dom){var t=e.which||e.keyCode,n=e.type,o=e.target,a=o.classList,s=r.filter((function(e){return e.calendar.contains(o)||e.el===o}))[0],d=s&&s.calendar.contains(o);if(!(s&&s.isMobile&&s.disableMobile))if("click"===n){if(!s)return r.forEach(v);if(s.disabled)return;var l=s.calendar,A=s.calendarContainer,u=s.disableYearOverlay,h=s.nonInput,g=l.querySelector(".qs-overlay-year"),f=!!l.querySelector(".qs-hidden"),C=l.querySelector(".qs-month-year").contains(o),B=o.dataset.monthNum;if(s.noPosition&&!d)(A.classList.contains("qs-hidden")?w:v)(s);else if(a.contains("qs-arrow"))p(a,s);else if(C||a.contains("qs-close"))u||x(!f,s);else if(B)k(e,g,s,B);else{if(a.contains("qs-disabled"))return;if(a.contains("qs-num")){var b=o.textContent,y=+o.dataset.direction,I=new Date(s.currentYear,s.currentMonth+y,b);if(y){s.currentYear=I.getFullYear(),s.currentMonth=I.getMonth(),s.currentMonthName=i[s.currentMonth],c(s);for(var E,S=s.calendar.querySelectorAll('[data-direction="0"]'),D=0;!E;){var T=S[D];T.textContent===b&&(E=T),D++}o=E}return void(+I==+s.dateSelected?m(o,s,!0):o.classList.contains("qs-disabled")||m(o,s))}a.contains("qs-submit")?k(e,g,s):h&&o===s.el&&(w(s),q(s))}}else if("focusin"===n&&s)w(s),q(s);else if("keydown"===n&&9===t&&s)v(s);else if("keydown"===n&&s&&!s.disabled){var L=!s.calendar.querySelector(".qs-overlay").classList.contains("qs-hidden");13===t&&L&&d?k(e,o,s):27===t&&L&&d&&x(!0,s)}else if("input"===n){if(!s||!s.calendar.contains(o))return;var M=s.calendar.querySelector(".qs-submit"),j=o.value.split("").reduce((function(e,t){return e||"0"!==t?e+(t.match(/[0-9]/)?t:""):""}),"").slice(0,4);o.value=j,M.classList[4===j.length?"remove":"add"]("qs-disabled")}}}function S(e){E(e),e.__qs_shadow_dom=!0}function D(e,t){d.forEach((function(n){e.removeEventListener(n,t)}))}function T(){w(this)}function L(){v(this)}function M(e,t){var n=y(e),r=this.currentYear,o=this.currentMonth,i=this.sibling;if(null==e)return this.dateSelected=void 0,C(this.el,this,!0),i&&(f({instance:this,deselect:!0}),c(i)),c(this),this;if(!b(e))throw new Error("`setDate` needs a JavaScript Date object.");if(this.disabledDates[+n]||n<this.minDate||n>this.maxDate)throw new Error("You can't manually set a date that's disabled.");this.dateSelected=n,t&&(this.currentYear=n.getFullYear(),this.currentMonth=n.getMonth(),this.currentMonthName=this.months[n.getMonth()]),C(this.el,this),i&&(f({instance:this}),c(i));var a=r===n.getFullYear()&&o===n.getMonth();return a||t?c(this,n):a||c(this,new Date(r,o,1)),this}function j(e){return U(this,e,!0)}function _(e){return U(this,e)}function U(e,t,n){var r=e.dateSelected,o=e.first,i=e.sibling,a=e.minDate,s=e.maxDate,d=y(t),l=n?"Min":"Max";function A(){return"original"+l+"Date"}function u(){return l.toLowerCase()+"Date"}function h(){return"set"+l}function g(){throw new Error("Out-of-range date passed to "+h())}if(null==t)e[A()]=void 0,i?(i[A()]=void 0,n?(o&&!r||!o&&!i.dateSelected)&&(e.minDate=void 0,i.minDate=void 0):(o&&!i.dateSelected||!o&&!r)&&(e.maxDate=void 0,i.maxDate=void 0)):e[u()]=void 0;else{if(!b(t))throw new Error("Invalid date passed to "+h());i?((o&&n&&d>(r||s)||o&&!n&&d<(i.dateSelected||a)||!o&&n&&d>(i.dateSelected||s)||!o&&!n&&d<(r||a))&&g(),e[A()]=d,i[A()]=d,(n&&(o&&!r||!o&&!i.dateSelected)||!n&&(o&&!i.dateSelected||!o&&!r))&&(e[u()]=d,i[u()]=d)):((n&&d>(r||s)||!n&&d<(r||a))&&g(),e[u()]=d)}return i&&c(i),c(e),e}function Y(){var e=this.first?this:this.sibling,t=e.sibling;return{start:e.dateSelected,end:t.dateSelected}}function H(){var e=this.shadowDom,t=this.positionedEl,n=this.calendarContainer,o=this.sibling,i=this;this.inlinePosition&&(r.some((function(e){return e!==i&&e.positionedEl===t}))||t.style.setProperty("position",null)),n.remove(),r=r.filter((function(e){return e!==i})),o&&delete o.sibling,r.length||D(document,E);var a=r.some((function(t){return t.shadowDom===e}));for(var s in e&&!a&&D(e,S),this)delete this[s];r.length||d.forEach((function(e){document.removeEventListener(e,E)}))}function F(e,t){var n=new Date(e);if(!b(n))throw new Error("Invalid date passed to `navigate`");this.currentYear=n.getFullYear(),this.currentMonth=n.getMonth(),c(this),t&&this.onMonthChange(this)}function N(){var e=!this.calendarContainer.classList.contains("qs-hidden"),t=!this.calendarContainer.querySelector(".qs-overlay").classList.contains("qs-hidden");e&&x(t,this)}t.default=function(e,t){var n=function(e,t){var n,d,l=function(e){var t=A(e);t.events&&(t.events=t.events.reduce((function(e,t){if(!b(t))throw new Error('"options.events" must only contain valid JavaScript Date objects.');return e[+y(t)]=!0,e}),{})),["startDate","dateSelected","minDate","maxDate"].forEach((function(e){var n=t[e];if(n&&!b(n))throw new Error('"options.'+e+'" needs to be a valid JavaScript Date object.');t[e]=y(n)}));var n=t.position,i=t.maxDate,d=t.minDate,l=t.dateSelected,c=t.overlayPlaceholder,u=t.overlayButton,h=t.startDay,g=t.id;if(t.startDate=y(t.startDate||l||new Date),t.disabledDates=(t.disabledDates||[]).reduce((function(e,t){var n=+y(t);if(!b(t))throw new Error('You supplied an invalid date to "options.disabledDates".');if(n===+y(l))throw new Error('"disabledDates" cannot contain the same date as "dateSelected".');return e[n]=1,e}),{}),t.hasOwnProperty("id")&&null==g)throw new Error("`id` cannot be `null` or `undefined`");if(null!=g){var m=r.filter((function(e){return e.id===g}));if(m.length>1)throw new Error("Only two datepickers can share an id.");m.length?(t.second=!0,t.sibling=m[0]):t.first=!0}var f=["tr","tl","br","bl","c"].some((function(e){return n===e}));if(n&&!f)throw new Error('"options.position" must be one of the following: tl, tr, bl, br, or c.');function C(e){throw new Error('"dateSelected" in options is '+(e?"less":"greater")+' than "'+(e||"max")+'Date".')}if(t.position=function(e){var t=e[0],n=e[1],r={};return r[a[t]]=1,n&&(r[a[n]]=1),r}(n||"bl"),i<d)throw new Error('"maxDate" in options is less than "minDate".');if(l&&(d>l&&C("min"),i<l&&C()),["onSelect","onShow","onHide","onMonthChange","formatter","disabler"].forEach((function(e){"function"!=typeof t[e]&&(t[e]=s)})),["customDays","customMonths","customOverlayMonths"].forEach((function(e,n){var r=t[e],o=n?12:7;if(r){if(!Array.isArray(r)||r.length!==o||r.some((function(e){return"string"!=typeof e})))throw new Error('"'+e+'" must be an array with '+o+" strings.");t[n?n<2?"months":"overlayMonths":"days"]=r}})),h&&h>0&&h<7){var p=(t.customDays||o).slice(),B=p.splice(0,h);t.customDays=p.concat(B),t.startDay=+h,t.weekendIndices=[p.length-1,p.length]}else t.startDay=0,t.weekendIndices=[6,0];"string"!=typeof c&&delete t.overlayPlaceholder,"string"!=typeof u&&delete t.overlayButton;var v=t.defaultView;if(v&&"calendar"!==v&&"overlay"!==v)throw new Error('options.defaultView must either be "calendar" or "overlay".');return t.defaultView=v||"calendar",t}(t||{startDate:y(new Date),position:"bl",defaultView:"calendar"}),c=e;if("string"==typeof c)c="#"===c[0]?document.getElementById(c.slice(1)):document.querySelector(c);else{if("[object ShadowRoot]"===I(c))throw new Error("Using a shadow DOM as your selector is not supported.");for(var u,h=c.parentNode;!u;){var g=I(h);"[object HTMLDocument]"===g?u=!0:"[object ShadowRoot]"===g?(u=!0,n=h,d=h.host):h=h.parentNode}}if(!c)throw new Error("No selector / element found.");if(r.some((function(e){return e.el===c})))throw new Error("A datepicker already exists on that element.");var m=c===document.body,f=n?c.parentElement||n:m?document.body:c.parentElement,p=n?c.parentElement||d:f,B=document.createElement("div"),v=document.createElement("div");B.className="qs-datepicker-container qs-hidden",v.className="qs-datepicker";var x={shadowDom:n,customElement:d,positionedEl:p,el:c,parent:f,nonInput:"INPUT"!==c.nodeName,noPosition:m,position:!m&&l.position,startDate:l.startDate,dateSelected:l.dateSelected,disabledDates:l.disabledDates,minDate:l.minDate,maxDate:l.maxDate,noWeekends:!!l.noWeekends,weekendIndices:l.weekendIndices,calendarContainer:B,calendar:v,currentMonth:(l.startDate||l.dateSelected).getMonth(),currentMonthName:(l.months||i)[(l.startDate||l.dateSelected).getMonth()],currentYear:(l.startDate||l.dateSelected).getFullYear(),events:l.events||{},defaultView:l.defaultView,setDate:M,remove:H,setMin:j,setMax:_,show:T,hide:L,navigate:F,toggleOverlay:N,onSelect:l.onSelect,onShow:l.onShow,onHide:l.onHide,onMonthChange:l.onMonthChange,formatter:l.formatter,disabler:l.disabler,months:l.months||i,days:l.customDays||o,startDay:l.startDay,overlayMonths:l.overlayMonths||(l.months||i).map((function(e){return e.slice(0,3)})),overlayPlaceholder:l.overlayPlaceholder||"4-digit year",overlayButton:l.overlayButton||"Submit",disableYearOverlay:!!l.disableYearOverlay,disableMobile:!!l.disableMobile,isMobile:"ontouchstart"in window,alwaysShow:!!l.alwaysShow,id:l.id,showAllDates:!!l.showAllDates,respectDisabledReadOnly:!!l.respectDisabledReadOnly,first:l.first,second:l.second};if(l.sibling){var k=l.sibling,q=x,E=k.minDate||q.minDate,S=k.maxDate||q.maxDate;q.sibling=k,k.sibling=q,k.minDate=E,k.maxDate=S,q.minDate=E,q.maxDate=S,k.originalMinDate=E,k.originalMaxDate=S,q.originalMinDate=E,q.originalMaxDate=S,k.getRange=Y,q.getRange=Y}l.dateSelected&&C(c,x);var D=getComputedStyle(p).position;m||D&&"static"!==D||(x.inlinePosition=!0,p.style.setProperty("position","relative"));var U=r.filter((function(e){return e.positionedEl===x.positionedEl}));return U.some((function(e){return e.inlinePosition}))&&(x.inlinePosition=!0,U.forEach((function(e){e.inlinePosition=!0}))),B.appendChild(v),f.appendChild(B),x.alwaysShow&&w(x),x}(e,t);if(r.length||l(document),n.shadowDom&&(r.some((function(e){return e.shadowDom===n.shadowDom}))||l(n.shadowDom)),r.push(n),n.second){var d=n.sibling;f({instance:n,deselect:!n.dateSelected}),f({instance:d,deselect:!d.dateSelected}),c(d)}return c(n,n.startDate||n.dateSelected),n.alwaysShow&&B(n),n}}]).default},379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],d=t.base?s[0]+t.base:s[0],l=n[d]||0,A="".concat(d," ").concat(l);n[d]=l+1;var c=a(A),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==c?(i[c].references++,i[c].updater(u)):i.push({identifier:A,updater:m(u,t),references:1}),r.push(A)}return r}function d(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,A=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function c(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=A(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function u(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,g=0;function m(e,t){var n,r,o;if(t.singleton){var i=g++;n=h||(h=d(t)),r=c.bind(null,n,i,!1),o=c.bind(null,n,i,!0)}else n=d(t),r=u.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var d=s(e,t),l=0;l<n.length;l++){var A=a(n[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}n=d}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.p="",(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(n){e(1,arguments);var r=t(n);return!isNaN(r)}var o={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function i(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var a,s={date:i({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:i({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:i({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},d={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(e){return function(t,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,a=o.width?String(o.width):i;r=e.formattingValues[a]||e.formattingValues[i]}else{var s=e.defaultWidth,d=o.width?String(o.width):e.defaultWidth;r=e.values[d]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function A(e){return function(t,n){var r=String(t),o=n||{},i=o.width,a=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],s=r.match(a);if(!s)return null;var d,l=s[0],A=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth];return d="[object Array]"===Object.prototype.toString.call(A)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(l))return n}(A):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(l))return n}(A),d=e.valueCallback?e.valueCallback(d):d,{value:d=o.valueCallback?o.valueCallback(d):d,rest:r.slice(l.length)}}}const c={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof o[e]?o[e]:1===t?o[e].one:o[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:s,formatRelative:function(e,t,n,r){return d[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(a={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},o=n.match(a.matchPattern);if(!o)return null;var i=o[0],s=n.match(a.parsePattern);if(!s)return null;var d=a.valueCallback?a.valueCallback(s[0]):s[0];return{value:d=r.valueCallback?r.valueCallback(d):d,rest:n.slice(i.length)}}),era:A({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:A({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:A({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:A({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:A({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function u(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function h(n,r){e(2,arguments);var o=t(n).getTime(),i=u(r);return new Date(o+i)}function g(t,n){e(2,arguments);var r=u(n);return h(t,-r)}function m(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const f=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return m("yy"===t?r%100:r,t.length)},C=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):m(n+1,2)},p=function(e,t){return m(e.getUTCDate(),t.length)},B=function(e,t){return m(e.getUTCHours()%12||12,t.length)},b=function(e,t){return m(e.getUTCHours(),t.length)},y=function(e,t){return m(e.getUTCMinutes(),t.length)},v=function(e,t){return m(e.getUTCSeconds(),t.length)},w=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return m(Math.floor(r*Math.pow(10,n-3)),t.length)};var x=864e5;function k(n){e(1,arguments);var r=1,o=t(n),i=o.getUTCDay(),a=(i<r?7:0)+i-r;return o.setUTCDate(o.getUTCDate()-a),o.setUTCHours(0,0,0,0),o}function I(n){e(1,arguments);var r=t(n),o=r.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(o+1,0,4),i.setUTCHours(0,0,0,0);var a=k(i),s=new Date(0);s.setUTCFullYear(o,0,4),s.setUTCHours(0,0,0,0);var d=k(s);return r.getTime()>=a.getTime()?o+1:r.getTime()>=d.getTime()?o:o-1}function q(t){e(1,arguments);var n=I(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var o=k(r);return o}var E=6048e5;function S(n,r){e(1,arguments);var o=r||{},i=o.locale,a=i&&i.options&&i.options.weekStartsOn,s=null==a?0:u(a),d=null==o.weekStartsOn?s:u(o.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=t(n),A=l.getUTCDay(),c=(A<d?7:0)+A-d;return l.setUTCDate(l.getUTCDate()-c),l.setUTCHours(0,0,0,0),l}function D(n,r){e(1,arguments);var o=t(n,r),i=o.getUTCFullYear(),a=r||{},s=a.locale,d=s&&s.options&&s.options.firstWeekContainsDate,l=null==d?1:u(d),A=null==a.firstWeekContainsDate?l:u(a.firstWeekContainsDate);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(i+1,0,A),c.setUTCHours(0,0,0,0);var h=S(c,r),g=new Date(0);g.setUTCFullYear(i,0,A),g.setUTCHours(0,0,0,0);var m=S(g,r);return o.getTime()>=h.getTime()?i+1:o.getTime()>=m.getTime()?i:i-1}function T(t,n){e(1,arguments);var r=n||{},o=r.locale,i=o&&o.options&&o.options.firstWeekContainsDate,a=null==i?1:u(i),s=null==r.firstWeekContainsDate?a:u(r.firstWeekContainsDate),d=D(t,n),l=new Date(0);l.setUTCFullYear(d,0,s),l.setUTCHours(0,0,0,0);var A=S(l,n);return A}var L=6048e5;function M(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),i=r%60;if(0===i)return n+String(o);var a=t||"";return n+String(o)+a+m(i,2)}function j(e,t){return e%60==0?(e>0?"-":"+")+m(Math.abs(e)/60,2):_(e,t)}function _(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+m(Math.floor(o/60),2)+n+m(o%60,2)}const U={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return f(e,t)},Y:function(e,t,n,r){var o=D(e,r),i=o>0?o:1-o;return"YY"===t?m(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):m(i,t.length)},R:function(e,t){return m(I(e),t.length)},u:function(e,t){return m(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return m(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return m(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return C(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return m(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(n,r,o,i){var a=function(n,r){e(1,arguments);var o=t(n),i=S(o,r).getTime()-T(o,r).getTime();return Math.round(i/L)+1}(n,i);return"wo"===r?o.ordinalNumber(a,{unit:"week"}):m(a,r.length)},I:function(n,r,o){var i=function(n){e(1,arguments);var r=t(n),o=k(r).getTime()-q(r).getTime();return Math.round(o/E)+1}(n);return"Io"===r?o.ordinalNumber(i,{unit:"week"}):m(i,r.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):p(e,t)},D:function(n,r,o){var i=function(n){e(1,arguments);var r=t(n),o=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var i=r.getTime(),a=o-i;return Math.floor(a/x)+1}(n);return"Do"===r?o.ordinalNumber(i,{unit:"dayOfYear"}):m(i,r.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return m(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});case"eeee":default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return m(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});case"cccc":default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return m(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return B(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):b(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):m(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):m(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):y(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):v(e,t)},S:function(e,t){return w(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return j(o);case"XXXX":case"XX":return _(o);case"XXXXX":case"XXX":default:return _(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return j(o);case"xxxx":case"xx":return _(o);case"xxxxx":case"xxx":default:return _(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+M(o,":");case"OOOO":default:return"GMT"+_(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+M(o,":");case"zzzz":default:return"GMT"+_(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return m(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return m((r._originalDate||e).getTime(),t.length)}};function Y(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function H(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const F={p:H,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),o=r[1],i=r[2];if(!i)return Y(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Y(o,t)).replace("{{time}}",H(i,t))}};var N=6e4;function W(e){return e.getTime()%N}function P(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var r=n>0?(N+W(t))%N:W(t);return n*N+r}var O=["D","DD"],z=["YY","YYYY"];function R(e){return-1!==O.indexOf(e)}function $(e){return-1!==z.indexOf(e)}function X(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,G=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Z=/^'([^]*?)'?$/,V=/''/g,J=/[a-zA-Z]/;function K(n,o,i){e(2,arguments);var a=String(o),s=i||{},d=s.locale||c,l=d.options&&d.options.firstWeekContainsDate,A=null==l?1:u(l),h=null==s.firstWeekContainsDate?A:u(s.firstWeekContainsDate);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=d.options&&d.options.weekStartsOn,f=null==m?0:u(m),C=null==s.weekStartsOn?f:u(s.weekStartsOn);if(!(C>=0&&C<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!d.localize)throw new RangeError("locale must contain localize property");if(!d.formatLong)throw new RangeError("locale must contain formatLong property");var p=t(n);if(!r(p))throw new RangeError("Invalid time value");var B=P(p),b=g(p,B),y={firstWeekContainsDate:h,weekStartsOn:C,locale:d,_originalDate:p},v=a.match(G).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,F[t])(e,d.formatLong,y):e})).join("").match(Q).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return ee(e);var r=U[t];if(r)return!s.useAdditionalWeekYearTokens&&$(e)&&X(e,o,n),!s.useAdditionalDayOfYearTokens&&R(e)&&X(e,o,n),r(b,e,d.localize,y);if(t.match(J))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return v}function ee(e){return e.match(Z)[1].replace(V,"'")}function te(n){e(1,arguments);var r=t(n);return r.setHours(0,0,0,0),r}function ne(t,n){e(2,arguments);var r=te(t),o=te(n);return r.getTime()===o.getTime()}function re(t){return e(1,arguments),ne(t,Date.now())}var oe=n(448),ie=n.n(oe);function ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function se(e,t,n){return t&&ae(e.prototype,t),n&&ae(e,n),e}function de(e){return"number"==typeof e&&!isNaN(e)}function le(e,t,n){return Math.min(Math.max(e,t),n)}function Ae(e){if(0===e.type.indexOf("touch")){var t=e.touches[0];return{x:t.clientX,y:t.clientY}}return{x:e.clientX,y:e.clientY}}function ce(e){return 1==e.length?"0"+e:""+e}var ue=function(){function e(e){this._rgba={r:0,g:0,b:0,a:1},this._hsva={h:0,s:0,v:0,a:1},this.fromHex(e)}var t=e.prototype;return t.fromHex=function(e){e||(e=0),de(e)?(this._hexNumber=e,this._hexString=function(e){return"#"+("00000"+(0|e).toString(16)).substr(-6).toUpperCase()}(this._hexNumber)):(this._hexString=e.toUpperCase(),this._hexNumber=he(this._hexString));var t=function(e){return{r:(e>>16&255)/255,g:(e>>8&255)/255,b:(255&e)/255}}(this._hexNumber),n=t.g,r=t.b;this._rgba.r=t.r,this._rgba.g=n,this._rgba.b=r;var o=function(e){var t,n=e.r,r=e.g,o=e.b,i=Math.max(n,r,o),a=Math.min(n,r,o),s=i-a,d=0===i?0:s/i,l=i;if(i==a)t=0;else{switch(i){case n:t=(r-o)/s+(r<o?6:0);break;case r:t=(o-n)/s+2;break;case o:t=(n-r)/s+4}t/=6}return{h:t,s:d,v:l}}(this._rgba),i=o.s,a=o.v;this._hsva.h=o.h,this._hsva.s=i,this._hsva.v=a,this._updateBrightness()},t.fromHsv=function(e){var t=e.s,n=e.v;this._hsva.h=e.h,this._hsva.s=t,this._hsva.v=n;var r=function(e){var t=e.h,n=e.s,r=e.v;t*=6;var o=Math.floor(t),i=t-o,a=r*(1-n),s=r*(1-i*n),d=r*(1-(1-i)*n),l=o%6;return{r:[r,s,a,a,d,r][l],g:[d,r,r,s,a,a][l],b:[a,a,d,r,r,s][l]}}(this._hsva),o=r.g,i=r.b;this._rgba.r=r.r,this._rgba.g=o,this._rgba.b=i,this._hexString=function(e){var t=e.g,n=e.b;return["#",ce(Math.round(255*e.r).toString(16)),ce(Math.round(255*t).toString(16)),ce(Math.round(255*n).toString(16))].join("").toUpperCase()}(this._rgba),this._hexNumber=he(this._hexString),this._updateBrightness()},t._updateBrightness=function(){var e=this._rgba;this._brightness=(299*e.r+587*e.g+114*e.b)/1e3,this._isDark=this._brightness<.5,this._isLight=!this._isDark},se(e,[{key:"rgb",get:function(){return this._rgba}},{key:"hsv",get:function(){return this._hsva}},{key:"hex",get:function(){return this._hexNumber}},{key:"hexString",get:function(){return this._hexString}},{key:"brightness",get:function(){return this._brightness}},{key:"isDark",get:function(){return this._isDark}},{key:"isLight",get:function(){return this._isLight}}]),e}();function he(e){return parseInt(e.replace("#",""),16)}var ge=function(){function e(e){var t=this;void 0===e&&(e={}),this._widthUnits="px",this._heightUnits="px",this._huePosition=0,this._hueHeight=0,this._maxHue=0,this._inputIsNumber=!1,this._saturationWidth=0,this._isChoosing=!1,this._callbacks=[],this.width=0,this.height=0,this.hue=0,this.position={x:0,y:0},this.color=new ue(0),this.backgroundColor=new ue(0),this.hueColor=new ue(0),this._onSaturationMouseDown=function(e){var n=t.$saturation.getBoundingClientRect(),r=Ae(e),o=r.x,i=r.y;t._isChoosing=!0,t._moveSelectorTo(o-n.left,i-n.top),t._updateColorFromPosition(),t._window.addEventListener("mouseup",t._onSaturationMouseUp),t._window.addEventListener("touchend",t._onSaturationMouseUp),t._window.addEventListener("mousemove",t._onSaturationMouseMove),t._window.addEventListener("touchmove",t._onSaturationMouseMove),e.preventDefault()},this._onSaturationMouseMove=function(e){var n=t.$saturation.getBoundingClientRect(),r=Ae(e);t._moveSelectorTo(r.x-n.left,r.y-n.top),t._updateColorFromPosition()},this._onSaturationMouseUp=function(){t._isChoosing=!1,t._window.removeEventListener("mouseup",t._onSaturationMouseUp),t._window.removeEventListener("touchend",t._onSaturationMouseUp),t._window.removeEventListener("mousemove",t._onSaturationMouseMove),t._window.removeEventListener("touchmove",t._onSaturationMouseMove)},this._onHueMouseDown=function(e){var n=t.$hue.getBoundingClientRect(),r=Ae(e).y;t._isChoosing=!0,t._moveHueTo(r-n.top),t._updateHueFromPosition(),t._window.addEventListener("mouseup",t._onHueMouseUp),t._window.addEventListener("touchend",t._onHueMouseUp),t._window.addEventListener("mousemove",t._onHueMouseMove),t._window.addEventListener("touchmove",t._onHueMouseMove),e.preventDefault()},this._onHueMouseMove=function(e){var n=t.$hue.getBoundingClientRect(),r=Ae(e);t._moveHueTo(r.y-n.top),t._updateHueFromPosition()},this._onHueMouseUp=function(){t._isChoosing=!1,t._window.removeEventListener("mouseup",t._onHueMouseUp),t._window.removeEventListener("touchend",t._onHueMouseUp),t._window.removeEventListener("mousemove",t._onHueMouseMove),t._window.removeEventListener("touchmove",t._onHueMouseMove)},this._window=e.window||window,this._document=this._window.document,this.$el=this._document.createElement("div"),this.$el.className="Scp",this.$el.innerHTML='\n      <div class="Scp-saturation">\n        <div class="Scp-brightness"></div>\n        <div class="Scp-sbSelector"></div>\n      </div>\n      <div class="Scp-hue">\n        <div class="Scp-hSelector"></div>\n      </div>\n    ',this.$saturation=this.$el.querySelector(".Scp-saturation"),this.$hue=this.$el.querySelector(".Scp-hue"),this.$sbSelector=this.$el.querySelector(".Scp-sbSelector"),this.$hSelector=this.$el.querySelector(".Scp-hSelector"),this.$saturation.addEventListener("mousedown",this._onSaturationMouseDown),this.$saturation.addEventListener("touchstart",this._onSaturationMouseDown),this.$hue.addEventListener("mousedown",this._onHueMouseDown),this.$hue.addEventListener("touchstart",this._onHueMouseDown),e.el&&this.appendTo(e.el),e.background&&this.setBackgroundColor(e.background),e.widthUnits&&(this._widthUnits=e.widthUnits),e.heightUnits&&(this._heightUnits=e.heightUnits),this.setSize(e.width||175,e.height||150),this.setColor(e.color)}var t=e.prototype;return t.appendTo=function(e){return"string"==typeof e?document.querySelector(e).appendChild(this.$el):e.appendChild(this.$el),this},t.remove=function(){this._callbacks=[],this._onSaturationMouseUp(),this._onHueMouseUp(),this.$saturation.removeEventListener("mousedown",this._onSaturationMouseDown),this.$saturation.removeEventListener("touchstart",this._onSaturationMouseDown),this.$hue.removeEventListener("mousedown",this._onHueMouseDown),this.$hue.removeEventListener("touchstart",this._onHueMouseDown),this.$el.parentNode&&this.$el.parentNode.removeChild(this.$el)},t.setColor=function(e){this._inputIsNumber=de(e),this.color.fromHex(e);var t=this.color.hsv,n=t.h,r=t.s,o=t.v;return isNaN(n)||(this.hue=n),this._moveSelectorTo(this._saturationWidth*r,(1-o)*this._hueHeight),this._moveHueTo((1-this.hue)*this._hueHeight),this._updateHue(),this},t.setSize=function(e,t){return this.width=e,this.height=t,this.$el.style.width=this.width+this._widthUnits,this.$el.style.height=this.height+this._heightUnits,this._saturationWidth=this.width-25,this.$saturation.style.width=this._saturationWidth+"px",this._hueHeight=this.height,this._maxHue=this._hueHeight-2,this},t.setBackgroundColor=function(e){return this.backgroundColor.fromHex(e),this.$el.style.padding="5px",this.$el.style.background=this.backgroundColor.hexString,this},t.setNoBackground=function(){return this.$el.style.padding="0px",this.$el.style.background="none",this},t.onChange=function(e){return this._callbacks.indexOf(e)<0&&(this._callbacks.push(e),e(this.getHexString())),this},t.getColor=function(){return this._inputIsNumber?this.getHexNumber():this.getHexString()},t.getHexString=function(){return this.color.hexString.toUpperCase()},t.getHexNumber=function(){return this.color.hex},t.getRGB=function(){return this.color.rgb},t.getHSV=function(){return this.color.hsv},t.isDark=function(){return this.color.isDark},t.isLight=function(){return this.color.isLight},t._moveSelectorTo=function(e,t){this.position.x=le(e,0,this._saturationWidth),this.position.y=le(t,0,this._hueHeight),this.$sbSelector.style.transform="translate("+this.position.x+"px, "+this.position.y+"px)"},t._updateColorFromPosition=function(){this.color.fromHsv({h:this.hue,s:this.position.x/this._saturationWidth,v:1-this.position.y/this._hueHeight}),this._updateColor()},t._moveHueTo=function(e){this._huePosition=le(e,0,this._maxHue),this.$hSelector.style.transform="translateY("+this._huePosition+"px)"},t._updateHueFromPosition=function(){var e=this.getHSV();this.hue=1-this._huePosition/this._maxHue,this.color.fromHsv({h:this.hue,s:e.s,v:e.v}),this._updateHue()},t._updateHue=function(){this.hueColor.fromHsv({h:this.hue,s:1,v:1}),this.$saturation.style.background="linear-gradient(to right, #fff, "+this.hueColor.hexString+")",this._updateColor()},t._updateColor=function(){this.$sbSelector.style.background=this.getHexString(),this.$sbSelector.style.borderColor=this.isDark()?"#fff":"#000",this._triggerChange()},t._triggerChange=function(){var e=this;this._callbacks.forEach((function(t){return t(e.getHexString())}))},se(e,[{key:"isChoosing",get:function(){return this._isChoosing}}]),e}();!function(e,t){void 0===t&&(t={});var n=t.insertAt;if("undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===n&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}(".Scp{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative}.Scp-saturation{position:relative;height:100%;background:linear-gradient(90deg,#fff,red);float:left;margin-right:5px}.Scp-brightness{width:100%;height:100%;background:linear-gradient(hsla(0,0%,100%,0),#000)}.Scp-sbSelector{border:2px solid #fff;position:absolute;width:14px;height:14px;background:#fff;border-radius:10px;top:-7px;left:-7px;box-sizing:border-box;z-index:10}.Scp-hue{width:20px;height:100%;position:relative;float:left;background:linear-gradient(red,#f0f 17%,#00f 34%,#0ff 50%,#0f0 67%,#ff0 84%,red)}.Scp-hSelector{position:absolute;background:#fff;border-bottom:1px solid #000;right:-3px;width:10px;height:2px}",{insertAt:"top"});const me=ge;function fe(e,t,n="",r=[]){const o=document.createElement(e);if(null==t?document.querySelector("#projectContainer").appendChild(o):t.appendChild(o),n&&o.setAttribute("id",n),r)if(Array.isArray(r))for(let e=0;e<r.length;e++)o.classList.add(r[e]);else"string"==typeof r&&o.classList.add(r);return o}new Event("publish");class Ce{constructor(e,t,n){this.node=e,this.container=t,this.obj=t.list,this.listHash=n,e.addEventListener("publish",this)}handleEvent(e){const t=this.node.dataset.name;this.obj.name=t,console.log(this)}change(){const e=this.container.listName;this.node.querySelector(".listName").textContent=e;const t=this.container.color;this.node.querySelector(".listPointer").style.backgroundColor=t,console.log(this)}}var pe=n(845);class Be{constructor(e,t,n,r){this.node=e,this.obj=t,this.listHash=n,this.taskHash=r,e.addEventListener("publish",this)}handleEvent(e){const t=this.node.dataset.title,n=this.node.dataset.duedate;this.obj.title=t,this.obj.dueDate=n,console.log(this)}change(){const e=this.obj.title;let t;this.obj.dueDate&&(t=K(this.obj.dueDate,"dd/MM/yy")),this.obj.flagged?this.node.querySelector(".taskFlagIcon").src=pe.Z:this.node.querySelector(".taskFlagIcon").src="",this.node.querySelector(".taskDescription").textContent=e,this.node.querySelector(".taskDueDate").textContent=t,console.log(this)}}n.p;const be=n.p+"imgs/square.20ddc8f48802e8724a19343ff7c8c69e.svg",ye=n.p+"imgs/square-fill.703b437b31f52c79bb679320b10d3aac.svg",ve=n.p+"imgs/pencil-square.6ddc91ca032162479d28d2e9038ca648.svg",we=n.p+"imgs/trash.f1497a79274fd4b15a1d7ad66725119e.svg";n.p;var xe=n(379),ke=n.n(xe),Ie=n(424);ke()(Ie.Z,{insert:"head",singleton:!1}),Ie.Z.locals,(()=>{const e=(()=>{const t=new Map,n=new Map;return{ListStorage:t,createListObject:function(e,n){const r=new Map,o=e+new Date,i={listName:e,list:r,hash:o};return""!=n&&(i.color=n),t.set(o,i),o},createListNode:function(e){const t=fe("div",listsContainer,"","sideBarList"),n=fe("div",t,"","listPointer");return e.color&&(n.style.backgroundColor=e.color),fe("div",t,"","listName").textContent=e.listName,fe("div",n,"","listCount").textContent=e.list.size,fe("img",t,"",["editListIcon","listIcon"]).src=ve,fe("img",t,"",["deleteListIcon","listIcon"]).src=we,t},createListBinder:function(e,t){const r=e.hash,o=new Ce(t,e,r);return n.set(r,o),o},ListBinderStorage:n,updateTaskCounters:function(){n.forEach((function(e){e.node.querySelector(".listCount").textContent=e.obj.size}))},editListBinder:function(e,t,n){""!==t&&(e.container.listName=t),e.container.color=n,e.change()},deleteListBinder:function(t){t.node.remove(),t.obj=null,e.ListStorage.delete(t.container.hash)}}})(),t=(()=>{const n=new Map;return{TaskBinderStorage:n,storeTaskBinder:function(t){e.ListStorage.get(t.listHash).list.set(t.taskHash,t.obj)},createTaskBinder:function(e,t,r){const o=t.taskHash,i=new Be(e,t,r,o);return n.set(i.taskHash,i),i},deleteTaskBinder:function(n){n.node.remove(),n.obj=null,e.ListStorage.get(n.listHash).list.delete(n.taskHash),t.TaskBinderStorage.delete(n.taskHash)},editTaskBinder:function(e,t,n,r){""!==t&&(e.obj.title=t),e.obj.dueDate=n,isNaN(n)?e.obj.scheduled=!1:e.obj.scheduled=!0,e.obj.flagged!=r&&(e.obj.flagged=r),e.change()},createTaskObject:function(e,t,n){return{completeBool:e,title:t,dueDate:n,taskHash:t+new Date,flagged:!1,scheduled:!1}},createTaskNode:function(e){const t=fe("li",userContentContainer,"","task"),n=fe("img",t,"","checkbox");console.log(e.completeBool),e.completeBool?n.src=ye:n.src=be,fe("div",t,"","taskDescription").textContent=e.title;const r=fe("div",t,"","taskDueDate");if(e.dueDate){let t=e.dueDate;t=K(t,"dd/MM/yy"),r.textContent=t}const o=fe("img",t,"","editTaskIcon");o.src=ve,fe("img",t,"","deleteTaskIcon").src=we;const i=fe("div",t,"","flagNodeHolder");return e.flagged?fe("img",i,"","taskFlagIcon").src=pe.Z:fe("img",i,"","taskFlagIcon"),t.insertBefore(i,o),document.getElementById("userContentContainer").insertBefore(t,document.getElementById("lowerAddTask")),t.setAttribute("data-hash",e.hash),t.setAttribute("data-title",e.title),t.setAttribute("data-duedate",e.dueDate),t}}})(),n={runSearch:function(t,n){const r=function(){if("toggle"==t){function e(e,t){let n=!1;for(const[r,o]of Object.entries(t))if("all"==r){if(o){n=!0;break}}else if("today"==r){if(o&&re(e.dueDate)){n=!0;break}}else o&&e[r]&&(n=!0);return n}return e}if("text"==t){function e(e,t){return""==t||!!e.title.includes(t)}return e}console.log("Error with createSearchTest - no test type provided")}();let o=[];return e.ListStorage.forEach((e=>{e.list.forEach((e=>{r(e,n)&&o.push(e)}))})),o},toggles:{scheduled:!1,flagged:!1,today:!1,all:!1},publishSearchResults:function(e){e.forEach((e=>{const n=t.createTaskNode(e),o=t.createTaskBinder(n,e,"searchResults");r.applyTaskListeners(o)})),document.getElementById("lowerAddTask").style.display="none",document.getElementById("listTitle").textContent="Search",document.getElementById("listTitle").style.color="black",document.getElementById("topBarListCount").textContent=Object.keys(e).length}},r=(()=>{function a(t){const n=t.node,r=[];r.push(n.querySelector(".listPointer")),r.push(n.querySelector(".listName")),r.forEach((e=>{e.addEventListener("click",(function(){i.renderAddListForm.hide(),i.renderAddTaskForm.hide(),i.renderEditTaskForm.hide(),o.unloadLists(),o.loadList(t.listHash),o.refreshTopBar(t.listHash),document.getElementById("lowerAddTask").style.display="flex"}))})),t.node.querySelector(".editListIcon").addEventListener("click",(()=>{n.style.display="none",i.renderEditListForm.show(t)})),t.node.querySelector(".deleteListIcon").addEventListener("click",(()=>{e.deleteListBinder(t),o.unloadLists(),o.generateHome()}))}(()=>{const e=document.getElementById("searchBar");e.addEventListener("input",(function(e){document.getElementById("clearIcon").style.visibility="visible",o.unloadLists(),i.hideAllForms();const t=n.runSearch("text",e.target.value);n.publishSearchResults(t)})),document.getElementById("clearIcon").addEventListener("click",(()=>{e.value="",o.unloadLists()}))})(),document.getElementById("addListButton").addEventListener("click",(function(){i.hideAllForms(),i.renderAddListForm.show()})),(()=>{const e=document.getElementsByClassName("addTaskButton");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(function(){i.hideAllForms(),i.renderAddTaskForm.show()}))})(),document.querySelectorAll(".date").forEach((function(e){const t=new Event("dateChange");ie()(e,{formatter:(e,t)=>{e.value=K(t,"eee d/M/yy")},onSelect:(n,r)=>{e.dispatchEvent(t);const o=n.parent.parentNode.id,i=Date.parse(r);if(n.setDate(),e.value=K(r,"eee d/M/yy"),"newTaskForm"==o){e.setAttribute("data-date",i);const t=document.getElementById("newFormDateCheckBox");t.style.display="flex",t.checked=!0}else if("editTaskForm"==o){e.setAttribute("data-date",i);const t=document.getElementById("editFormDateDeleteButton");t.style.display="flex",t.checked=!0}}}),e.addEventListener("dateChange",(()=>{e.classList.add("dateChosen")}))})),document.querySelectorAll(".colorPicker").forEach((e=>{const t=e,n=t.parentElement.querySelector(".colorPickerHolder");let r=!1;t.addEventListener("click",(()=>{if(r)return;r=!0;const e=new me;t.dataset.color&&e.setColor(t.dataset.color),e.appendTo(n);const o=t.getBoundingClientRect();n.style.top=`${o.bottom}px`,n.style.left=`${o.left}px`;const i=fe("div",n,"colorButtonHolder",""),a=fe("button",i,"colorSubmit","listButton");a.textContent="Accept";const s=fe("button",i,"colorAbort","listButton");s.textContent="Remove",a.addEventListener("click",(()=>{const n=e.getColor();t.style.backgroundColor=n,t.setAttribute("data-color",n),e.remove(),a.remove(),s.remove(),r=!1})),s.addEventListener("click",(()=>{t.removeAttribute("data-color"),t.style.backgroundColor="#F1FAEE",e.remove(),a.remove(),s.remove(),r=!1}))}))})),document.querySelectorAll(".location").forEach((e=>{e.addEventListener("click",(()=>{alert("The location feature has not yet been implemented. Try choosing a date or flagging this task instead :)")}))})),(()=>{const e=document.getElementsByClassName("flagButton");for(let t=0;t<e.length;t++){let n=e[t];n.setAttribute("data-flagged",!1),n.addEventListener("click",(()=>{const e="true"==n.dataset.flagged;e?(n.classList.remove("flagActive"),n.setAttribute("data-flagged",!1)):e||(n.classList.add("flagActive"),n.setAttribute("data-flagged",!0))}))}})(),document.getElementById("newItemAbort").addEventListener("click",(function(){document.getElementById("newTaskForm").reset(),i.renderAddTaskForm.hide()})),document.getElementById("editTaskAbort").addEventListener("click",(function(){document.getElementById("editTaskForm").reset(),i.renderEditTaskForm.hide(),i.renderEditTaskForm.editFormActive=!1})),document.getElementById("newListAbort").addEventListener("click",(function(){document.getElementById("newListForm").reset(),document.getElementById("newListContainer").style.display="none",document.getElementById("newListColor").removeAttribute("data-color"),document.getElementById("newListColor").removeAttribute("style")})),document.getElementById("editListAbort").addEventListener("click",(function(){document.getElementById("editListForm").reset(),i.renderEditListForm.hide()})),document.querySelectorAll(".submitRefreshBlocker").forEach((function(e){e.addEventListener("submit",(e=>{e.preventDefault()}))})),document.querySelector("#editTaskSubmit").addEventListener("click",(function(){!function(){const e=document.getElementById("editTaskContainer"),n=e.dataset.taskhash,o=t.TaskBinderStorage.get(n),i=o.node.querySelector(".checkbox");o.obj.completeBool?i.src=ye:i.src=be;const a=document.getElementById("editItemTitle").value,s=document.getElementById("editDateInput");s.classList.remove("dateChosen");const d=parseInt(s.dataset.date);s.removeAttribute("data-date"),s.setAttribute("placeholder","Add Date"),document.getElementById("editFormDateDeleteButton").style.display="none";const l=document.getElementById("editItemFlag"),A="true"==l.dataset.flagged;l.removeAttribute("data-flagged"),l.classList.remove("flagActive"),t.editTaskBinder(o,a,d,A),document.getElementById("editTaskForm").reset(),e.style.display="none",o.node.style.display="grid",r.sideBarToggles.updateSideBarToggleCounts()}()})),document.querySelector("#editListSubmit").addEventListener("click",(function(){!function(){const t=document.getElementById("editListContainer").dataset.listhash,n=e.ListBinderStorage.get(t),r=document.getElementById("editListTitle").value,a=document.getElementById("editListColor").dataset.color;e.editListBinder(n,r,a),document.getElementById("editListForm").reset(),i.renderEditListForm.hide(),n.node.click(),o.refreshTopBar(t)}()})),document.getElementById("newItemSubmit").addEventListener("click",(function(){!function(){const n=document.getElementById("newItemTitle").value;if(""==n)return void alert("Remember to give your task a title!");const i=parseInt(document.getElementById("dateInput").dataset.date),a=t.createTaskObject(!1,n,i);isNaN(i)||(a.scheduled=!0),document.getElementById("dateInput").setAttribute("data-date",NaN),document.getElementById("dateInput").classList.remove("dateChosen"),document.getElementById("newFormDateCheckBox").style.display="none";const s=document.getElementById("newItemFlag");"true"==s.dataset.flagged?a.flagged=!0:a.flagged=!1,s.removeAttribute("data-flagged"),s.classList.remove("flagActive");const d=t.createTaskNode(a),l=userContentContainer.dataset.activelist,A=t.createTaskBinder(d,a,l);t.storeTaskBinder(A),r.applyTaskListeners(A),e.updateTaskCounters(),o.refreshTopBar(l),document.getElementById("dateDeleteButton")&&document.getElementById("dateDeleteButton").remove(),document.getElementById("dateInput").value="",document.getElementById("dateInput").setAttribute("placeholder","Add Date"),r.sideBarToggles.updateSideBarToggleCounts()}(),i.renderAddTaskForm.hide(),document.getElementById("newTaskForm").reset()})),document.getElementById("newListSubmit").addEventListener("click",(function(){!function(){const t=document.getElementById("newListTitle").value,n=document.getElementById("newListColor").dataset.color,r=e.createListObject(t,n),s=e.ListStorage.get(r),d=e.createListNode(s),l=e.createListBinder(s,d);a(l),userContentContainer.setAttribute("data-activelist",l.listHash),o.unloadLists(),o.loadList(l.listHash),o.refreshTopBar(l.listHash),i.renderAddListForm.hide(),document.getElementById("newListForm").reset(),document.getElementById("newListColor").removeAttribute("data-color"),document.getElementById("newListColor").removeAttribute("style"),document.getElementById("lowerAddTask").style.display="flex"}()}));const s=(()=>{const e=["scheduled","flagged","today","all"];return e.forEach((e=>{const t=document.getElementById(`${e}Toggle`);t.addEventListener("click",(()=>{o.unloadLists(),i.hideAllForms(),t.classList.contains(`${e}ToggleActive`)?(t.classList.remove(`${e}ToggleActive`),n.toggles[`${e}`]=!1):(o.unloadLists(),t.classList.add(`${e}ToggleActive`),document.getElementById("listTitle").textContent="Search",document.getElementById("listTitle").style.color="black",n.toggles[`${e}`]=!0);const r=n.runSearch("toggle",n.toggles);n.publishSearchResults(r)}))})),{updateSideBarToggleCounts:function(){e.forEach((e=>{const t=document.querySelector(`.${e}Count`),r=function(e){let t=Object.assign({},n.toggles);for(const e in t)t[e]=!1;return t[e]=!0,t}(e),o=n.runSearch("toggle",r);t.textContent=o.length}))}}})();return(()=>{const e=document.getElementById("newFormDateCheckBox"),t=document.getElementById("dateInput");e.addEventListener("click",(()=>{t.value="",t.setAttribute("placeholder","Add Date"),t.removeAttribute("data-date"),e.style.display="none",document.getElementById("dateInput").classList.remove("dateChosen")}))})(),(()=>{const e=document.getElementById("editFormDateDeleteButton"),t=document.getElementById("editDateInput");e.addEventListener("click",(()=>{t.value="",t.setAttribute("placeholder","Add Date"),t.removeAttribute("data-date"),e.style.display="none",document.getElementById("editDateInput").classList.remove("dateChosen")}))})(),{applyTaskListeners:function(n){!function(e){const t=e.node.querySelector(".checkbox");t.addEventListener("click",(()=>{console.log(e.obj.completeBool),e.obj.completeBool=!e.obj.completeBool,console.log(e.obj.completeBool),e.obj.completeBool?t.src=ye:e.obj.completeBool||(t.src=be)}))}(n),function(n){n.node.querySelector(".deleteTaskIcon").addEventListener("click",(function(){t.deleteTaskBinder(n),e.updateTaskCounters(),r.sideBarToggles.updateSideBarToggleCounts()}))}(n),function(e){e.node.querySelector(".editTaskIcon").addEventListener("click",(()=>{console.log("edit form activated"),e.node.style.display="none",i.hideAllForms(),i.renderEditTaskForm.show(e)}))}(n)},applyListListeners:a,sideBarToggles:s}})(),o={loadList:function(n){userContentContainer.setAttribute("data-activeList",n),e.ListStorage.get(n).list.forEach((function(e){let o=t.createTaskNode(e),i=t.createTaskBinder(o,e,n);r.applyTaskListeners(i)}))},unloadLists:function(){t.TaskBinderStorage.forEach((function(e){e.node.remove(),t.TaskBinderStorage.delete(e.taskHash)}))},loadListsIntoSideBar:(()=>{let t=e.ListStorage.values();for(let n=0;n<e.ListStorage.size;n++){let n=t.next().value,o=e.createListNode(n),i=e.createListBinder(n,o);r.applyListListeners(i)}})(),refreshTopBar:function(t){const n=e.ListStorage.get(t),r=document.getElementById("listTitle");r.textContent=n.listName,n.color?r.style.color=n.color:r.style.color="black",document.getElementById("topBarListCount").textContent=n.list.size},generateHome:function(){const e=document.getElementById("listTitle");e.textContent="Select or add a list to get started!",e.style.color="black",document.getElementById("lowerAddTask").style.display="none"}},i=(()=>{const n=(()=>{const e=document.getElementById("newListContainer"),t=document.getElementById("newListTitle");return{show:function(){e.style.display="flex",t.focus()},hide:function(){e.style.display="none";const t=document.getElementById("listsContainer").lastChild;t.parentNode.insertBefore(e,t.nextSibling)}}})(),r=(()=>{const e=document.getElementById("newTaskContainer"),t=document.getElementById("lowerAddTask"),n=document.getElementById("newItemTitle");return{show:function(){e.style.display="flex",t.style.display="none",n.focus()},hide:function(){e.style.display="none",t.style.display="flex";const n=document.getElementById("userContentContainer").lastChild;n.parentNode.insertBefore(t,n.nextSibling),n.parentNode.insertBefore(e,n.nextSibling)}}})(),o=(()=>{const t=document.getElementById("editListContainer");return{show:function(e){i.renderEditListForm.editListFormActive=!0,t.style.display="flex",document.getElementById("listsContainer").insertBefore(t,e.node);const n=t.querySelector("#editListTitle"),r=e.container.listName;n.setAttribute("placeholder",r);const o=t.querySelector("#editListColor"),a=e.container.color;a&&(o.style.backgroundColor=a),t.setAttribute("data-listHash",e.container.hash),t.style.display="flex"},hide:function(){const n=t.dataset.listhash,r=e.ListBinderStorage.get(n);r&&(r.node.style.display="grid"),t.style.display="none",t.removeAttribute("data-listHash")}}})(),a=(()=>{const e=document.querySelector("#editTaskContainer");return{show:function(t){userContentContainer.insertBefore(e,t.node);const n=e.querySelector(".checkbox");t.obj.completeBool?n.src=ye:t.obj.completeBool||(n.src=be),n.addEventListener("click",(()=>{console.log(t.obj.completeBool),t.obj.completeBool=!t.obj.completeBool,console.log(t.obj.completeBool),t.obj.completeBool?n.src=ye:t.obj.completeBool||(n.src=be)}));const r=e.querySelector("#editItemTitle"),o=t.obj.title;r.setAttribute("placeholder",o);const i=e.querySelector("#editDateInput");if(!isNaN(t.obj.dueDate)){const e=K(t.obj.dueDate,"eee d/M/yy");i.setAttribute("placeholder",e),i.setAttribute("data-date",t.obj.dueDate);const n=document.getElementById("editFormDateDeleteButton");n.style.display="flex",n.checked=!0,i.classList.add("dateChosen")}if(t.obj.flagged){const e=document.getElementById("editItemFlag");e.setAttribute("data-flagged",!0),e.classList.add("flagActive")}e.setAttribute("data-taskHash",t.taskHash),e.setAttribute("data-listHash",t.listHash),e.style.display="flex"},hide:function(){const n=e.dataset.taskhash,r=t.TaskBinderStorage.get(n);r&&(r.node.style.display="flex"),e.style.display="none",e.removeAttribute("data-taskHash"),e.removeAttribute("data-listHash")}}})();return{renderAddTaskForm:r,renderEditTaskForm:a,renderAddListForm:n,renderEditListForm:o,hideAllForms:()=>{n.hide(),r.hide(),o.hide(),a.hide()}}})();document.getElementById("topBar").addEventListener("click",(function(){console.log("LIST STORAGE"),console.log(e.ListStorage),console.log("SEARCH TOGGLES"),console.log(n.toggles)})),o.generateHome(),r.sideBarToggles.updateSideBarToggleCounts()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
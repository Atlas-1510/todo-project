(()=>{var __webpack_modules__={444:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".qs-datepicker-container{font-size:1rem;font-family:sans-serif;color:#000;position:absolute;width:15.625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:9001;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid grey;border-radius:.263921875em;overflow:hidden;background:#fff;-webkit-box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3);box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3)}.qs-datepicker-container *{-webkit-box-sizing:border-box;box-sizing:border-box}.qs-centered{position:fixed;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.qs-hidden{display:none}.qs-overlay{position:absolute;top:0;left:0;background:rgba(0,0,0,.75);color:#fff;width:100%;height:100%;padding:.5em;z-index:1;opacity:1;-webkit-transition:opacity .3s;transition:opacity .3s;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.qs-overlay.qs-hidden{opacity:0;z-index:-1}.qs-overlay .qs-overlay-year{background:rgba(0,0,0,0);border:none;border-bottom:1px solid #fff;border-radius:0;color:#fff;font-size:.875em;padding:.25em 0;width:80%;text-align:center;margin:0 auto;display:block}.qs-overlay .qs-overlay-year::-webkit-inner-spin-button{-webkit-appearance:none}.qs-overlay .qs-close{padding:.5em;cursor:pointer;position:absolute;top:0;right:0}.qs-overlay .qs-submit{border:1px solid #fff;border-radius:.263921875em;padding:.5em;margin:0 auto auto;cursor:pointer;background:hsla(0,0%,50.2%,.4)}.qs-overlay .qs-submit.qs-disabled{color:grey;border-color:grey;cursor:not-allowed}.qs-overlay .qs-overlay-month-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.qs-overlay .qs-overlay-month{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:calc(100% / 3);cursor:pointer;opacity:.5;-webkit-transition:opacity .15s;transition:opacity .15s}.qs-overlay .qs-overlay-month.active,.qs-overlay .qs-overlay-month:hover{opacity:1}.qs-controls{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:0;flex-shrink:0;background:#d3d3d3;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-controls.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-arrow{height:1.5625em;width:1.5625em;position:relative;cursor:pointer;border-radius:.263921875em;-webkit-transition:background .15s;transition:background .15s}.qs-arrow:hover{background:rgba(0,0,0,.1)}.qs-arrow:hover.qs-left:after{border-right-color:#000}.qs-arrow:hover.qs-right:after{border-left-color:#000}.qs-arrow:after{content:\\"\\";border:.390625em solid rgba(0,0,0,0);position:absolute;top:50%;-webkit-transition:border .2s;transition:border .2s}.qs-arrow.qs-left:after{border-right-color:grey;right:50%;-webkit-transform:translate(25%,-50%);-ms-transform:translate(25%,-50%);transform:translate(25%,-50%)}.qs-arrow.qs-right:after{border-left-color:grey;left:50%;-webkit-transform:translate(-25%,-50%);-ms-transform:translate(-25%,-50%);transform:translate(-25%,-50%)}.qs-month-year{font-weight:700;-webkit-transition:border .2s;transition:border .2s;border-bottom:1px solid rgba(0,0,0,0);cursor:pointer}.qs-month-year:hover{border-bottom:1px solid grey}.qs-month-year:active:focus,.qs-month-year:focus{outline:none}.qs-month{padding-right:.5ex}.qs-year{padding-left:.5ex}.qs-squares{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.3125em;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-squares.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-square{width:calc(100% / 7);height:1.5625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;cursor:pointer;-webkit-transition:background .1s;transition:background .1s;border-radius:.263921875em}.qs-square:not(.qs-empty):not(.qs-disabled):not(.qs-day):not(.qs-active):hover{background:orange}.qs-current{font-weight:700;text-decoration:underline}.qs-active,.qs-range-end,.qs-range-start{background:#add8e6}.qs-range-start:not(.qs-range-6){border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-middle{background:#d4ebf2}.qs-range-middle:not(.qs-range-0):not(.qs-range-6){border-radius:0}.qs-range-middle.qs-range-0{border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-end:not(.qs-range-0),.qs-range-middle.qs-range-6{border-top-left-radius:0;border-bottom-left-radius:0}.qs-disabled,.qs-outside-current-month{opacity:.2}.qs-disabled{cursor:not-allowed}.qs-day,.qs-empty{cursor:default}.qs-day{font-weight:700;color:grey}.qs-event{position:relative}.qs-event:after{content:\\"\\";position:absolute;width:.46875em;height:.46875em;border-radius:50%;background:#07f;bottom:0;right:0}\\n", "",{"version":3,"sources":["webpack://./node_modules/js-datepicker/dist/datepicker.min.css"],"names":[],"mappings":"AAAA,yBAAyB,cAAc,CAAC,sBAAsB,CAAC,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,2BAA2B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,eAAe,CAAC,eAAe,CAAC,0DAA0D,CAAC,kDAAkD,CAAC,2BAA2B,6BAA6B,CAAC,qBAAqB,CAAC,aAAa,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,sCAAsC,CAAC,kCAAkC,CAAC,8BAA8B,CAAC,WAAW,YAAY,CAAC,YAAY,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,0BAA0B,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,8BAA8B,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,2BAA2B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,sBAAsB,SAAS,CAAC,UAAU,CAAC,6BAA6B,wBAAwB,CAAC,WAAW,CAAC,4BAA4B,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC,aAAa,CAAC,aAAa,CAAC,wDAAwD,uBAAuB,CAAC,sBAAsB,YAAY,CAAC,cAAc,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,qBAAqB,CAAC,0BAA0B,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,8BAA8B,CAAC,mCAAmC,UAAU,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,wCAAwC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,8BAA8B,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,cAAc,CAAC,UAAU,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,yEAAyE,SAAS,CAAC,aAAa,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,mBAAmB,CAAC,aAAa,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,cAAc,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,wCAAwC,CAAC,qBAAqB,wBAAwB,CAAC,gBAAgB,CAAC,UAAU,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,cAAc,CAAC,0BAA0B,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,gBAAgB,yBAAyB,CAAC,8BAA8B,uBAAuB,CAAC,+BAA+B,sBAAsB,CAAC,gBAAgB,UAAU,CAAC,oCAAoC,CAAC,iBAAiB,CAAC,OAAO,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,wBAAwB,uBAAuB,CAAC,SAAS,CAAC,qCAAqC,CAAC,iCAAiC,CAAC,6BAA6B,CAAC,yBAAyB,sBAAsB,CAAC,QAAQ,CAAC,sCAAsC,CAAC,kCAAkC,CAAC,8BAA8B,CAAC,eAAe,eAAe,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,qCAAqC,CAAC,cAAc,CAAC,qBAAqB,4BAA4B,CAAC,iDAAiD,YAAY,CAAC,UAAU,kBAAkB,CAAC,SAAS,iBAAiB,CAAC,YAAY,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,eAAe,CAAC,sBAAsB,CAAC,cAAc,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,wCAAwC,CAAC,oBAAoB,wBAAwB,CAAC,gBAAgB,CAAC,WAAW,oBAAoB,CAAC,eAAe,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,cAAc,CAAC,iCAAiC,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,+EAA+E,iBAAiB,CAAC,YAAY,eAAe,CAAC,yBAAyB,CAAC,yCAAyC,kBAAkB,CAAC,iCAAiC,yBAAyB,CAAC,4BAA4B,CAAC,iBAAiB,kBAAkB,CAAC,mDAAmD,eAAe,CAAC,4BAA4B,yBAAyB,CAAC,4BAA4B,CAAC,2DAA2D,wBAAwB,CAAC,2BAA2B,CAAC,uCAAuC,UAAU,CAAC,aAAa,kBAAkB,CAAC,kBAAkB,cAAc,CAAC,QAAQ,eAAe,CAAC,UAAU,CAAC,UAAU,iBAAiB,CAAC,gBAAgB,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,eAAe,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO","sourcesContent":[".qs-datepicker-container{font-size:1rem;font-family:sans-serif;color:#000;position:absolute;width:15.625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:9001;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid grey;border-radius:.263921875em;overflow:hidden;background:#fff;-webkit-box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3);box-shadow:0 1.25em 1.25em -.9375em rgba(0,0,0,.3)}.qs-datepicker-container *{-webkit-box-sizing:border-box;box-sizing:border-box}.qs-centered{position:fixed;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.qs-hidden{display:none}.qs-overlay{position:absolute;top:0;left:0;background:rgba(0,0,0,.75);color:#fff;width:100%;height:100%;padding:.5em;z-index:1;opacity:1;-webkit-transition:opacity .3s;transition:opacity .3s;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.qs-overlay.qs-hidden{opacity:0;z-index:-1}.qs-overlay .qs-overlay-year{background:rgba(0,0,0,0);border:none;border-bottom:1px solid #fff;border-radius:0;color:#fff;font-size:.875em;padding:.25em 0;width:80%;text-align:center;margin:0 auto;display:block}.qs-overlay .qs-overlay-year::-webkit-inner-spin-button{-webkit-appearance:none}.qs-overlay .qs-close{padding:.5em;cursor:pointer;position:absolute;top:0;right:0}.qs-overlay .qs-submit{border:1px solid #fff;border-radius:.263921875em;padding:.5em;margin:0 auto auto;cursor:pointer;background:hsla(0,0%,50.2%,.4)}.qs-overlay .qs-submit.qs-disabled{color:grey;border-color:grey;cursor:not-allowed}.qs-overlay .qs-overlay-month-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.qs-overlay .qs-overlay-month{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:calc(100% / 3);cursor:pointer;opacity:.5;-webkit-transition:opacity .15s;transition:opacity .15s}.qs-overlay .qs-overlay-month.active,.qs-overlay .qs-overlay-month:hover{opacity:1}.qs-controls{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:0;flex-shrink:0;background:#d3d3d3;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-controls.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-arrow{height:1.5625em;width:1.5625em;position:relative;cursor:pointer;border-radius:.263921875em;-webkit-transition:background .15s;transition:background .15s}.qs-arrow:hover{background:rgba(0,0,0,.1)}.qs-arrow:hover.qs-left:after{border-right-color:#000}.qs-arrow:hover.qs-right:after{border-left-color:#000}.qs-arrow:after{content:\\"\\";border:.390625em solid rgba(0,0,0,0);position:absolute;top:50%;-webkit-transition:border .2s;transition:border .2s}.qs-arrow.qs-left:after{border-right-color:grey;right:50%;-webkit-transform:translate(25%,-50%);-ms-transform:translate(25%,-50%);transform:translate(25%,-50%)}.qs-arrow.qs-right:after{border-left-color:grey;left:50%;-webkit-transform:translate(-25%,-50%);-ms-transform:translate(-25%,-50%);transform:translate(-25%,-50%)}.qs-month-year{font-weight:700;-webkit-transition:border .2s;transition:border .2s;border-bottom:1px solid rgba(0,0,0,0);cursor:pointer}.qs-month-year:hover{border-bottom:1px solid grey}.qs-month-year:active:focus,.qs-month-year:focus{outline:none}.qs-month{padding-right:.5ex}.qs-year{padding-left:.5ex}.qs-squares{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.3125em;-webkit-filter:blur(0);filter:blur(0);-webkit-transition:-webkit-filter .3s;transition:-webkit-filter .3s;transition:filter .3s;transition:filter .3s,-webkit-filter .3s}.qs-squares.qs-blur{-webkit-filter:blur(5px);filter:blur(5px)}.qs-square{width:calc(100% / 7);height:1.5625em;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;cursor:pointer;-webkit-transition:background .1s;transition:background .1s;border-radius:.263921875em}.qs-square:not(.qs-empty):not(.qs-disabled):not(.qs-day):not(.qs-active):hover{background:orange}.qs-current{font-weight:700;text-decoration:underline}.qs-active,.qs-range-end,.qs-range-start{background:#add8e6}.qs-range-start:not(.qs-range-6){border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-middle{background:#d4ebf2}.qs-range-middle:not(.qs-range-0):not(.qs-range-6){border-radius:0}.qs-range-middle.qs-range-0{border-top-right-radius:0;border-bottom-right-radius:0}.qs-range-end:not(.qs-range-0),.qs-range-middle.qs-range-6{border-top-left-radius:0;border-bottom-left-radius:0}.qs-disabled,.qs-outside-current-month{opacity:.2}.qs-disabled{cursor:not-allowed}.qs-day,.qs-empty{cursor:default}.qs-day{font-weight:700;color:grey}.qs-event{position:relative}.qs-event:after{content:\\"\\";position:absolute;width:.46875em;height:.46875em;border-radius:50%;background:#07f;bottom:0;right:0}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///444\n')},424:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_js_datepicker_dist_datepicker_min_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(444);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(667);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _img_check_circle_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(685);\n/* harmony import */ var _img_x_circle_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(17);\n/* harmony import */ var _img_flag_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(845);\n// Imports\n\n\n\n\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_node_modules_js_datepicker_dist_datepicker_min_css__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3___default()(_img_check_circle_svg__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3___default()(_img_x_circle_svg__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3___default()(_img_flag_svg__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ":root {\\n    --topMargin: 40px;\\n    --taskColor: #F1FAEE;\\n    --contentWindowBackground: #A8DADC;\\n    --sideBarToggleColor: #457B9D;\\n    --sideBarColor: #1D3557;\\n    --taskFormButtonColor: #EFD5C3;\\n}\\n\\nbody {\\n    margin: 0;\\n    font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;\\n}\\n\\n@media screen and (min-width: 1300px) {\\n    #projectContainer {\\n        display: grid;\\n        grid-template-columns: [first] 20% [second] 80% [third];\\n        grid-template-rows: [first] 100px [second] 1fr [third];\\n        height: 100vh;\\n        width: 100vw;\\n    }\\n\\n    #topBar {\\n        grid-column: second / third;\\n        grid-row: first / second;\\n        background-color: var(--contentWindowBackground);\\n        min-height: 100px;\\n        display: grid;\\n        grid-template-columns: [first] 1fr [second] 1fr [third];\\n        grid-template-rows: [first] 1fr [second] 1fr [third];\\n    }\\n\\n    #expandMenu {\\n        display: none;\\n    }\\n\\n    #closeSideBarButton {\\n        display: none;\\n    }\\n\\n    #sideBar {\\n        grid-column: first / second;\\n        grid-row: first / third;\\n        background-color: var(--sideBarColor);\\n        display: flex;\\n        flex-direction: column;\\n    }\\n\\n    #sideBarContentContainer {\\n        display: flex;\\n        flex-direction: column;\\n        flex-grow: 2;\\n        justify-content: flex-start;\\n        margin: 0 auto;\\n        width: 90%;\\n        margin-top: var(--topMargin);\\n    }\\n\\n    #displaySection {\\n        grid-column: second / third;\\n        grid-row: second / third;\\n        min-height: 100%;\\n        background-color: var(--contentWindowBackground);\\n        display: flex;\\n        flex-direction: column;\\n        overflow: scroll;\\n    }\\n\\n    #userContentContainer {\\n        width: 70%;\\n    }\\n}\\n\\n@media screen and (max-width: 1299px) {\\n    #projectContainer {\\n        display: grid;\\n        grid-template-columns: 1fr;\\n        grid-template-rows: [first] 100px [second] 1fr [third];\\n        height: 100vh;\\n        width: 100vw;\\n    }\\n\\n    #expandMenu {\\n        grid-row: first / second;\\n        grid-column: first / second;\\n    }\\n    \\n    #topBar {\\n        grid-row: first / second;\\n        background-color: var(--contentWindowBackground);\\n        min-height: 10vh;\\n        display: grid;\\n        grid-template-columns: [first] 2fr [second] 1fr [third];\\n        grid-template-rows: [first] 1fr [second] 1fr [third];\\n    }\\n    \\n    #sideBar {\\n        \\n        height: 100%;\\n        width: 0px;\\n        position: fixed; \\n        z-index: 1; \\n        top: 0;\\n        left: 0;\\n        background-color: var(--sideBarColor);\\n    }\\n\\n    #sideBarContentContainer {\\n\\n        display: flex;\\n        flex-direction: column;\\n        flex-grow: 2;\\n        justify-content: flex-start;\\n        margin: 0 auto;\\n        width: 90%;\\n        margin-top: 5%;\\n    }\\n\\n        #displaySection {\\n        grid-row: second / third;\\n        min-height: 100%;\\n        background-color: var(--contentWindowBackground);\\n        display: flex;\\n        flex-direction: column;\\n        overflow: scroll;\\n    }\\n\\n        #userContentContainer {\\n        width: 70%;\\n    }\\n}\\n\\n@media screen and (max-width: 900px) {\\n    #userContentContainer {\\n        width: 90%;\\n    }\\n}\\n\\n@media screen and (max-width: 700px) {\\n    .task {\\n        display: grid;\\n        grid-template-columns: [first] 5% [second] 35% [third] 25% [fourth] 10% [fifth] 10% [sixth] 7.5% [seventh] 7.5% [eighth];\\n        justify-items: center;\\n        align-items: center;\\n        background-color: var(--taskColor);\\n        min-width: 0;\\n    }\\n\\n    .taskDescription {\\n        display: inline-block;\\n        overflow: hidden;\\n        white-space: nowrap;\\n        min-width: 0;\\n        max-width: 100%;\\n        text-overflow: ellipsis;\\n    }\\n\\n    .taskDueDate {\\n        grid-column: fourth / fifth;\\n    }\\n\\n    .taskFlagIcon {\\n        grid-column: fifth / sixth;\\n}\\n\\n    .editTaskIcon {\\n        grid-column: sixth / seventh;\\n    }\\n\\n    .deleteTaskIcon {\\n        grid-column: seventh / eighth;\\n    }\\n}\\n\\n@media screen and (min-width: 700px) {\\n    .task {\\n        display: grid;\\n        grid-template-columns: [first] 5% [second] 70% [third] 10% [fourth] 5% [fifth] 5% [sixth] 5% [seventh];\\n        justify-items: center;\\n        align-items: center;\\n        background-color: var(--taskColor);\\n    }\\n}\\n\\n#expandMenu {\\n    margin: 2% 0 0 2%;\\n}\\n\\n#expandMenu > div {\\n    width: 35px;\\n    height: 5px;\\n    background-color: black;\\n    margin: 6px 0;\\n}\\n\\n#listTitle {\\n    grid-row: second / third;\\n    grid-column: first / second;\\n    font-size: xx-large;\\n    font-weight: bold;\\n    margin: 10px;\\n}\\n\\n#topBarListCount {\\n    grid-area: second / second / third / third;\\n    font-weight: bold;\\n    justify-self: end;\\n    margin: 10px;\\n}\\n\\n#higherAddTask {\\n    grid-area: first / second / second / third;\\n    max-width: 30px;\\n    min-width: 20px;\\n    justify-self: end;\\n    max-height: 30px;\\n    min-height: 20px;\\n    margin: 10px;\\n}\\n\\n.sideBarOpen {\\n    display: flex;\\n    flex-direction: column;\\n    flex-grow: 2;\\n    justify-content: flex - start;\\n    margin: 0 auto;\\n    width: 90%;\\n    margin-top: 5%;\\n}\\n\\n.sideBarClosed {\\n    display: none;\\n}\\n\\n#closeMenu {\\n    display: flex;\\n    justify-content: flex-end;\\n}\\n\\n#closeSideBarButton {\\n    margin-right: 5%;\\n    margin-bottom: 5%;\\n    margin-top: 0%;\\n    filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(342deg) brightness(106%) contrast(101%);\\n    width: 10%;\\n}\\n\\n#sideBarContentContainer {\\n    overflow: hidden;\\n}\\n\\n#searchBarContainer {\\n    box-sizing: border-box;\\n    display: grid;\\n    grid-template-columns: 1fr 8fr 1fr;\\n    justify-items: center;\\n    align-items: center;\\n    min-width: 100px;\\n    min-height: 30px;\\n    width: 100%;\\n    border-radius: 10px;\\n    border: 1px solid rgb(92,95,93);\\n    overflow: hidden;\\n    background-color: var(--taskColor)\\n}\\n\\n#searchBarForm {\\n    width: 100%;\\n    color: var(--sideBarColor);\\n}\\n\\n#searchBar {\\n    width: 98%;\\n    padding: 0;\\n    margin: 0;\\n    border: 0;\\n    outline: none;\\n    background-color: var(--taskColor);\\n    color: var(--sideBarColor);\\n}\\n\\n#searchBar::placeholder {\\n    color: var(--sideBarColor);\\n}\\n\\n#clearIcon {\\n    visibility: hidden;\\n}\\n\\n#searchBarContainer:focus-within {\\n    box-shadow: 0 0 5px 1px cyan;\\n}\\n\\n\\n#sideBarToggles {\\n    margin-top: 15px;\\n    display: grid;\\n    gap: 10px;\\n    grid-template-columns: [first] 1fr [second] 1fr [third];\\n    grid-template-rows: [first] 1fr [second] 1fr [third];\\n    --subItemMargin: 10px;\\n}\\n\\n.sideBarToggle{\\n    /* border: 1px solid black; */\\n    background-color: var(--sideBarToggleColor);\\n    border-radius: 15px;\\n    display: grid;\\n    grid-template-rows: [first] 1fr [second] 1fr [third];\\n    grid-template-columns: [first] 25% [second] 1fr [third];\\n}\\n\\n.toggleIcon {\\n    grid-row: first / second;\\n    grid-column: first / second;\\n    margin: var(--subItemMargin);\\n    width: 25px;\\n}\\n\\n.toggleCount {\\n    grid-row: first / second;\\n    grid-column: second / third;\\n    justify-self: end;\\n    margin: var(--subItemMargin)\\n}\\n\\n.toggleTitle {\\n    grid-row: second / third;\\n    grid-column: first / third;\\n    margin: var(--subItemMargin);\\n    font-weight: bold;\\n    font-size: larger;\\n}\\n\\n.scheduledToggleActive {\\n    background-color: #F5A3CB;\\n}\\n\\n.flaggedToggleActive {\\n    background-color: #EFBC9B;\\n}\\n\\n.allToggleActive {\\n    background-color: #898DD1;\\n}\\n\\n.todayToggleActive {\\n    background-color: lightgreen;\\n}\\n\\n#todayToggle > .toggleTitle {\\n    color: rgb(86,207,48);\\n}\\n\\n#scheduledToggle > .toggleTitle {\\n    color: #E63946;\\n}\\n\\n#flaggedToggle > .toggleTitle {\\n    color: rgb(255,149,12);\\n}\\n\\n#allToggle > .toggleTitle {\\n    color: #53131E;\\n}\\n\\n.sideBarWhiteInfo {\\n    filter: invert(97%) sepia(38%) saturate(0%) hue-rotate(211deg) brightness(116%) contrast(100%);\\n}\\n\\n#listsContainer {\\n    margin: 20px 10px 10px 10px;\\n    color: var(--taskColor);\\n    overflow: scroll;\\n}\\n\\n.sideBarList {\\n    display: grid;\\n    width: 100%;\\n    grid-template-columns: [first] 15% [second] 50% [third] 10% [fourth] 12.5% [fifth] 12.5% [sixth];\\n    justify-content: center;\\n    margin: 10px 0px 10px 0px;\\n}\\n\\n.listPointer {\\n    grid-column: first / second;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    width: 30px;\\n    height: 20px;\\n    min-height: 20px;\\n    max-height: 20px;\\n    border-radius: 5px;\\n    background-color: white;\\n}\\n\\n.listName {\\n    grid-column: second / third;\\n    margin-left: 5px;\\n}\\n\\n.listCount {\\n    grid-column: third / fourth;\\n    justify-self: center;\\n}\\n\\n.editListIcon {\\n    grid-column: fourth / fifth;\\n}\\n\\n.deleteListIcon {\\n    grid-column: fifth / sixth;\\n}\\n\\n.listIcon {\\n    filter: invert(99%) sepia(1%) saturate(282%) hue-rotate(107deg) brightness(114%) contrast(100%);\\n    justify-self: center;\\n}\\n\\n#addListButton {\\n\\n    margin-top: auto;\\n    background-color: var(--taskColor);\\n    border-radius: 15px;\\n    color: var(--sideBarColor);\\n    border: none;\\n    padding: 5px;\\n    font-size: large;\\n    margin-bottom: 10px;\\n}\\n\\n#newListContainer {\\n    display: none;\\n    align-items: center;\\n    justify-content: flex-start;\\n    margin: 10px 0px 10px 0px;\\n}\\n\\n#newListForm {\\n    display: flex;\\n    flex-direction: column;\\n    margin-left: 10px;\\n}\\n\\n#newListTitleAndColor {\\n    display: grid;\\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n    max-height: 20px;\\n}\\n\\n#newListSubmitAndAbort {\\n    display: grid;\\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n}\\n\\n#newListTitleContainer {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    min-height: 1.5rem;\\n    width: 100%;\\n    border-radius: 10px;\\n    /* border: 1px solid black; */\\n    overflow: hidden;\\n    background-color: var(--taskColor);\\n    outline: none;\\n    margin: 0.3rem;\\n    max-height: 20px;\\n    background-color: var(--taskColor);\\n}\\n\\n#newListColor {\\n    grid-column: third / fourth;\\n    margin: 0.3rem;\\n    border: none;\\n    border-radius: 10px;\\n    background-color: var(--taskColor);\\n    color: none;\\n    overflow: visible;\\n    width: fit-content;\\n    height: 1.5rem;\\n    padding: 0.3rem;\\n}\\n\\n.colorPickerHolder {\\n    position: absolute;\\n    z-index: 10;\\n}\\n\\n#colorButtonHolder {\\n    display: flex;\\n    justify-content: center;\\n}\\n\\n#colorButtonHolder > button {\\n    width: 100%;\\n    border-radius: 10px;\\n    margin: 0.3rem;\\n}\\n\\n#newListAbort {\\n    grid-column: third / fourth;\\n    min-height: 1.5rem;\\n}\\n\\n#newListSubmit {\\n    min-height: 1.5rem;\\n}\\n\\n.inputListTitle {\\n    margin-left: 10px;\\n    padding: 0;\\n    border: 0;\\n    outline: none;\\n    background-color: var(--taskColor);\\n}\\n\\n#newListTitleContainer:focus-within {\\n    box-shadow: 0 0 5px 1px cyan;\\n}\\n\\n.listSubmitButton {\\n    background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");\\n    background-repeat: no-repeat;\\n    background-size: 20px;\\n    background-position: center;\\n}\\n\\n.listAbortButton {\\n    background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ");\\n    background-repeat: no-repeat;\\n    background-position: center;\\n    background-size: 20px;\\n}\\n\\n.listButton {\\n    width: 100%;\\n    margin: 0.3rem;\\n    padding: 10px;\\n    position: relative;\\n    border: 0;\\n    border-radius: 10px;\\n}\\n\\n/* LIST EDIT FORM */\\n#editListContainer {\\n    display: none;\\n    align-items: center;\\n    justify-content: flex-start;\\n    margin: 10px 0px 10px 0px;\\n}\\n\\n#editListForm {\\n    display: flex;\\n    flex-direction: column;\\n    margin-left: 10px;\\n}\\n\\n#editListTitleAndColor {\\n    display: grid;\\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n    max-height: 20px;\\n}\\n\\n#editListTitleContainer {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    min-height: 1.5rem;\\n    width: 100%;\\n    border-radius: 10px;\\n    overflow: hidden;\\n    background-color: var(--taskColor);\\n    outline: none;\\n    margin: 0.3rem;\\n    max-height: 20px;\\n    background-color: var(--taskColor);\\n}\\n\\n#editListTitleAndColor {\\n    display: grid;\\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n    max-height: 20px;\\n}\\n\\n#editListColor {\\n    grid-column: third / fourth;\\n    margin: 0.3rem;\\n    border: none;\\n    border-radius: 10px;\\n    background-color: var(--taskColor);\\n    color: none;\\n    overflow: visible;\\n    width: fit-content;\\n    height: 1.5rem;\\n    padding: 0.3rem;\\n}\\n\\n#editColorPickerHolder {\\n    position: absolute;\\n}\\n\\n#editListSubmitAndAbort {\\n    display: grid;\\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n}\\n\\n#editListAbort {\\n    grid-column: third / fourth;\\n    min-height: 1.5rem;\\n}\\n\\n#editListSubmit {\\n    min-height: 1.5rem;\\n}\\n\\n/* USER CONTENT CONTAINER */\\n\\n#userContentContainer {\\n    flex-grow: 2;\\n    margin: 0 auto;\\n    /* width: 70%; */\\n    margin-top: var(--topMargin);\\n}\\n\\n#userContentContainer > li, #userContentContainer > div {\\n    /* border: 1px solid grey; */\\n    border-radius: 15px;\\n    margin-bottom: 10px;\\n    background-color: var(--taskColor);\\n}\\n\\n/* .task {\\n    display: grid;\\n    grid-template-columns: [first] 5% [second] 70% [third] 10% [fourth] 5% [fifth] 5% [sixth] 5% [seventh];\\n    justify-items: center;\\n    align-items: center;\\n    background-color: var(--taskColor);\\n} */\\n\\n.checkbox {\\n    grid-column: first / second;\\n}\\n\\n.taskDescription {\\n    grid-column: second / third;\\n    justify-self: start;\\n    width: 100%;\\n}\\n\\n.taskDueDate {\\n    grid-column: third / fourth;\\n}\\n\\n.taskFlagIcon {\\n    grid-column: fourth / fifth;\\n}\\n\\n.flagNodeHolder {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    min-width: 5%;\\n}\\n\\n.editTaskIcon {\\n    grid-column: fifth / sixth;\\n}\\n\\n.deleteTaskIcon {\\n    grid-column: sixth / seventh;\\n}\\n\\n#lowerAddTask {\\n    width: 100%;\\n    display: none;\\n    align-items: center;\\n}\\n\\n.checkbox {\\n    margin-left: 15px;\\n    width: 25;\\n}\\n\\n.taskDescription {\\n    margin-left: 25px;\\n    margin-top: 10px;\\n    margin-bottom: 10px;\\n}\\n\\n.taskDueDate {\\n    margin-left: auto;\\n    margin-right: 5px;\\n}\\n\\n.editTaskIcon {\\n    margin-left: 15px;\\n}\\n\\n.deleteTaskIcon {\\n    margin-left: 10px;\\n    margin-right: 15px;\\n}\\n\\n.whiteColouringForDarkBackground {\\n    filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(35deg) brightness(107%) contrast(101%);\\n}\\n\\n.taskInputContainer {\\n    display: none;\\n    align-items: center;\\n    min-height: 30px;\\n}\\n\\n.taskInputContainer > .checkbox {\\n    align-self: flex-start;\\n    margin-top: 10px;\\n    background-color: var(--taskColor);\\n}\\n\\n.inputItemTitle {\\n    background-color: var(--taskColor);\\n}\\n\\n.taskInputContainer > div {\\n    margin-left: 25px;\\n    margin-top: 10px;\\n    margin-bottom: 10px;\\n    width: 90%;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.taskInputContainer > div > form > input {\\n    grid-row: first / second;\\n    grid-column: first / sixth;\\n    font-size: medium;\\n    padding: 0;\\n    margin: 0;\\n    margin-bottom: 5px;\\n    border: 0;\\n    outline: none;\\n}\\n\\n.taskInputContainer > div > form > div {\\n    display: flex;\\n    align-items: baseline;\\n}\\n\\n.taskInputContainer > div > form > div > button, .taskInputContainer > div > form > div > input {\\n    height: 25px;\\n    margin-right: 8px;\\n    border-radius: 4px;\\n    border: 0;\\n}\\n\\n.taskInputForm {\\n    border: none;\\n}\\n\\n.formInput:focus {\\n    outline: none;\\n}\\n\\n.formInput {\\n    background-color: var(--taskFormButtonColor);\\n}\\n\\n.dateCheckBox {\\n    position: relative;\\n    top: 6px;\\n}\\n\\n.date {\\n    width: 80px;\\n    text-align: center;\\n    height: 25px;\\n    padding: 0;\\n}\\n\\n.date::placeholder {\\n    color:black;\\n    text-align: center;\\n}\\n\\n.dateChosen {\\n    background-color: yellow;\\n}\\n\\n.flagButton {\\n    background: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\\n    background-repeat: no-repeat;\\n    background-position: center;\\n    background-color: var(--taskFormButtonColor);\\n    padding-left: 20px;\\n    padding-right: 20px;\\n    padding-top: 10px;\\n    padding-bottom: 10px;\\n    position: relative;\\n    bottom: 2px;\\n}\\n\\n.flagActive {\\n    background-color: orange;\\n}\\n\\n.submitButton {\\n    align-self: flex-end;\\n    margin: 0 auto;\\n    background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");\\n    background-repeat: no-repeat;\\n    background-size: 20px;\\n    background-position: center;\\n    padding: 10px;\\n    width: 50px;\\n    height: auto;\\n    position: relative;\\n    bottom: 2px;\\n}\\n\\n.abortButton {\\n    background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ");\\n    background-repeat: no-repeat;\\n    background-position: center;\\n    background-size: 20px;\\n    width: 50px;\\n    padding: 10px;\\n    height: auto;\\n    position: relative;\\n    bottom: 2px;\\n}", "",{"version":3,"sources":["webpack://./src/index.css"],"names":[],"mappings":"AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,kCAAkC;IAClC,6BAA6B;IAC7B,uBAAuB;IACvB,8BAA8B;AAClC;;AAEA;IACI,SAAS;IACT,wIAAwI;AAC5I;;AAEA;IACI;QACI,aAAa;QACb,uDAAuD;QACvD,sDAAsD;QACtD,aAAa;QACb,YAAY;IAChB;;IAEA;QACI,2BAA2B;QAC3B,wBAAwB;QACxB,gDAAgD;QAChD,iBAAiB;QACjB,aAAa;QACb,uDAAuD;QACvD,oDAAoD;IACxD;;IAEA;QACI,aAAa;IACjB;;IAEA;QACI,aAAa;IACjB;;IAEA;QACI,2BAA2B;QAC3B,uBAAuB;QACvB,qCAAqC;QACrC,aAAa;QACb,sBAAsB;IAC1B;;IAEA;QACI,aAAa;QACb,sBAAsB;QACtB,YAAY;QACZ,2BAA2B;QAC3B,cAAc;QACd,UAAU;QACV,4BAA4B;IAChC;;IAEA;QACI,2BAA2B;QAC3B,wBAAwB;QACxB,gBAAgB;QAChB,gDAAgD;QAChD,aAAa;QACb,sBAAsB;QACtB,gBAAgB;IACpB;;IAEA;QACI,UAAU;IACd;AACJ;;AAEA;IACI;QACI,aAAa;QACb,0BAA0B;QAC1B,sDAAsD;QACtD,aAAa;QACb,YAAY;IAChB;;IAEA;QACI,wBAAwB;QACxB,2BAA2B;IAC/B;;IAEA;QACI,wBAAwB;QACxB,gDAAgD;QAChD,gBAAgB;QAChB,aAAa;QACb,uDAAuD;QACvD,oDAAoD;IACxD;;IAEA;;QAEI,YAAY;QACZ,UAAU;QACV,eAAe;QACf,UAAU;QACV,MAAM;QACN,OAAO;QACP,qCAAqC;IACzC;;IAEA;;QAEI,aAAa;QACb,sBAAsB;QACtB,YAAY;QACZ,2BAA2B;QAC3B,cAAc;QACd,UAAU;QACV,cAAc;IAClB;;QAEI;QACA,wBAAwB;QACxB,gBAAgB;QAChB,gDAAgD;QAChD,aAAa;QACb,sBAAsB;QACtB,gBAAgB;IACpB;;QAEI;QACA,UAAU;IACd;AACJ;;AAEA;IACI;QACI,UAAU;IACd;AACJ;;AAEA;IACI;QACI,aAAa;QACb,wHAAwH;QACxH,qBAAqB;QACrB,mBAAmB;QACnB,kCAAkC;QAClC,YAAY;IAChB;;IAEA;QACI,qBAAqB;QACrB,gBAAgB;QAChB,mBAAmB;QACnB,YAAY;QACZ,eAAe;QACf,uBAAuB;IAC3B;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,0BAA0B;AAClC;;IAEI;QACI,4BAA4B;IAChC;;IAEA;QACI,6BAA6B;IACjC;AACJ;;AAEA;IACI;QACI,aAAa;QACb,sGAAsG;QACtG,qBAAqB;QACrB,mBAAmB;QACnB,kCAAkC;IACtC;AACJ;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,mBAAmB;IACnB,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,0CAA0C;IAC1C,iBAAiB;IACjB,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,0CAA0C;IAC1C,eAAe;IACf,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,6BAA6B;IAC7B,cAAc;IACd,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,cAAc;IACd,8FAA8F;IAC9F,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,kCAAkC;IAClC,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,gBAAgB;IAChB,WAAW;IACX,mBAAmB;IACnB,+BAA+B;IAC/B,gBAAgB;IAChB;AACJ;;AAEA;IACI,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,UAAU;IACV,UAAU;IACV,SAAS;IACT,SAAS;IACT,aAAa;IACb,kCAAkC;IAClC,0BAA0B;AAC9B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;AAChC;;;AAGA;IACI,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,uDAAuD;IACvD,oDAAoD;IACpD,qBAAqB;AACzB;;AAEA;IACI,6BAA6B;IAC7B,2CAA2C;IAC3C,mBAAmB;IACnB,aAAa;IACb,oDAAoD;IACpD,uDAAuD;AAC3D;;AAEA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,4BAA4B;IAC5B,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,iBAAiB;IACjB;AACJ;;AAEA;IACI,wBAAwB;IACxB,0BAA0B;IAC1B,4BAA4B;IAC5B,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,8FAA8F;AAClG;;AAEA;IACI,2BAA2B;IAC3B,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,WAAW;IACX,gGAAgG;IAChG,uBAAuB;IACvB,yBAAyB;AAC7B;;AAEA;IACI,2BAA2B;IAC3B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,gBAAgB;IAChB,kBAAkB;IAClB,uBAAuB;AAC3B;;AAEA;IACI,2BAA2B;IAC3B,gBAAgB;AACpB;;AAEA;IACI,2BAA2B;IAC3B,oBAAoB;AACxB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,+FAA+F;IAC/F,oBAAoB;AACxB;;AAEA;;IAEI,gBAAgB;IAChB,kCAAkC;IAClC,mBAAmB;IACnB,0BAA0B;IAC1B,YAAY;IACZ,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,6BAA6B;IAC7B,gBAAgB;IAChB,kCAAkC;IAClC,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,kCAAkC;AACtC;;AAEA;IACI,2BAA2B;IAC3B,cAAc;IACd,YAAY;IACZ,mBAAmB;IACnB,kCAAkC;IAClC,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,2BAA2B;IAC3B,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,UAAU;IACV,SAAS;IACT,aAAa;IACb,kCAAkC;AACtC;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,yDAA+C;IAC/C,4BAA4B;IAC5B,qBAAqB;IACrB,2BAA2B;AAC/B;;AAEA;IACI,yDAA2C;IAC3C,4BAA4B;IAC5B,2BAA2B;IAC3B,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;AACvB;;AAEA,mBAAmB;AACnB;IACI,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,gBAAgB;IAChB,kCAAkC;IAClC,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,2BAA2B;IAC3B,cAAc;IACd,YAAY;IACZ,mBAAmB;IACnB,kCAAkC;IAClC,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,oEAAoE;IACpE,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,2BAA2B;IAC3B,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA,2BAA2B;;AAE3B;IACI,YAAY;IACZ,cAAc;IACd,gBAAgB;IAChB,4BAA4B;AAChC;;AAEA;IACI,4BAA4B;IAC5B,mBAAmB;IACnB,mBAAmB;IACnB,kCAAkC;AACtC;;AAEA;;;;;;GAMG;;AAEH;IACI,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;IAC3B,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,+FAA+F;AACnG;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,sBAAsB;IACtB,gBAAgB;IAChB,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,UAAU;IACV,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;IACxB,0BAA0B;IAC1B,iBAAiB;IACjB,UAAU;IACV,SAAS;IACT,kBAAkB;IAClB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,kBAAkB;IAClB,QAAQ;AACZ;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,mDAAiC;IACjC,4BAA4B;IAC5B,2BAA2B;IAC3B,4CAA4C;IAC5C,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,oBAAoB;IACpB,cAAc;IACd,yDAA+C;IAC/C,4BAA4B;IAC5B,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,yDAA2C;IAC3C,4BAA4B;IAC5B,2BAA2B;IAC3B,qBAAqB;IACrB,WAAW;IACX,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,WAAW;AACf","sourcesContent":["@import \'~js-datepicker/dist/datepicker.min.css\';\\n\\n:root {\\n    --topMargin: 40px;\\n    --taskColor: #F1FAEE;\\n    --contentWindowBackground: #A8DADC;\\n    --sideBarToggleColor: #457B9D;\\n    --sideBarColor: #1D3557;\\n    --taskFormButtonColor: #EFD5C3;\\n}\\n\\nbody {\\n    margin: 0;\\n    font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;\\n}\\n\\n@media screen and (min-width: 1300px) {\\n    #projectContainer {\\n        display: grid;\\n        grid-template-columns: [first] 20% [second] 80% [third];\\n        grid-template-rows: [first] 100px [second] 1fr [third];\\n        height: 100vh;\\n        width: 100vw;\\n    }\\n\\n    #topBar {\\n        grid-column: second / third;\\n        grid-row: first / second;\\n        background-color: var(--contentWindowBackground);\\n        min-height: 100px;\\n        display: grid;\\n        grid-template-columns: [first] 1fr [second] 1fr [third];\\n        grid-template-rows: [first] 1fr [second] 1fr [third];\\n    }\\n\\n    #expandMenu {\\n        display: none;\\n    }\\n\\n    #closeSideBarButton {\\n        display: none;\\n    }\\n\\n    #sideBar {\\n        grid-column: first / second;\\n        grid-row: first / third;\\n        background-color: var(--sideBarColor);\\n        display: flex;\\n        flex-direction: column;\\n    }\\n\\n    #sideBarContentContainer {\\n        display: flex;\\n        flex-direction: column;\\n        flex-grow: 2;\\n        justify-content: flex-start;\\n        margin: 0 auto;\\n        width: 90%;\\n        margin-top: var(--topMargin);\\n    }\\n\\n    #displaySection {\\n        grid-column: second / third;\\n        grid-row: second / third;\\n        min-height: 100%;\\n        background-color: var(--contentWindowBackground);\\n        display: flex;\\n        flex-direction: column;\\n        overflow: scroll;\\n    }\\n\\n    #userContentContainer {\\n        width: 70%;\\n    }\\n}\\n\\n@media screen and (max-width: 1299px) {\\n    #projectContainer {\\n        display: grid;\\n        grid-template-columns: 1fr;\\n        grid-template-rows: [first] 100px [second] 1fr [third];\\n        height: 100vh;\\n        width: 100vw;\\n    }\\n\\n    #expandMenu {\\n        grid-row: first / second;\\n        grid-column: first / second;\\n    }\\n    \\n    #topBar {\\n        grid-row: first / second;\\n        background-color: var(--contentWindowBackground);\\n        min-height: 10vh;\\n        display: grid;\\n        grid-template-columns: [first] 2fr [second] 1fr [third];\\n        grid-template-rows: [first] 1fr [second] 1fr [third];\\n    }\\n    \\n    #sideBar {\\n        \\n        height: 100%;\\n        width: 0px;\\n        position: fixed; \\n        z-index: 1; \\n        top: 0;\\n        left: 0;\\n        background-color: var(--sideBarColor);\\n    }\\n\\n    #sideBarContentContainer {\\n\\n        display: flex;\\n        flex-direction: column;\\n        flex-grow: 2;\\n        justify-content: flex-start;\\n        margin: 0 auto;\\n        width: 90%;\\n        margin-top: 5%;\\n    }\\n\\n        #displaySection {\\n        grid-row: second / third;\\n        min-height: 100%;\\n        background-color: var(--contentWindowBackground);\\n        display: flex;\\n        flex-direction: column;\\n        overflow: scroll;\\n    }\\n\\n        #userContentContainer {\\n        width: 70%;\\n    }\\n}\\n\\n@media screen and (max-width: 900px) {\\n    #userContentContainer {\\n        width: 90%;\\n    }\\n}\\n\\n@media screen and (max-width: 700px) {\\n    .task {\\n        display: grid;\\n        grid-template-columns: [first] 5% [second] 35% [third] 25% [fourth] 10% [fifth] 10% [sixth] 7.5% [seventh] 7.5% [eighth];\\n        justify-items: center;\\n        align-items: center;\\n        background-color: var(--taskColor);\\n        min-width: 0;\\n    }\\n\\n    .taskDescription {\\n        display: inline-block;\\n        overflow: hidden;\\n        white-space: nowrap;\\n        min-width: 0;\\n        max-width: 100%;\\n        text-overflow: ellipsis;\\n    }\\n\\n    .taskDueDate {\\n        grid-column: fourth / fifth;\\n    }\\n\\n    .taskFlagIcon {\\n        grid-column: fifth / sixth;\\n}\\n\\n    .editTaskIcon {\\n        grid-column: sixth / seventh;\\n    }\\n\\n    .deleteTaskIcon {\\n        grid-column: seventh / eighth;\\n    }\\n}\\n\\n@media screen and (min-width: 700px) {\\n    .task {\\n        display: grid;\\n        grid-template-columns: [first] 5% [second] 70% [third] 10% [fourth] 5% [fifth] 5% [sixth] 5% [seventh];\\n        justify-items: center;\\n        align-items: center;\\n        background-color: var(--taskColor);\\n    }\\n}\\n\\n#expandMenu {\\n    margin: 2% 0 0 2%;\\n}\\n\\n#expandMenu > div {\\n    width: 35px;\\n    height: 5px;\\n    background-color: black;\\n    margin: 6px 0;\\n}\\n\\n#listTitle {\\n    grid-row: second / third;\\n    grid-column: first / second;\\n    font-size: xx-large;\\n    font-weight: bold;\\n    margin: 10px;\\n}\\n\\n#topBarListCount {\\n    grid-area: second / second / third / third;\\n    font-weight: bold;\\n    justify-self: end;\\n    margin: 10px;\\n}\\n\\n#higherAddTask {\\n    grid-area: first / second / second / third;\\n    max-width: 30px;\\n    min-width: 20px;\\n    justify-self: end;\\n    max-height: 30px;\\n    min-height: 20px;\\n    margin: 10px;\\n}\\n\\n.sideBarOpen {\\n    display: flex;\\n    flex-direction: column;\\n    flex-grow: 2;\\n    justify-content: flex - start;\\n    margin: 0 auto;\\n    width: 90%;\\n    margin-top: 5%;\\n}\\n\\n.sideBarClosed {\\n    display: none;\\n}\\n\\n#closeMenu {\\n    display: flex;\\n    justify-content: flex-end;\\n}\\n\\n#closeSideBarButton {\\n    margin-right: 5%;\\n    margin-bottom: 5%;\\n    margin-top: 0%;\\n    filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(342deg) brightness(106%) contrast(101%);\\n    width: 10%;\\n}\\n\\n#sideBarContentContainer {\\n    overflow: hidden;\\n}\\n\\n#searchBarContainer {\\n    box-sizing: border-box;\\n    display: grid;\\n    grid-template-columns: 1fr 8fr 1fr;\\n    justify-items: center;\\n    align-items: center;\\n    min-width: 100px;\\n    min-height: 30px;\\n    width: 100%;\\n    border-radius: 10px;\\n    border: 1px solid rgb(92,95,93);\\n    overflow: hidden;\\n    background-color: var(--taskColor)\\n}\\n\\n#searchBarForm {\\n    width: 100%;\\n    color: var(--sideBarColor);\\n}\\n\\n#searchBar {\\n    width: 98%;\\n    padding: 0;\\n    margin: 0;\\n    border: 0;\\n    outline: none;\\n    background-color: var(--taskColor);\\n    color: var(--sideBarColor);\\n}\\n\\n#searchBar::placeholder {\\n    color: var(--sideBarColor);\\n}\\n\\n#clearIcon {\\n    visibility: hidden;\\n}\\n\\n#searchBarContainer:focus-within {\\n    box-shadow: 0 0 5px 1px cyan;\\n}\\n\\n\\n#sideBarToggles {\\n    margin-top: 15px;\\n    display: grid;\\n    gap: 10px;\\n    grid-template-columns: [first] 1fr [second] 1fr [third];\\n    grid-template-rows: [first] 1fr [second] 1fr [third];\\n    --subItemMargin: 10px;\\n}\\n\\n.sideBarToggle{\\n    /* border: 1px solid black; */\\n    background-color: var(--sideBarToggleColor);\\n    border-radius: 15px;\\n    display: grid;\\n    grid-template-rows: [first] 1fr [second] 1fr [third];\\n    grid-template-columns: [first] 25% [second] 1fr [third];\\n}\\n\\n.toggleIcon {\\n    grid-row: first / second;\\n    grid-column: first / second;\\n    margin: var(--subItemMargin);\\n    width: 25px;\\n}\\n\\n.toggleCount {\\n    grid-row: first / second;\\n    grid-column: second / third;\\n    justify-self: end;\\n    margin: var(--subItemMargin)\\n}\\n\\n.toggleTitle {\\n    grid-row: second / third;\\n    grid-column: first / third;\\n    margin: var(--subItemMargin);\\n    font-weight: bold;\\n    font-size: larger;\\n}\\n\\n.scheduledToggleActive {\\n    background-color: #F5A3CB;\\n}\\n\\n.flaggedToggleActive {\\n    background-color: #EFBC9B;\\n}\\n\\n.allToggleActive {\\n    background-color: #898DD1;\\n}\\n\\n.todayToggleActive {\\n    background-color: lightgreen;\\n}\\n\\n#todayToggle > .toggleTitle {\\n    color: rgb(86,207,48);\\n}\\n\\n#scheduledToggle > .toggleTitle {\\n    color: #E63946;\\n}\\n\\n#flaggedToggle > .toggleTitle {\\n    color: rgb(255,149,12);\\n}\\n\\n#allToggle > .toggleTitle {\\n    color: #53131E;\\n}\\n\\n.sideBarWhiteInfo {\\n    filter: invert(97%) sepia(38%) saturate(0%) hue-rotate(211deg) brightness(116%) contrast(100%);\\n}\\n\\n#listsContainer {\\n    margin: 20px 10px 10px 10px;\\n    color: var(--taskColor);\\n    overflow: scroll;\\n}\\n\\n.sideBarList {\\n    display: grid;\\n    width: 100%;\\n    grid-template-columns: [first] 15% [second] 50% [third] 10% [fourth] 12.5% [fifth] 12.5% [sixth];\\n    justify-content: center;\\n    margin: 10px 0px 10px 0px;\\n}\\n\\n.listPointer {\\n    grid-column: first / second;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    width: 30px;\\n    height: 20px;\\n    min-height: 20px;\\n    max-height: 20px;\\n    border-radius: 5px;\\n    background-color: white;\\n}\\n\\n.listName {\\n    grid-column: second / third;\\n    margin-left: 5px;\\n}\\n\\n.listCount {\\n    grid-column: third / fourth;\\n    justify-self: center;\\n}\\n\\n.editListIcon {\\n    grid-column: fourth / fifth;\\n}\\n\\n.deleteListIcon {\\n    grid-column: fifth / sixth;\\n}\\n\\n.listIcon {\\n    filter: invert(99%) sepia(1%) saturate(282%) hue-rotate(107deg) brightness(114%) contrast(100%);\\n    justify-self: center;\\n}\\n\\n#addListButton {\\n\\n    margin-top: auto;\\n    background-color: var(--taskColor);\\n    border-radius: 15px;\\n    color: var(--sideBarColor);\\n    border: none;\\n    padding: 5px;\\n    font-size: large;\\n    margin-bottom: 10px;\\n}\\n\\n#newListContainer {\\n    display: none;\\n    align-items: center;\\n    justify-content: flex-start;\\n    margin: 10px 0px 10px 0px;\\n}\\n\\n#newListForm {\\n    display: flex;\\n    flex-direction: column;\\n    margin-left: 10px;\\n}\\n\\n#newListTitleAndColor {\\n    display: grid;\\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n    max-height: 20px;\\n}\\n\\n#newListSubmitAndAbort {\\n    display: grid;\\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n}\\n\\n#newListTitleContainer {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    min-height: 1.5rem;\\n    width: 100%;\\n    border-radius: 10px;\\n    /* border: 1px solid black; */\\n    overflow: hidden;\\n    background-color: var(--taskColor);\\n    outline: none;\\n    margin: 0.3rem;\\n    max-height: 20px;\\n    background-color: var(--taskColor);\\n}\\n\\n#newListColor {\\n    grid-column: third / fourth;\\n    margin: 0.3rem;\\n    border: none;\\n    border-radius: 10px;\\n    background-color: var(--taskColor);\\n    color: none;\\n    overflow: visible;\\n    width: fit-content;\\n    height: 1.5rem;\\n    padding: 0.3rem;\\n}\\n\\n.colorPickerHolder {\\n    position: absolute;\\n    z-index: 10;\\n}\\n\\n#colorButtonHolder {\\n    display: flex;\\n    justify-content: center;\\n}\\n\\n#colorButtonHolder > button {\\n    width: 100%;\\n    border-radius: 10px;\\n    margin: 0.3rem;\\n}\\n\\n#newListAbort {\\n    grid-column: third / fourth;\\n    min-height: 1.5rem;\\n}\\n\\n#newListSubmit {\\n    min-height: 1.5rem;\\n}\\n\\n.inputListTitle {\\n    margin-left: 10px;\\n    padding: 0;\\n    border: 0;\\n    outline: none;\\n    background-color: var(--taskColor);\\n}\\n\\n#newListTitleContainer:focus-within {\\n    box-shadow: 0 0 5px 1px cyan;\\n}\\n\\n.listSubmitButton {\\n    background-image: url(\\"./img/check-circle.svg\\");\\n    background-repeat: no-repeat;\\n    background-size: 20px;\\n    background-position: center;\\n}\\n\\n.listAbortButton {\\n    background-image: url(\\"./img/x-circle.svg\\");\\n    background-repeat: no-repeat;\\n    background-position: center;\\n    background-size: 20px;\\n}\\n\\n.listButton {\\n    width: 100%;\\n    margin: 0.3rem;\\n    padding: 10px;\\n    position: relative;\\n    border: 0;\\n    border-radius: 10px;\\n}\\n\\n/* LIST EDIT FORM */\\n#editListContainer {\\n    display: none;\\n    align-items: center;\\n    justify-content: flex-start;\\n    margin: 10px 0px 10px 0px;\\n}\\n\\n#editListForm {\\n    display: flex;\\n    flex-direction: column;\\n    margin-left: 10px;\\n}\\n\\n#editListTitleAndColor {\\n    display: grid;\\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n    max-height: 20px;\\n}\\n\\n#editListTitleContainer {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    min-height: 1.5rem;\\n    width: 100%;\\n    border-radius: 10px;\\n    overflow: hidden;\\n    background-color: var(--taskColor);\\n    outline: none;\\n    margin: 0.3rem;\\n    max-height: 20px;\\n    background-color: var(--taskColor);\\n}\\n\\n#editListTitleAndColor {\\n    display: grid;\\n    grid-template-columns: [first] 70% [second] 10% [third] 20% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n    max-height: 20px;\\n}\\n\\n#editListColor {\\n    grid-column: third / fourth;\\n    margin: 0.3rem;\\n    border: none;\\n    border-radius: 10px;\\n    background-color: var(--taskColor);\\n    color: none;\\n    overflow: visible;\\n    width: fit-content;\\n    height: 1.5rem;\\n    padding: 0.3rem;\\n}\\n\\n#editColorPickerHolder {\\n    position: absolute;\\n}\\n\\n#editListSubmitAndAbort {\\n    display: grid;\\n    grid-template-columns: [first] 45% [second] 10% [third] 45% [fourth];\\n    justify-items: center;\\n    margin: 0.5rem;\\n}\\n\\n#editListAbort {\\n    grid-column: third / fourth;\\n    min-height: 1.5rem;\\n}\\n\\n#editListSubmit {\\n    min-height: 1.5rem;\\n}\\n\\n/* USER CONTENT CONTAINER */\\n\\n#userContentContainer {\\n    flex-grow: 2;\\n    margin: 0 auto;\\n    /* width: 70%; */\\n    margin-top: var(--topMargin);\\n}\\n\\n#userContentContainer > li, #userContentContainer > div {\\n    /* border: 1px solid grey; */\\n    border-radius: 15px;\\n    margin-bottom: 10px;\\n    background-color: var(--taskColor);\\n}\\n\\n/* .task {\\n    display: grid;\\n    grid-template-columns: [first] 5% [second] 70% [third] 10% [fourth] 5% [fifth] 5% [sixth] 5% [seventh];\\n    justify-items: center;\\n    align-items: center;\\n    background-color: var(--taskColor);\\n} */\\n\\n.checkbox {\\n    grid-column: first / second;\\n}\\n\\n.taskDescription {\\n    grid-column: second / third;\\n    justify-self: start;\\n    width: 100%;\\n}\\n\\n.taskDueDate {\\n    grid-column: third / fourth;\\n}\\n\\n.taskFlagIcon {\\n    grid-column: fourth / fifth;\\n}\\n\\n.flagNodeHolder {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    min-width: 5%;\\n}\\n\\n.editTaskIcon {\\n    grid-column: fifth / sixth;\\n}\\n\\n.deleteTaskIcon {\\n    grid-column: sixth / seventh;\\n}\\n\\n#lowerAddTask {\\n    width: 100%;\\n    display: none;\\n    align-items: center;\\n}\\n\\n.checkbox {\\n    margin-left: 15px;\\n    width: 25;\\n}\\n\\n.taskDescription {\\n    margin-left: 25px;\\n    margin-top: 10px;\\n    margin-bottom: 10px;\\n}\\n\\n.taskDueDate {\\n    margin-left: auto;\\n    margin-right: 5px;\\n}\\n\\n.editTaskIcon {\\n    margin-left: 15px;\\n}\\n\\n.deleteTaskIcon {\\n    margin-left: 10px;\\n    margin-right: 15px;\\n}\\n\\n.whiteColouringForDarkBackground {\\n    filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(35deg) brightness(107%) contrast(101%);\\n}\\n\\n.taskInputContainer {\\n    display: none;\\n    align-items: center;\\n    min-height: 30px;\\n}\\n\\n.taskInputContainer > .checkbox {\\n    align-self: flex-start;\\n    margin-top: 10px;\\n    background-color: var(--taskColor);\\n}\\n\\n.inputItemTitle {\\n    background-color: var(--taskColor);\\n}\\n\\n.taskInputContainer > div {\\n    margin-left: 25px;\\n    margin-top: 10px;\\n    margin-bottom: 10px;\\n    width: 90%;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.taskInputContainer > div > form > input {\\n    grid-row: first / second;\\n    grid-column: first / sixth;\\n    font-size: medium;\\n    padding: 0;\\n    margin: 0;\\n    margin-bottom: 5px;\\n    border: 0;\\n    outline: none;\\n}\\n\\n.taskInputContainer > div > form > div {\\n    display: flex;\\n    align-items: baseline;\\n}\\n\\n.taskInputContainer > div > form > div > button, .taskInputContainer > div > form > div > input {\\n    height: 25px;\\n    margin-right: 8px;\\n    border-radius: 4px;\\n    border: 0;\\n}\\n\\n.taskInputForm {\\n    border: none;\\n}\\n\\n.formInput:focus {\\n    outline: none;\\n}\\n\\n.formInput {\\n    background-color: var(--taskFormButtonColor);\\n}\\n\\n.dateCheckBox {\\n    position: relative;\\n    top: 6px;\\n}\\n\\n.date {\\n    width: 80px;\\n    text-align: center;\\n    height: 25px;\\n    padding: 0;\\n}\\n\\n.date::placeholder {\\n    color:black;\\n    text-align: center;\\n}\\n\\n.dateChosen {\\n    background-color: yellow;\\n}\\n\\n.flagButton {\\n    background: url(\\"./img/flag.svg\\");\\n    background-repeat: no-repeat;\\n    background-position: center;\\n    background-color: var(--taskFormButtonColor);\\n    padding-left: 20px;\\n    padding-right: 20px;\\n    padding-top: 10px;\\n    padding-bottom: 10px;\\n    position: relative;\\n    bottom: 2px;\\n}\\n\\n.flagActive {\\n    background-color: orange;\\n}\\n\\n.submitButton {\\n    align-self: flex-end;\\n    margin: 0 auto;\\n    background-image: url(\\"./img/check-circle.svg\\");\\n    background-repeat: no-repeat;\\n    background-size: 20px;\\n    background-position: center;\\n    padding: 10px;\\n    width: 50px;\\n    height: auto;\\n    position: relative;\\n    bottom: 2px;\\n}\\n\\n.abortButton {\\n    background-image: url(\\"./img/x-circle.svg\\");\\n    background-repeat: no-repeat;\\n    background-position: center;\\n    background-size: 20px;\\n    width: 50px;\\n    padding: 10px;\\n    height: auto;\\n    position: relative;\\n    bottom: 2px;\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///424\n')},645:module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QyxxQkFBcUI7QUFDakU7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLHFCQUFxQjtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjY0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///645\n')},15:module=>{"use strict";eval('\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = function cssWithMappingToString(item) {\n  var _item = _slicedToArray(item, 4),\n      content = _item[1],\n      cssMapping = _item[3];\n\n  if (typeof btoa === \'function\') {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || \'\').concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcz83NWU5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlDQUFpQywySEFBMkg7O0FBRTVKLDZCQUE2QixrS0FBa0s7O0FBRS9MLGlEQUFpRCxnQkFBZ0IsZ0VBQWdFLHdEQUF3RCw2REFBNkQsc0RBQXNELGtIQUFrSDs7QUFFOVosc0NBQXNDLHVEQUF1RCx1Q0FBdUMsU0FBUyxPQUFPLGtCQUFrQixFQUFFLGFBQWE7O0FBRXJMLHdDQUF3QyxnRkFBZ0YsZUFBZSxlQUFlLGdCQUFnQixvQkFBb0IsTUFBTSwwQ0FBMEMsK0JBQStCLGFBQWEscUJBQXFCLG1DQUFtQyxFQUFFLEVBQUUsY0FBYyxXQUFXLFVBQVUsRUFBRSxVQUFVLE1BQU0saURBQWlELEVBQUUsVUFBVSxrQkFBa0IsRUFBRSxFQUFFLGFBQWE7O0FBRXZlLCtCQUErQixvQ0FBb0M7O0FBRW5FO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n')},667:module=>{"use strict";eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = url && url.__esModule ? url.default : url;\n\n  if (typeof url !== \'string\') {\n    return url;\n  } // If url is already wrapped in quotes, remove them\n\n\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    // eslint-disable-next-line no-param-reassign\n    url = url.slice(1, -1);\n  }\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  } // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n\n\n  if (/["\'() \\t\\n]/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, \'\\\\n\'), "\\"");\n  }\n\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzPzFkZTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiI2NjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICB1cmwgPSB1cmwgJiYgdXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybDtcblxuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///667\n')},685:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "imgs/check-circle.6294639ee94bec2d5ce0d30f38cbe8fa.svg");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLXByb2plY3QvLi9zcmMvaW1nL2NoZWNrLWNpcmNsZS5zdmc/NmM4MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpRUFBZSxxQkFBdUIsMkRBQTJEIiwiZmlsZSI6IjY4NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWdzL2NoZWNrLWNpcmNsZS42Mjk0NjM5ZWU5NGJlYzJkNWNlMGQzMGYzOGNiZThmYS5zdmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///685\n')},845:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "imgs/flag.6452829eb937a87db1de4aaf16fc3072.svg");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLXByb2plY3QvLi9zcmMvaW1nL2ZsYWcuc3ZnP2UwMTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUVBQWUscUJBQXVCLG1EQUFtRCIsImZpbGUiOiI4NDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1ncy9mbGFnLjY0NTI4MjllYjkzN2E4N2RiMWRlNGFhZjE2ZmMzMDcyLnN2Z1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///845\n')},17:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "imgs/x-circle.bd4906d4f5c28e4d73214d1258d63a2e.svg");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLXByb2plY3QvLi9zcmMvaW1nL3gtY2lyY2xlLnN2Zz83MmI4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlFQUFlLHFCQUF1Qix1REFBdUQiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1ncy94LWNpcmNsZS5iZDQ5MDZkNGY1YzI4ZTRkNzMyMTRkMTI1OGQ2M2EyZS5zdmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n')},448:module=>{eval('!function(e,t){ true?module.exports=t():0}(window,(function(){return function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var a=[],r=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],i=["January","February","March","April","May","June","July","August","September","October","November","December"],o={t:"top",r:"right",b:"bottom",l:"left",c:"centered"};function s(){}var l=["click","focusin","keydown","input"];function d(e){l.forEach((function(t){e.addEventListener(t,e===document?L:Y)}))}function c(e){return Array.isArray(e)?e.map(c):"[object Object]"===x(e)?Object.keys(e).reduce((function(t,n){return t[n]=c(e[n]),t}),{}):e}function u(e,t){var n=e.calendar.querySelector(".qs-overlay"),a=n&&!n.classList.contains("qs-hidden");t=t||new Date(e.currentYear,e.currentMonth),e.calendar.innerHTML=[h(t,e,a),f(t,e,a),v(e,a)].join(""),a&&window.requestAnimationFrame((function(){M(!0,e)}))}function h(e,t,n){return[\'<div class="qs-controls\'+(n?" qs-blur":"")+\'">\',\'<div class="qs-arrow qs-left"></div>\',\'<div class="qs-month-year">\',\'<span class="qs-month">\'+t.months[e.getMonth()]+"</span>",\'<span class="qs-year">\'+e.getFullYear()+"</span>","</div>",\'<div class="qs-arrow qs-right"></div>\',"</div>"].join("")}function f(e,t,n){var a=t.currentMonth,r=t.currentYear,i=t.dateSelected,o=t.maxDate,s=t.minDate,l=t.showAllDates,d=t.days,c=t.disabledDates,u=t.startDay,h=t.weekendIndices,f=t.events,v=t.getRange?t.getRange():{},m=+v.start,y=+v.end,p=g(new Date(e).setDate(1)),w=p.getDay()-u,D=w<0?7:0;p.setMonth(p.getMonth()+1),p.setDate(0);var b=p.getDate(),q=[],S=D+7*((w+b)/7|0);S+=(w+b)%7?7:0;for(var M=1;M<=S;M++){var E=(M-1)%7,x=d[E],C=M-(w>=0?w:7+w),L=new Date(r,a,C),Y=f[+L],j=C<1||C>b,P=j?C<1?-1:1:0,k=j&&!l,O=k?"":L.getDate(),N=+L==+i,_=E===h[0]||E===h[1],I=m!==y,A="qs-square "+x;Y&&!k&&(A+=" qs-event"),j&&(A+=" qs-outside-current-month"),!l&&j||(A+=" qs-num"),N&&(A+=" qs-active"),(c[+L]||t.disabler(L)||_&&t.noWeekends||s&&+L<+s||o&&+L>+o)&&!k&&(A+=" qs-disabled"),+g(new Date)==+L&&(A+=" qs-current"),+L===m&&y&&I&&(A+=" qs-range-start"),+L>m&&+L<y&&(A+=" qs-range-middle"),+L===y&&m&&I&&(A+=" qs-range-end"),k&&(A+=" qs-empty",O=""),q.push(\'<div class="\'+A+\'" data-direction="\'+P+\'">\'+O+"</div>")}var R=d.map((function(e){return\'<div class="qs-square qs-day">\'+e+"</div>"})).concat(q);return R.unshift(\'<div class="qs-squares\'+(n?" qs-blur":"")+\'">\'),R.push("</div>"),R.join("")}function v(e,t){var n=e.overlayPlaceholder,a=e.overlayButton;return[\'<div class="qs-overlay\'+(t?"":" qs-hidden")+\'">\',"<div>",\'<input class="qs-overlay-year" placeholder="\'+n+\'" inputmode="numeric" />\',\'<div class="qs-close">&#10005;</div>\',"</div>",\'<div class="qs-overlay-month-container">\'+e.overlayMonths.map((function(e,t){return\'<div class="qs-overlay-month" data-month-num="\'+t+\'">\'+e+"</div>"})).join("")+"</div>",\'<div class="qs-submit qs-disabled">\'+a+"</div>","</div>"].join("")}function m(e,t,n){var a=t.el,r=t.calendar.querySelector(".qs-active"),i=e.textContent,o=t.sibling;(a.disabled||a.readOnly)&&t.respectDisabledReadOnly||(t.dateSelected=n?void 0:new Date(t.currentYear,t.currentMonth,i),r&&r.classList.remove("qs-active"),n||e.classList.add("qs-active"),p(a,t,n),n||q(t),o&&(y({instance:t,deselect:n}),t.first&&!o.dateSelected&&(o.currentYear=t.currentYear,o.currentMonth=t.currentMonth,o.currentMonthName=t.currentMonthName),u(t),u(o)),t.onSelect(t,n?void 0:new Date(t.dateSelected)))}function y(e){var t=e.instance.first?e.instance:e.instance.sibling,n=t.sibling;t===e.instance?e.deselect?(t.minDate=t.originalMinDate,n.minDate=n.originalMinDate):n.minDate=t.dateSelected:e.deselect?(n.maxDate=n.originalMaxDate,t.maxDate=t.originalMaxDate):t.maxDate=n.dateSelected}function p(e,t,n){if(!t.nonInput)return n?e.value="":t.formatter!==s?t.formatter(e,t.dateSelected,t):void(e.value=t.dateSelected.toDateString())}function w(e,t,n,a){n||a?(n&&(t.currentYear=+n),a&&(t.currentMonth=+a)):(t.currentMonth+=e.contains("qs-right")?1:-1,12===t.currentMonth?(t.currentMonth=0,t.currentYear++):-1===t.currentMonth&&(t.currentMonth=11,t.currentYear--)),t.currentMonthName=t.months[t.currentMonth],u(t),t.onMonthChange(t)}function D(e){if(!e.noPosition){var t=e.position.top,n=e.position.right;if(e.position.centered)return e.calendarContainer.classList.add("qs-centered");var a=e.positionedEl.getBoundingClientRect(),r=e.el.getBoundingClientRect(),i=e.calendarContainer.getBoundingClientRect(),o=r.top-a.top+(t?-1*i.height:r.height)+"px",s=r.left-a.left+(n?r.width-i.width:0)+"px";e.calendarContainer.style.setProperty("top",o),e.calendarContainer.style.setProperty("left",s)}}function b(e){return"[object Date]"===x(e)&&"Invalid Date"!==e.toString()}function g(e){if(b(e)||"number"==typeof e&&!isNaN(e)){var t=new Date(+e);return new Date(t.getFullYear(),t.getMonth(),t.getDate())}}function q(e){e.disabled||!e.calendarContainer.classList.contains("qs-hidden")&&!e.alwaysShow&&("overlay"!==e.defaultView&&M(!0,e),e.calendarContainer.classList.add("qs-hidden"),e.onHide(e))}function S(e){e.disabled||(e.calendarContainer.classList.remove("qs-hidden"),"overlay"===e.defaultView&&M(!1,e),D(e),e.onShow(e))}function M(e,t){var n=t.calendar,a=n.querySelector(".qs-overlay"),r=a.querySelector(".qs-overlay-year"),i=n.querySelector(".qs-controls"),o=n.querySelector(".qs-squares");e?(a.classList.add("qs-hidden"),i.classList.remove("qs-blur"),o.classList.remove("qs-blur"),r.value=""):(a.classList.remove("qs-hidden"),i.classList.add("qs-blur"),o.classList.add("qs-blur"),r.focus())}function E(e,t,n,a){var r=isNaN(+(new Date).setFullYear(t.value||void 0)),i=r?null:t.value;if(13===e.which||13===e.keyCode||"click"===e.type)a?w(null,n,i,a):r||t.classList.contains("qs-disabled")||w(null,n,i);else if(n.calendar.contains(t)){n.calendar.querySelector(".qs-submit").classList[r?"add":"remove"]("qs-disabled")}}function x(e){return{}.toString.call(e)}function C(e){a.forEach((function(t){t!==e&&q(t)}))}function L(e){if(!e.__qs_shadow_dom){var t=e.which||e.keyCode,n=e.type,r=e.target,o=r.classList,s=a.filter((function(e){return e.calendar.contains(r)||e.el===r}))[0],l=s&&s.calendar.contains(r);if(!(s&&s.isMobile&&s.disableMobile))if("click"===n){if(!s)return a.forEach(q);if(s.disabled)return;var d=s.calendar,c=s.calendarContainer,h=s.disableYearOverlay,f=s.nonInput,v=d.querySelector(".qs-overlay-year"),y=!!d.querySelector(".qs-hidden"),p=d.querySelector(".qs-month-year").contains(r),D=r.dataset.monthNum;if(s.noPosition&&!l)(c.classList.contains("qs-hidden")?S:q)(s);else if(o.contains("qs-arrow"))w(o,s);else if(p||o.contains("qs-close"))h||M(!y,s);else if(D)E(e,v,s,D);else{if(o.contains("qs-disabled"))return;if(o.contains("qs-num")){var b=r.textContent,g=+r.dataset.direction,x=new Date(s.currentYear,s.currentMonth+g,b);if(g){s.currentYear=x.getFullYear(),s.currentMonth=x.getMonth(),s.currentMonthName=i[s.currentMonth],u(s);for(var L,Y=s.calendar.querySelectorAll(\'[data-direction="0"]\'),j=0;!L;){var P=Y[j];P.textContent===b&&(L=P),j++}r=L}return void(+x==+s.dateSelected?m(r,s,!0):r.classList.contains("qs-disabled")||m(r,s))}o.contains("qs-submit")?E(e,v,s):f&&r===s.el&&(S(s),C(s))}}else if("focusin"===n&&s)S(s),C(s);else if("keydown"===n&&9===t&&s)q(s);else if("keydown"===n&&s&&!s.disabled){var k=!s.calendar.querySelector(".qs-overlay").classList.contains("qs-hidden");13===t&&k&&l?E(e,r,s):27===t&&k&&l&&M(!0,s)}else if("input"===n){if(!s||!s.calendar.contains(r))return;var O=s.calendar.querySelector(".qs-submit"),N=r.value.split("").reduce((function(e,t){return e||"0"!==t?e+(t.match(/[0-9]/)?t:""):""}),"").slice(0,4);r.value=N,O.classList[4===N.length?"remove":"add"]("qs-disabled")}}}function Y(e){L(e),e.__qs_shadow_dom=!0}function j(e,t){l.forEach((function(n){e.removeEventListener(n,t)}))}function P(){S(this)}function k(){q(this)}function O(e,t){var n=g(e),a=this.currentYear,r=this.currentMonth,i=this.sibling;if(null==e)return this.dateSelected=void 0,p(this.el,this,!0),i&&(y({instance:this,deselect:!0}),u(i)),u(this),this;if(!b(e))throw new Error("`setDate` needs a JavaScript Date object.");if(this.disabledDates[+n]||n<this.minDate||n>this.maxDate)throw new Error("You can\'t manually set a date that\'s disabled.");this.dateSelected=n,t&&(this.currentYear=n.getFullYear(),this.currentMonth=n.getMonth(),this.currentMonthName=this.months[n.getMonth()]),p(this.el,this),i&&(y({instance:this}),u(i));var o=a===n.getFullYear()&&r===n.getMonth();return o||t?u(this,n):o||u(this,new Date(a,r,1)),this}function N(e){return I(this,e,!0)}function _(e){return I(this,e)}function I(e,t,n){var a=e.dateSelected,r=e.first,i=e.sibling,o=e.minDate,s=e.maxDate,l=g(t),d=n?"Min":"Max";function c(){return"original"+d+"Date"}function h(){return d.toLowerCase()+"Date"}function f(){return"set"+d}function v(){throw new Error("Out-of-range date passed to "+f())}if(null==t)e[c()]=void 0,i?(i[c()]=void 0,n?(r&&!a||!r&&!i.dateSelected)&&(e.minDate=void 0,i.minDate=void 0):(r&&!i.dateSelected||!r&&!a)&&(e.maxDate=void 0,i.maxDate=void 0)):e[h()]=void 0;else{if(!b(t))throw new Error("Invalid date passed to "+f());i?((r&&n&&l>(a||s)||r&&!n&&l<(i.dateSelected||o)||!r&&n&&l>(i.dateSelected||s)||!r&&!n&&l<(a||o))&&v(),e[c()]=l,i[c()]=l,(n&&(r&&!a||!r&&!i.dateSelected)||!n&&(r&&!i.dateSelected||!r&&!a))&&(e[h()]=l,i[h()]=l)):((n&&l>(a||s)||!n&&l<(a||o))&&v(),e[h()]=l)}return i&&u(i),u(e),e}function A(){var e=this.first?this:this.sibling,t=e.sibling;return{start:e.dateSelected,end:t.dateSelected}}function R(){var e=this.shadowDom,t=this.positionedEl,n=this.calendarContainer,r=this.sibling,i=this;this.inlinePosition&&(a.some((function(e){return e!==i&&e.positionedEl===t}))||t.style.setProperty("position",null));n.remove(),a=a.filter((function(e){return e!==i})),r&&delete r.sibling,a.length||j(document,L);var o=a.some((function(t){return t.shadowDom===e}));for(var s in e&&!o&&j(e,Y),this)delete this[s];a.length||l.forEach((function(e){document.removeEventListener(e,L)}))}function F(e,t){var n=new Date(e);if(!b(n))throw new Error("Invalid date passed to `navigate`");this.currentYear=n.getFullYear(),this.currentMonth=n.getMonth(),u(this),t&&this.onMonthChange(this)}function B(){var e=!this.calendarContainer.classList.contains("qs-hidden"),t=!this.calendarContainer.querySelector(".qs-overlay").classList.contains("qs-hidden");e&&M(t,this)}t.default=function(e,t){var n=function(e,t){var n,l,d=function(e){var t=c(e);t.events&&(t.events=t.events.reduce((function(e,t){if(!b(t))throw new Error(\'"options.events" must only contain valid JavaScript Date objects.\');return e[+g(t)]=!0,e}),{}));["startDate","dateSelected","minDate","maxDate"].forEach((function(e){var n=t[e];if(n&&!b(n))throw new Error(\'"options.\'+e+\'" needs to be a valid JavaScript Date object.\');t[e]=g(n)}));var n=t.position,i=t.maxDate,l=t.minDate,d=t.dateSelected,u=t.overlayPlaceholder,h=t.overlayButton,f=t.startDay,v=t.id;if(t.startDate=g(t.startDate||d||new Date),t.disabledDates=(t.disabledDates||[]).reduce((function(e,t){var n=+g(t);if(!b(t))throw new Error(\'You supplied an invalid date to "options.disabledDates".\');if(n===+g(d))throw new Error(\'"disabledDates" cannot contain the same date as "dateSelected".\');return e[n]=1,e}),{}),t.hasOwnProperty("id")&&null==v)throw new Error("`id` cannot be `null` or `undefined`");if(null!=v){var m=a.filter((function(e){return e.id===v}));if(m.length>1)throw new Error("Only two datepickers can share an id.");m.length?(t.second=!0,t.sibling=m[0]):t.first=!0}var y=["tr","tl","br","bl","c"].some((function(e){return n===e}));if(n&&!y)throw new Error(\'"options.position" must be one of the following: tl, tr, bl, br, or c.\');function p(e){throw new Error(\'"dateSelected" in options is \'+(e?"less":"greater")+\' than "\'+(e||"max")+\'Date".\')}if(t.position=function(e){var t=e[0],n=e[1],a={};a[o[t]]=1,n&&(a[o[n]]=1);return a}(n||"bl"),i<l)throw new Error(\'"maxDate" in options is less than "minDate".\');d&&(l>d&&p("min"),i<d&&p());if(["onSelect","onShow","onHide","onMonthChange","formatter","disabler"].forEach((function(e){"function"!=typeof t[e]&&(t[e]=s)})),["customDays","customMonths","customOverlayMonths"].forEach((function(e,n){var a=t[e],r=n?12:7;if(a){if(!Array.isArray(a)||a.length!==r||a.some((function(e){return"string"!=typeof e})))throw new Error(\'"\'+e+\'" must be an array with \'+r+" strings.");t[n?n<2?"months":"overlayMonths":"days"]=a}})),f&&f>0&&f<7){var w=(t.customDays||r).slice(),D=w.splice(0,f);t.customDays=w.concat(D),t.startDay=+f,t.weekendIndices=[w.length-1,w.length]}else t.startDay=0,t.weekendIndices=[6,0];"string"!=typeof u&&delete t.overlayPlaceholder;"string"!=typeof h&&delete t.overlayButton;var q=t.defaultView;if(q&&"calendar"!==q&&"overlay"!==q)throw new Error(\'options.defaultView must either be "calendar" or "overlay".\');return t.defaultView=q||"calendar",t}(t||{startDate:g(new Date),position:"bl",defaultView:"calendar"}),u=e;if("string"==typeof u)u="#"===u[0]?document.getElementById(u.slice(1)):document.querySelector(u);else{if("[object ShadowRoot]"===x(u))throw new Error("Using a shadow DOM as your selector is not supported.");for(var h,f=u.parentNode;!h;){var v=x(f);"[object HTMLDocument]"===v?h=!0:"[object ShadowRoot]"===v?(h=!0,n=f,l=f.host):f=f.parentNode}}if(!u)throw new Error("No selector / element found.");if(a.some((function(e){return e.el===u})))throw new Error("A datepicker already exists on that element.");var m=u===document.body,y=n?u.parentElement||n:m?document.body:u.parentElement,w=n?u.parentElement||l:y,D=document.createElement("div"),q=document.createElement("div");D.className="qs-datepicker-container qs-hidden",q.className="qs-datepicker";var M={shadowDom:n,customElement:l,positionedEl:w,el:u,parent:y,nonInput:"INPUT"!==u.nodeName,noPosition:m,position:!m&&d.position,startDate:d.startDate,dateSelected:d.dateSelected,disabledDates:d.disabledDates,minDate:d.minDate,maxDate:d.maxDate,noWeekends:!!d.noWeekends,weekendIndices:d.weekendIndices,calendarContainer:D,calendar:q,currentMonth:(d.startDate||d.dateSelected).getMonth(),currentMonthName:(d.months||i)[(d.startDate||d.dateSelected).getMonth()],currentYear:(d.startDate||d.dateSelected).getFullYear(),events:d.events||{},defaultView:d.defaultView,setDate:O,remove:R,setMin:N,setMax:_,show:P,hide:k,navigate:F,toggleOverlay:B,onSelect:d.onSelect,onShow:d.onShow,onHide:d.onHide,onMonthChange:d.onMonthChange,formatter:d.formatter,disabler:d.disabler,months:d.months||i,days:d.customDays||r,startDay:d.startDay,overlayMonths:d.overlayMonths||(d.months||i).map((function(e){return e.slice(0,3)})),overlayPlaceholder:d.overlayPlaceholder||"4-digit year",overlayButton:d.overlayButton||"Submit",disableYearOverlay:!!d.disableYearOverlay,disableMobile:!!d.disableMobile,isMobile:"ontouchstart"in window,alwaysShow:!!d.alwaysShow,id:d.id,showAllDates:!!d.showAllDates,respectDisabledReadOnly:!!d.respectDisabledReadOnly,first:d.first,second:d.second};if(d.sibling){var E=d.sibling,C=M,L=E.minDate||C.minDate,Y=E.maxDate||C.maxDate;C.sibling=E,E.sibling=C,E.minDate=L,E.maxDate=Y,C.minDate=L,C.maxDate=Y,E.originalMinDate=L,E.originalMaxDate=Y,C.originalMinDate=L,C.originalMaxDate=Y,E.getRange=A,C.getRange=A}d.dateSelected&&p(u,M);var j=getComputedStyle(w).position;m||j&&"static"!==j||(M.inlinePosition=!0,w.style.setProperty("position","relative"));var I=a.filter((function(e){return e.positionedEl===M.positionedEl}));I.some((function(e){return e.inlinePosition}))&&(M.inlinePosition=!0,I.forEach((function(e){e.inlinePosition=!0})));D.appendChild(q),y.appendChild(D),M.alwaysShow&&S(M);return M}(e,t);if(a.length||d(document),n.shadowDom&&(a.some((function(e){return e.shadowDom===n.shadowDom}))||d(n.shadowDom)),a.push(n),n.second){var l=n.sibling;y({instance:n,deselect:!n.dateSelected}),y({instance:l,deselect:!l.dateSelected}),u(l)}return u(n,n.startDate||n.dateSelected),n.alwaysShow&&D(n),n}}]).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLXByb2plY3QvLi9ub2RlX21vZHVsZXMvanMtZGF0ZXBpY2tlci9kaXN0L2RhdGVwaWNrZXIubWluLmpzPzVjNWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxLQUFpRCxvQkFBb0IsQ0FBbUgsQ0FBQyxvQkFBb0IsbUJBQW1CLFNBQVMsY0FBYyw0QkFBNEIsWUFBWSxxQkFBcUIsMkRBQTJELHVDQUF1QyxxQ0FBcUMsb0JBQW9CLEVBQUUsaUJBQWlCLDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEVBQUUsbUJBQW1CLDhCQUE4QixxREFBcUQsMEJBQTBCLDZDQUE2QyxzQkFBc0IsNkRBQTZELFlBQVksZUFBZSxTQUFTLGlCQUFpQixpQ0FBaUMsaUJBQWlCLFlBQVksVUFBVSxzQkFBc0IsbUJBQW1CLGlEQUFpRCxpQkFBaUIsa0JBQWtCLGFBQWEsT0FBTyw0S0FBNEssb0RBQW9ELGNBQWMsNENBQTRDLGNBQWMsdUJBQXVCLHVDQUF1QyxHQUFHLGNBQWMsK0ZBQStGLHNCQUFzQixJQUFJLElBQUksZ0JBQWdCLHNGQUFzRixpSkFBaUosUUFBUSxHQUFHLGtCQUFrQiwrU0FBK1Msa0JBQWtCLGlNQUFpTSwwRUFBMEUsd0NBQXdDLHlDQUF5QyxlQUFlLFlBQVksS0FBSyxLQUFLLDRLQUE0SyxzYUFBc2EseUJBQXlCLGtEQUFrRCxhQUFhLDhGQUE4RixnQkFBZ0IsNkNBQTZDLDRLQUE0SywrRkFBK0YseUVBQXlFLHlGQUF5RixrQkFBa0IsZ0ZBQWdGLGtOQUFrTixzQkFBc0IsMExBQTBMLGNBQWMsaUVBQWlFLDJNQUEyTSxrQkFBa0IsK0hBQStILG9CQUFvQixzUkFBc1IsY0FBYyxrQkFBa0Isd0NBQXdDLCtFQUErRSxpTkFBaU4sZ0dBQWdHLGNBQWMsNERBQTRELGNBQWMsd0NBQXdDLG1CQUFtQiwyREFBMkQsY0FBYyxpTEFBaUwsY0FBYyxvSEFBb0gsZ0JBQWdCLDJKQUEySiwwTUFBME0sb0JBQW9CLHVFQUF1RSxzSEFBc0gsZ0NBQWdDLG1GQUFtRixjQUFjLFFBQVEsa0JBQWtCLGNBQWMsdUJBQXVCLFlBQVksR0FBRyxjQUFjLHVCQUF1QixtRkFBbUYsd0NBQXdDLGtDQUFrQyxxREFBcUQsMEJBQTBCLHFCQUFxQix3TkFBd04sK0RBQStELHNDQUFzQyw2Q0FBNkMscUJBQXFCLEtBQUssb0NBQW9DLHlCQUF5Qix3RkFBd0YsTUFBTSxvR0FBb0csb0VBQW9FLEdBQUcsRUFBRSxXQUFXLDZCQUE2QixJQUFJLHVGQUF1RiwyREFBMkQsbUNBQW1DLHFDQUFxQyx1Q0FBdUMsK0VBQStFLDRDQUE0QyxxQkFBcUIsc0NBQXNDLHVGQUF1RiwrQ0FBK0MsaUJBQWlCLG9FQUFvRSxjQUFjLDBCQUEwQixnQkFBZ0IsdUJBQXVCLDJCQUEyQixHQUFHLGFBQWEsUUFBUSxhQUFhLFFBQVEsZ0JBQWdCLGlFQUFpRSxxRUFBcUUsMEJBQTBCLHFCQUFxQixzRUFBc0UsNEhBQTRILGdLQUFnSyxjQUFjLFFBQVEsNENBQTRDLHNEQUFzRCxjQUFjLG9CQUFvQixjQUFjLGlCQUFpQixrQkFBa0IsMEZBQTBGLGFBQWEsMEJBQTBCLGFBQWEsOEJBQThCLGFBQWEsY0FBYyxhQUFhLG9EQUFvRCwrTEFBK0wsS0FBSyx3REFBd0QsK1BBQStQLHNCQUFzQixhQUFhLCtDQUErQyxPQUFPLHlDQUF5QyxhQUFhLHdGQUF3RiwwQ0FBMEMsaUNBQWlDLDBDQUEwQyxtQ0FBbUMsYUFBYSwrQ0FBK0MsMEJBQTBCLHVCQUF1QixHQUFHLCtDQUErQyxpQ0FBaUMsa0NBQWtDLEdBQUcsZ0JBQWdCLGtCQUFrQiw4REFBOEQsb0dBQW9HLGFBQWEscUpBQXFKLGFBQWEsd0JBQXdCLG9CQUFvQixzQkFBc0IsV0FBVyxtREFBbUQsOEZBQThGLHFCQUFxQixJQUFJLEdBQUcsc0VBQXNFLFdBQVcsMkZBQTJGLFVBQVUsR0FBRyx1SEFBdUgsdUdBQXVHLFlBQVkscUZBQXFGLGdHQUFnRyxnQkFBZ0IsSUFBSSwwRkFBMEYsWUFBWSw0QkFBNEIsZ0JBQWdCLEdBQUcsdUVBQXVFLGlEQUFpRCxrREFBa0QsYUFBYSxHQUFHLG1HQUFtRyxjQUFjLG9HQUFvRywwQkFBMEIsdUJBQXVCLHlCQUF5QixTQUFTLDhFQUE4RSw0QkFBNEIsOEZBQThGLGtDQUFrQyw4RUFBOEUsb0JBQW9CLE1BQU0sd0RBQXdELHlCQUF5QixtRUFBbUUsNENBQTRDLGdCQUFnQixnREFBZ0QsOEVBQThFLHlDQUF5QyxnREFBZ0QsMkNBQTJDLG9CQUFvQixtSEFBbUgscUNBQXFDLEtBQUssMkRBQTJELE1BQU0saUdBQWlHLEtBQUsseUdBQXlHLHlCQUF5QixHQUFHLEVBQUUsV0FBVywrRkFBK0Ysc0RBQXNELHVCQUF1QixnQkFBZ0IsbUVBQW1FLHdLQUF3Syw0RUFBNEUsT0FBTyxtaEJBQW1oQiwrVkFBK1Ysb0JBQW9CLGlXQUFpVyxjQUFjLGtFQUFrRSxrTEFBa0wsdUJBQXVCLG1DQUFtQyxxRkFBcUYsNEJBQTRCLHVDQUF1QyxHQUFHLG9CQUFvQix3QkFBd0IsZ0RBQWdELG9CQUFvQixJQUFJLHFEQUFxRCxTQUFTLE1BQU0sMkRBQTJELGlDQUFpQyx3Q0FBd0MsZ0JBQWdCLEdBQUcsb0NBQW9DLEtBQUssb0NBQW9DLE9BQU8sOERBQThELFdBQVciLCJmaWxlIjoiNDQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5kYXRlcGlja2VyPXQoKTplLmRhdGVwaWNrZXI9dCgpfSh3aW5kb3csKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4oYSl7aWYodFthXSlyZXR1cm4gdFthXS5leHBvcnRzO3ZhciByPXRbYV09e2k6YSxsOiExLGV4cG9ydHM6e319O3JldHVybiBlW2FdLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLG4pLHIubD0hMCxyLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQsYSl7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0OmF9KX0sbi5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgYT1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihhKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIHIgaW4gZSluLmQoYSxyLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwscikpO3JldHVybiBhfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiXCIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKHQpO3ZhciBhPVtdLHI9W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGk9W1wiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdLG89e3Q6XCJ0b3BcIixyOlwicmlnaHRcIixiOlwiYm90dG9tXCIsbDpcImxlZnRcIixjOlwiY2VudGVyZWRcIn07ZnVuY3Rpb24gcygpe312YXIgbD1bXCJjbGlja1wiLFwiZm9jdXNpblwiLFwia2V5ZG93blwiLFwiaW5wdXRcIl07ZnVuY3Rpb24gZChlKXtsLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UuYWRkRXZlbnRMaXN0ZW5lcih0LGU9PT1kb2N1bWVudD9MOlkpfSkpfWZ1bmN0aW9uIGMoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZS5tYXAoYyk6XCJbb2JqZWN0IE9iamVjdF1cIj09PXgoZSk/T2JqZWN0LmtleXMoZSkucmVkdWNlKChmdW5jdGlvbih0LG4pe3JldHVybiB0W25dPWMoZVtuXSksdH0pLHt9KTplfWZ1bmN0aW9uIHUoZSx0KXt2YXIgbj1lLmNhbGVuZGFyLnF1ZXJ5U2VsZWN0b3IoXCIucXMtb3ZlcmxheVwiKSxhPW4mJiFuLmNsYXNzTGlzdC5jb250YWlucyhcInFzLWhpZGRlblwiKTt0PXR8fG5ldyBEYXRlKGUuY3VycmVudFllYXIsZS5jdXJyZW50TW9udGgpLGUuY2FsZW5kYXIuaW5uZXJIVE1MPVtoKHQsZSxhKSxmKHQsZSxhKSx2KGUsYSldLmpvaW4oXCJcIiksYSYmd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24oKXtNKCEwLGUpfSkpfWZ1bmN0aW9uIGgoZSx0LG4pe3JldHVyblsnPGRpdiBjbGFzcz1cInFzLWNvbnRyb2xzJysobj9cIiBxcy1ibHVyXCI6XCJcIikrJ1wiPicsJzxkaXYgY2xhc3M9XCJxcy1hcnJvdyBxcy1sZWZ0XCI+PC9kaXY+JywnPGRpdiBjbGFzcz1cInFzLW1vbnRoLXllYXJcIj4nLCc8c3BhbiBjbGFzcz1cInFzLW1vbnRoXCI+Jyt0Lm1vbnRoc1tlLmdldE1vbnRoKCldK1wiPC9zcGFuPlwiLCc8c3BhbiBjbGFzcz1cInFzLXllYXJcIj4nK2UuZ2V0RnVsbFllYXIoKStcIjwvc3Bhbj5cIixcIjwvZGl2PlwiLCc8ZGl2IGNsYXNzPVwicXMtYXJyb3cgcXMtcmlnaHRcIj48L2Rpdj4nLFwiPC9kaXY+XCJdLmpvaW4oXCJcIil9ZnVuY3Rpb24gZihlLHQsbil7dmFyIGE9dC5jdXJyZW50TW9udGgscj10LmN1cnJlbnRZZWFyLGk9dC5kYXRlU2VsZWN0ZWQsbz10Lm1heERhdGUscz10Lm1pbkRhdGUsbD10LnNob3dBbGxEYXRlcyxkPXQuZGF5cyxjPXQuZGlzYWJsZWREYXRlcyx1PXQuc3RhcnREYXksaD10LndlZWtlbmRJbmRpY2VzLGY9dC5ldmVudHMsdj10LmdldFJhbmdlP3QuZ2V0UmFuZ2UoKTp7fSxtPSt2LnN0YXJ0LHk9K3YuZW5kLHA9ZyhuZXcgRGF0ZShlKS5zZXREYXRlKDEpKSx3PXAuZ2V0RGF5KCktdSxEPXc8MD83OjA7cC5zZXRNb250aChwLmdldE1vbnRoKCkrMSkscC5zZXREYXRlKDApO3ZhciBiPXAuZ2V0RGF0ZSgpLHE9W10sUz1EKzcqKCh3K2IpLzd8MCk7Uys9KHcrYiklNz83OjA7Zm9yKHZhciBNPTE7TTw9UztNKyspe3ZhciBFPShNLTEpJTcseD1kW0VdLEM9TS0odz49MD93OjcrdyksTD1uZXcgRGF0ZShyLGEsQyksWT1mWytMXSxqPUM8MXx8Qz5iLFA9aj9DPDE/LTE6MTowLGs9aiYmIWwsTz1rP1wiXCI6TC5nZXREYXRlKCksTj0rTD09K2ksXz1FPT09aFswXXx8RT09PWhbMV0sST1tIT09eSxBPVwicXMtc3F1YXJlIFwiK3g7WSYmIWsmJihBKz1cIiBxcy1ldmVudFwiKSxqJiYoQSs9XCIgcXMtb3V0c2lkZS1jdXJyZW50LW1vbnRoXCIpLCFsJiZqfHwoQSs9XCIgcXMtbnVtXCIpLE4mJihBKz1cIiBxcy1hY3RpdmVcIiksKGNbK0xdfHx0LmRpc2FibGVyKEwpfHxfJiZ0Lm5vV2Vla2VuZHN8fHMmJitMPCtzfHxvJiYrTD4rbykmJiFrJiYoQSs9XCIgcXMtZGlzYWJsZWRcIiksK2cobmV3IERhdGUpPT0rTCYmKEErPVwiIHFzLWN1cnJlbnRcIiksK0w9PT1tJiZ5JiZJJiYoQSs9XCIgcXMtcmFuZ2Utc3RhcnRcIiksK0w+bSYmK0w8eSYmKEErPVwiIHFzLXJhbmdlLW1pZGRsZVwiKSwrTD09PXkmJm0mJkkmJihBKz1cIiBxcy1yYW5nZS1lbmRcIiksayYmKEErPVwiIHFzLWVtcHR5XCIsTz1cIlwiKSxxLnB1c2goJzxkaXYgY2xhc3M9XCInK0ErJ1wiIGRhdGEtZGlyZWN0aW9uPVwiJytQKydcIj4nK08rXCI8L2Rpdj5cIil9dmFyIFI9ZC5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybic8ZGl2IGNsYXNzPVwicXMtc3F1YXJlIHFzLWRheVwiPicrZStcIjwvZGl2PlwifSkpLmNvbmNhdChxKTtyZXR1cm4gUi51bnNoaWZ0KCc8ZGl2IGNsYXNzPVwicXMtc3F1YXJlcycrKG4/XCIgcXMtYmx1clwiOlwiXCIpKydcIj4nKSxSLnB1c2goXCI8L2Rpdj5cIiksUi5qb2luKFwiXCIpfWZ1bmN0aW9uIHYoZSx0KXt2YXIgbj1lLm92ZXJsYXlQbGFjZWhvbGRlcixhPWUub3ZlcmxheUJ1dHRvbjtyZXR1cm5bJzxkaXYgY2xhc3M9XCJxcy1vdmVybGF5JysodD9cIlwiOlwiIHFzLWhpZGRlblwiKSsnXCI+JyxcIjxkaXY+XCIsJzxpbnB1dCBjbGFzcz1cInFzLW92ZXJsYXkteWVhclwiIHBsYWNlaG9sZGVyPVwiJytuKydcIiBpbnB1dG1vZGU9XCJudW1lcmljXCIgLz4nLCc8ZGl2IGNsYXNzPVwicXMtY2xvc2VcIj4mIzEwMDA1OzwvZGl2PicsXCI8L2Rpdj5cIiwnPGRpdiBjbGFzcz1cInFzLW92ZXJsYXktbW9udGgtY29udGFpbmVyXCI+JytlLm92ZXJsYXlNb250aHMubWFwKChmdW5jdGlvbihlLHQpe3JldHVybic8ZGl2IGNsYXNzPVwicXMtb3ZlcmxheS1tb250aFwiIGRhdGEtbW9udGgtbnVtPVwiJyt0KydcIj4nK2UrXCI8L2Rpdj5cIn0pKS5qb2luKFwiXCIpK1wiPC9kaXY+XCIsJzxkaXYgY2xhc3M9XCJxcy1zdWJtaXQgcXMtZGlzYWJsZWRcIj4nK2ErXCI8L2Rpdj5cIixcIjwvZGl2PlwiXS5qb2luKFwiXCIpfWZ1bmN0aW9uIG0oZSx0LG4pe3ZhciBhPXQuZWwscj10LmNhbGVuZGFyLnF1ZXJ5U2VsZWN0b3IoXCIucXMtYWN0aXZlXCIpLGk9ZS50ZXh0Q29udGVudCxvPXQuc2libGluZzsoYS5kaXNhYmxlZHx8YS5yZWFkT25seSkmJnQucmVzcGVjdERpc2FibGVkUmVhZE9ubHl8fCh0LmRhdGVTZWxlY3RlZD1uP3ZvaWQgMDpuZXcgRGF0ZSh0LmN1cnJlbnRZZWFyLHQuY3VycmVudE1vbnRoLGkpLHImJnIuY2xhc3NMaXN0LnJlbW92ZShcInFzLWFjdGl2ZVwiKSxufHxlLmNsYXNzTGlzdC5hZGQoXCJxcy1hY3RpdmVcIikscChhLHQsbiksbnx8cSh0KSxvJiYoeSh7aW5zdGFuY2U6dCxkZXNlbGVjdDpufSksdC5maXJzdCYmIW8uZGF0ZVNlbGVjdGVkJiYoby5jdXJyZW50WWVhcj10LmN1cnJlbnRZZWFyLG8uY3VycmVudE1vbnRoPXQuY3VycmVudE1vbnRoLG8uY3VycmVudE1vbnRoTmFtZT10LmN1cnJlbnRNb250aE5hbWUpLHUodCksdShvKSksdC5vblNlbGVjdCh0LG4/dm9pZCAwOm5ldyBEYXRlKHQuZGF0ZVNlbGVjdGVkKSkpfWZ1bmN0aW9uIHkoZSl7dmFyIHQ9ZS5pbnN0YW5jZS5maXJzdD9lLmluc3RhbmNlOmUuaW5zdGFuY2Uuc2libGluZyxuPXQuc2libGluZzt0PT09ZS5pbnN0YW5jZT9lLmRlc2VsZWN0Pyh0Lm1pbkRhdGU9dC5vcmlnaW5hbE1pbkRhdGUsbi5taW5EYXRlPW4ub3JpZ2luYWxNaW5EYXRlKTpuLm1pbkRhdGU9dC5kYXRlU2VsZWN0ZWQ6ZS5kZXNlbGVjdD8obi5tYXhEYXRlPW4ub3JpZ2luYWxNYXhEYXRlLHQubWF4RGF0ZT10Lm9yaWdpbmFsTWF4RGF0ZSk6dC5tYXhEYXRlPW4uZGF0ZVNlbGVjdGVkfWZ1bmN0aW9uIHAoZSx0LG4pe2lmKCF0Lm5vbklucHV0KXJldHVybiBuP2UudmFsdWU9XCJcIjp0LmZvcm1hdHRlciE9PXM/dC5mb3JtYXR0ZXIoZSx0LmRhdGVTZWxlY3RlZCx0KTp2b2lkKGUudmFsdWU9dC5kYXRlU2VsZWN0ZWQudG9EYXRlU3RyaW5nKCkpfWZ1bmN0aW9uIHcoZSx0LG4sYSl7bnx8YT8obiYmKHQuY3VycmVudFllYXI9K24pLGEmJih0LmN1cnJlbnRNb250aD0rYSkpOih0LmN1cnJlbnRNb250aCs9ZS5jb250YWlucyhcInFzLXJpZ2h0XCIpPzE6LTEsMTI9PT10LmN1cnJlbnRNb250aD8odC5jdXJyZW50TW9udGg9MCx0LmN1cnJlbnRZZWFyKyspOi0xPT09dC5jdXJyZW50TW9udGgmJih0LmN1cnJlbnRNb250aD0xMSx0LmN1cnJlbnRZZWFyLS0pKSx0LmN1cnJlbnRNb250aE5hbWU9dC5tb250aHNbdC5jdXJyZW50TW9udGhdLHUodCksdC5vbk1vbnRoQ2hhbmdlKHQpfWZ1bmN0aW9uIEQoZSl7aWYoIWUubm9Qb3NpdGlvbil7dmFyIHQ9ZS5wb3NpdGlvbi50b3Asbj1lLnBvc2l0aW9uLnJpZ2h0O2lmKGUucG9zaXRpb24uY2VudGVyZWQpcmV0dXJuIGUuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInFzLWNlbnRlcmVkXCIpO3ZhciBhPWUucG9zaXRpb25lZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHI9ZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxpPWUuY2FsZW5kYXJDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz1yLnRvcC1hLnRvcCsodD8tMSppLmhlaWdodDpyLmhlaWdodCkrXCJweFwiLHM9ci5sZWZ0LWEubGVmdCsobj9yLndpZHRoLWkud2lkdGg6MCkrXCJweFwiO2UuY2FsZW5kYXJDb250YWluZXIuc3R5bGUuc2V0UHJvcGVydHkoXCJ0b3BcIixvKSxlLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnNldFByb3BlcnR5KFwibGVmdFwiLHMpfX1mdW5jdGlvbiBiKGUpe3JldHVyblwiW29iamVjdCBEYXRlXVwiPT09eChlKSYmXCJJbnZhbGlkIERhdGVcIiE9PWUudG9TdHJpbmcoKX1mdW5jdGlvbiBnKGUpe2lmKGIoZSl8fFwibnVtYmVyXCI9PXR5cGVvZiBlJiYhaXNOYU4oZSkpe3ZhciB0PW5ldyBEYXRlKCtlKTtyZXR1cm4gbmV3IERhdGUodC5nZXRGdWxsWWVhcigpLHQuZ2V0TW9udGgoKSx0LmdldERhdGUoKSl9fWZ1bmN0aW9uIHEoZSl7ZS5kaXNhYmxlZHx8IWUuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwicXMtaGlkZGVuXCIpJiYhZS5hbHdheXNTaG93JiYoXCJvdmVybGF5XCIhPT1lLmRlZmF1bHRWaWV3JiZNKCEwLGUpLGUuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInFzLWhpZGRlblwiKSxlLm9uSGlkZShlKSl9ZnVuY3Rpb24gUyhlKXtlLmRpc2FibGVkfHwoZS5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwicXMtaGlkZGVuXCIpLFwib3ZlcmxheVwiPT09ZS5kZWZhdWx0VmlldyYmTSghMSxlKSxEKGUpLGUub25TaG93KGUpKX1mdW5jdGlvbiBNKGUsdCl7dmFyIG49dC5jYWxlbmRhcixhPW4ucXVlcnlTZWxlY3RvcihcIi5xcy1vdmVybGF5XCIpLHI9YS5xdWVyeVNlbGVjdG9yKFwiLnFzLW92ZXJsYXkteWVhclwiKSxpPW4ucXVlcnlTZWxlY3RvcihcIi5xcy1jb250cm9sc1wiKSxvPW4ucXVlcnlTZWxlY3RvcihcIi5xcy1zcXVhcmVzXCIpO2U/KGEuY2xhc3NMaXN0LmFkZChcInFzLWhpZGRlblwiKSxpLmNsYXNzTGlzdC5yZW1vdmUoXCJxcy1ibHVyXCIpLG8uY2xhc3NMaXN0LnJlbW92ZShcInFzLWJsdXJcIiksci52YWx1ZT1cIlwiKTooYS5jbGFzc0xpc3QucmVtb3ZlKFwicXMtaGlkZGVuXCIpLGkuY2xhc3NMaXN0LmFkZChcInFzLWJsdXJcIiksby5jbGFzc0xpc3QuYWRkKFwicXMtYmx1clwiKSxyLmZvY3VzKCkpfWZ1bmN0aW9uIEUoZSx0LG4sYSl7dmFyIHI9aXNOYU4oKyhuZXcgRGF0ZSkuc2V0RnVsbFllYXIodC52YWx1ZXx8dm9pZCAwKSksaT1yP251bGw6dC52YWx1ZTtpZigxMz09PWUud2hpY2h8fDEzPT09ZS5rZXlDb2RlfHxcImNsaWNrXCI9PT1lLnR5cGUpYT93KG51bGwsbixpLGEpOnJ8fHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicXMtZGlzYWJsZWRcIil8fHcobnVsbCxuLGkpO2Vsc2UgaWYobi5jYWxlbmRhci5jb250YWlucyh0KSl7bi5jYWxlbmRhci5xdWVyeVNlbGVjdG9yKFwiLnFzLXN1Ym1pdFwiKS5jbGFzc0xpc3Rbcj9cImFkZFwiOlwicmVtb3ZlXCJdKFwicXMtZGlzYWJsZWRcIil9fWZ1bmN0aW9uIHgoZSl7cmV0dXJue30udG9TdHJpbmcuY2FsbChlKX1mdW5jdGlvbiBDKGUpe2EuZm9yRWFjaCgoZnVuY3Rpb24odCl7dCE9PWUmJnEodCl9KSl9ZnVuY3Rpb24gTChlKXtpZighZS5fX3FzX3NoYWRvd19kb20pe3ZhciB0PWUud2hpY2h8fGUua2V5Q29kZSxuPWUudHlwZSxyPWUudGFyZ2V0LG89ci5jbGFzc0xpc3Qscz1hLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2FsZW5kYXIuY29udGFpbnMocil8fGUuZWw9PT1yfSkpWzBdLGw9cyYmcy5jYWxlbmRhci5jb250YWlucyhyKTtpZighKHMmJnMuaXNNb2JpbGUmJnMuZGlzYWJsZU1vYmlsZSkpaWYoXCJjbGlja1wiPT09bil7aWYoIXMpcmV0dXJuIGEuZm9yRWFjaChxKTtpZihzLmRpc2FibGVkKXJldHVybjt2YXIgZD1zLmNhbGVuZGFyLGM9cy5jYWxlbmRhckNvbnRhaW5lcixoPXMuZGlzYWJsZVllYXJPdmVybGF5LGY9cy5ub25JbnB1dCx2PWQucXVlcnlTZWxlY3RvcihcIi5xcy1vdmVybGF5LXllYXJcIikseT0hIWQucXVlcnlTZWxlY3RvcihcIi5xcy1oaWRkZW5cIikscD1kLnF1ZXJ5U2VsZWN0b3IoXCIucXMtbW9udGgteWVhclwiKS5jb250YWlucyhyKSxEPXIuZGF0YXNldC5tb250aE51bTtpZihzLm5vUG9zaXRpb24mJiFsKShjLmNsYXNzTGlzdC5jb250YWlucyhcInFzLWhpZGRlblwiKT9TOnEpKHMpO2Vsc2UgaWYoby5jb250YWlucyhcInFzLWFycm93XCIpKXcobyxzKTtlbHNlIGlmKHB8fG8uY29udGFpbnMoXCJxcy1jbG9zZVwiKSlofHxNKCF5LHMpO2Vsc2UgaWYoRClFKGUsdixzLEQpO2Vsc2V7aWYoby5jb250YWlucyhcInFzLWRpc2FibGVkXCIpKXJldHVybjtpZihvLmNvbnRhaW5zKFwicXMtbnVtXCIpKXt2YXIgYj1yLnRleHRDb250ZW50LGc9K3IuZGF0YXNldC5kaXJlY3Rpb24seD1uZXcgRGF0ZShzLmN1cnJlbnRZZWFyLHMuY3VycmVudE1vbnRoK2csYik7aWYoZyl7cy5jdXJyZW50WWVhcj14LmdldEZ1bGxZZWFyKCkscy5jdXJyZW50TW9udGg9eC5nZXRNb250aCgpLHMuY3VycmVudE1vbnRoTmFtZT1pW3MuY3VycmVudE1vbnRoXSx1KHMpO2Zvcih2YXIgTCxZPXMuY2FsZW5kYXIucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZGlyZWN0aW9uPVwiMFwiXScpLGo9MDshTDspe3ZhciBQPVlbal07UC50ZXh0Q29udGVudD09PWImJihMPVApLGorK31yPUx9cmV0dXJuIHZvaWQoK3g9PStzLmRhdGVTZWxlY3RlZD9tKHIscywhMCk6ci5jbGFzc0xpc3QuY29udGFpbnMoXCJxcy1kaXNhYmxlZFwiKXx8bShyLHMpKX1vLmNvbnRhaW5zKFwicXMtc3VibWl0XCIpP0UoZSx2LHMpOmYmJnI9PT1zLmVsJiYoUyhzKSxDKHMpKX19ZWxzZSBpZihcImZvY3VzaW5cIj09PW4mJnMpUyhzKSxDKHMpO2Vsc2UgaWYoXCJrZXlkb3duXCI9PT1uJiY5PT09dCYmcylxKHMpO2Vsc2UgaWYoXCJrZXlkb3duXCI9PT1uJiZzJiYhcy5kaXNhYmxlZCl7dmFyIGs9IXMuY2FsZW5kYXIucXVlcnlTZWxlY3RvcihcIi5xcy1vdmVybGF5XCIpLmNsYXNzTGlzdC5jb250YWlucyhcInFzLWhpZGRlblwiKTsxMz09PXQmJmsmJmw/RShlLHIscyk6Mjc9PT10JiZrJiZsJiZNKCEwLHMpfWVsc2UgaWYoXCJpbnB1dFwiPT09bil7aWYoIXN8fCFzLmNhbGVuZGFyLmNvbnRhaW5zKHIpKXJldHVybjt2YXIgTz1zLmNhbGVuZGFyLnF1ZXJ5U2VsZWN0b3IoXCIucXMtc3VibWl0XCIpLE49ci52YWx1ZS5zcGxpdChcIlwiKS5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGV8fFwiMFwiIT09dD9lKyh0Lm1hdGNoKC9bMC05XS8pP3Q6XCJcIik6XCJcIn0pLFwiXCIpLnNsaWNlKDAsNCk7ci52YWx1ZT1OLE8uY2xhc3NMaXN0WzQ9PT1OLmxlbmd0aD9cInJlbW92ZVwiOlwiYWRkXCJdKFwicXMtZGlzYWJsZWRcIil9fX1mdW5jdGlvbiBZKGUpe0woZSksZS5fX3FzX3NoYWRvd19kb209ITB9ZnVuY3Rpb24gaihlLHQpe2wuZm9yRWFjaCgoZnVuY3Rpb24obil7ZS5yZW1vdmVFdmVudExpc3RlbmVyKG4sdCl9KSl9ZnVuY3Rpb24gUCgpe1ModGhpcyl9ZnVuY3Rpb24gaygpe3EodGhpcyl9ZnVuY3Rpb24gTyhlLHQpe3ZhciBuPWcoZSksYT10aGlzLmN1cnJlbnRZZWFyLHI9dGhpcy5jdXJyZW50TW9udGgsaT10aGlzLnNpYmxpbmc7aWYobnVsbD09ZSlyZXR1cm4gdGhpcy5kYXRlU2VsZWN0ZWQ9dm9pZCAwLHAodGhpcy5lbCx0aGlzLCEwKSxpJiYoeSh7aW5zdGFuY2U6dGhpcyxkZXNlbGVjdDohMH0pLHUoaSkpLHUodGhpcyksdGhpcztpZighYihlKSl0aHJvdyBuZXcgRXJyb3IoXCJgc2V0RGF0ZWAgbmVlZHMgYSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0LlwiKTtpZih0aGlzLmRpc2FibGVkRGF0ZXNbK25dfHxuPHRoaXMubWluRGF0ZXx8bj50aGlzLm1heERhdGUpdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbid0IG1hbnVhbGx5IHNldCBhIGRhdGUgdGhhdCdzIGRpc2FibGVkLlwiKTt0aGlzLmRhdGVTZWxlY3RlZD1uLHQmJih0aGlzLmN1cnJlbnRZZWFyPW4uZ2V0RnVsbFllYXIoKSx0aGlzLmN1cnJlbnRNb250aD1uLmdldE1vbnRoKCksdGhpcy5jdXJyZW50TW9udGhOYW1lPXRoaXMubW9udGhzW24uZ2V0TW9udGgoKV0pLHAodGhpcy5lbCx0aGlzKSxpJiYoeSh7aW5zdGFuY2U6dGhpc30pLHUoaSkpO3ZhciBvPWE9PT1uLmdldEZ1bGxZZWFyKCkmJnI9PT1uLmdldE1vbnRoKCk7cmV0dXJuIG98fHQ/dSh0aGlzLG4pOm98fHUodGhpcyxuZXcgRGF0ZShhLHIsMSkpLHRoaXN9ZnVuY3Rpb24gTihlKXtyZXR1cm4gSSh0aGlzLGUsITApfWZ1bmN0aW9uIF8oZSl7cmV0dXJuIEkodGhpcyxlKX1mdW5jdGlvbiBJKGUsdCxuKXt2YXIgYT1lLmRhdGVTZWxlY3RlZCxyPWUuZmlyc3QsaT1lLnNpYmxpbmcsbz1lLm1pbkRhdGUscz1lLm1heERhdGUsbD1nKHQpLGQ9bj9cIk1pblwiOlwiTWF4XCI7ZnVuY3Rpb24gYygpe3JldHVyblwib3JpZ2luYWxcIitkK1wiRGF0ZVwifWZ1bmN0aW9uIGgoKXtyZXR1cm4gZC50b0xvd2VyQ2FzZSgpK1wiRGF0ZVwifWZ1bmN0aW9uIGYoKXtyZXR1cm5cInNldFwiK2R9ZnVuY3Rpb24gdigpe3Rocm93IG5ldyBFcnJvcihcIk91dC1vZi1yYW5nZSBkYXRlIHBhc3NlZCB0byBcIitmKCkpfWlmKG51bGw9PXQpZVtjKCldPXZvaWQgMCxpPyhpW2MoKV09dm9pZCAwLG4/KHImJiFhfHwhciYmIWkuZGF0ZVNlbGVjdGVkKSYmKGUubWluRGF0ZT12b2lkIDAsaS5taW5EYXRlPXZvaWQgMCk6KHImJiFpLmRhdGVTZWxlY3RlZHx8IXImJiFhKSYmKGUubWF4RGF0ZT12b2lkIDAsaS5tYXhEYXRlPXZvaWQgMCkpOmVbaCgpXT12b2lkIDA7ZWxzZXtpZighYih0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGUgcGFzc2VkIHRvIFwiK2YoKSk7aT8oKHImJm4mJmw+KGF8fHMpfHxyJiYhbiYmbDwoaS5kYXRlU2VsZWN0ZWR8fG8pfHwhciYmbiYmbD4oaS5kYXRlU2VsZWN0ZWR8fHMpfHwhciYmIW4mJmw8KGF8fG8pKSYmdigpLGVbYygpXT1sLGlbYygpXT1sLChuJiYociYmIWF8fCFyJiYhaS5kYXRlU2VsZWN0ZWQpfHwhbiYmKHImJiFpLmRhdGVTZWxlY3RlZHx8IXImJiFhKSkmJihlW2goKV09bCxpW2goKV09bCkpOigobiYmbD4oYXx8cyl8fCFuJiZsPChhfHxvKSkmJnYoKSxlW2goKV09bCl9cmV0dXJuIGkmJnUoaSksdShlKSxlfWZ1bmN0aW9uIEEoKXt2YXIgZT10aGlzLmZpcnN0P3RoaXM6dGhpcy5zaWJsaW5nLHQ9ZS5zaWJsaW5nO3JldHVybntzdGFydDplLmRhdGVTZWxlY3RlZCxlbmQ6dC5kYXRlU2VsZWN0ZWR9fWZ1bmN0aW9uIFIoKXt2YXIgZT10aGlzLnNoYWRvd0RvbSx0PXRoaXMucG9zaXRpb25lZEVsLG49dGhpcy5jYWxlbmRhckNvbnRhaW5lcixyPXRoaXMuc2libGluZyxpPXRoaXM7dGhpcy5pbmxpbmVQb3NpdGlvbiYmKGEuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIGUhPT1pJiZlLnBvc2l0aW9uZWRFbD09PXR9KSl8fHQuc3R5bGUuc2V0UHJvcGVydHkoXCJwb3NpdGlvblwiLG51bGwpKTtuLnJlbW92ZSgpLGE9YS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlIT09aX0pKSxyJiZkZWxldGUgci5zaWJsaW5nLGEubGVuZ3RofHxqKGRvY3VtZW50LEwpO3ZhciBvPWEuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhZG93RG9tPT09ZX0pKTtmb3IodmFyIHMgaW4gZSYmIW8mJmooZSxZKSx0aGlzKWRlbGV0ZSB0aGlzW3NdO2EubGVuZ3RofHxsLmZvckVhY2goKGZ1bmN0aW9uKGUpe2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxMKX0pKX1mdW5jdGlvbiBGKGUsdCl7dmFyIG49bmV3IERhdGUoZSk7aWYoIWIobikpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIHBhc3NlZCB0byBgbmF2aWdhdGVgXCIpO3RoaXMuY3VycmVudFllYXI9bi5nZXRGdWxsWWVhcigpLHRoaXMuY3VycmVudE1vbnRoPW4uZ2V0TW9udGgoKSx1KHRoaXMpLHQmJnRoaXMub25Nb250aENoYW5nZSh0aGlzKX1mdW5jdGlvbiBCKCl7dmFyIGU9IXRoaXMuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwicXMtaGlkZGVuXCIpLHQ9IXRoaXMuY2FsZW5kYXJDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5xcy1vdmVybGF5XCIpLmNsYXNzTGlzdC5jb250YWlucyhcInFzLWhpZGRlblwiKTtlJiZNKHQsdGhpcyl9dC5kZWZhdWx0PWZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgbixsLGQ9ZnVuY3Rpb24oZSl7dmFyIHQ9YyhlKTt0LmV2ZW50cyYmKHQuZXZlbnRzPXQuZXZlbnRzLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtpZighYih0KSl0aHJvdyBuZXcgRXJyb3IoJ1wib3B0aW9ucy5ldmVudHNcIiBtdXN0IG9ubHkgY29udGFpbiB2YWxpZCBKYXZhU2NyaXB0IERhdGUgb2JqZWN0cy4nKTtyZXR1cm4gZVsrZyh0KV09ITAsZX0pLHt9KSk7W1wic3RhcnREYXRlXCIsXCJkYXRlU2VsZWN0ZWRcIixcIm1pbkRhdGVcIixcIm1heERhdGVcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49dFtlXTtpZihuJiYhYihuKSl0aHJvdyBuZXcgRXJyb3IoJ1wib3B0aW9ucy4nK2UrJ1wiIG5lZWRzIHRvIGJlIGEgdmFsaWQgSmF2YVNjcmlwdCBEYXRlIG9iamVjdC4nKTt0W2VdPWcobil9KSk7dmFyIG49dC5wb3NpdGlvbixpPXQubWF4RGF0ZSxsPXQubWluRGF0ZSxkPXQuZGF0ZVNlbGVjdGVkLHU9dC5vdmVybGF5UGxhY2Vob2xkZXIsaD10Lm92ZXJsYXlCdXR0b24sZj10LnN0YXJ0RGF5LHY9dC5pZDtpZih0LnN0YXJ0RGF0ZT1nKHQuc3RhcnREYXRlfHxkfHxuZXcgRGF0ZSksdC5kaXNhYmxlZERhdGVzPSh0LmRpc2FibGVkRGF0ZXN8fFtdKS5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7dmFyIG49K2codCk7aWYoIWIodCkpdGhyb3cgbmV3IEVycm9yKCdZb3Ugc3VwcGxpZWQgYW4gaW52YWxpZCBkYXRlIHRvIFwib3B0aW9ucy5kaXNhYmxlZERhdGVzXCIuJyk7aWYobj09PStnKGQpKXRocm93IG5ldyBFcnJvcignXCJkaXNhYmxlZERhdGVzXCIgY2Fubm90IGNvbnRhaW4gdGhlIHNhbWUgZGF0ZSBhcyBcImRhdGVTZWxlY3RlZFwiLicpO3JldHVybiBlW25dPTEsZX0pLHt9KSx0Lmhhc093blByb3BlcnR5KFwiaWRcIikmJm51bGw9PXYpdGhyb3cgbmV3IEVycm9yKFwiYGlkYCBjYW5ub3QgYmUgYG51bGxgIG9yIGB1bmRlZmluZWRgXCIpO2lmKG51bGwhPXYpe3ZhciBtPWEuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD09PXZ9KSk7aWYobS5sZW5ndGg+MSl0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IHR3byBkYXRlcGlja2VycyBjYW4gc2hhcmUgYW4gaWQuXCIpO20ubGVuZ3RoPyh0LnNlY29uZD0hMCx0LnNpYmxpbmc9bVswXSk6dC5maXJzdD0hMH12YXIgeT1bXCJ0clwiLFwidGxcIixcImJyXCIsXCJibFwiLFwiY1wiXS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gbj09PWV9KSk7aWYobiYmIXkpdGhyb3cgbmV3IEVycm9yKCdcIm9wdGlvbnMucG9zaXRpb25cIiBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiB0bCwgdHIsIGJsLCBiciwgb3IgYy4nKTtmdW5jdGlvbiBwKGUpe3Rocm93IG5ldyBFcnJvcignXCJkYXRlU2VsZWN0ZWRcIiBpbiBvcHRpb25zIGlzICcrKGU/XCJsZXNzXCI6XCJncmVhdGVyXCIpKycgdGhhbiBcIicrKGV8fFwibWF4XCIpKydEYXRlXCIuJyl9aWYodC5wb3NpdGlvbj1mdW5jdGlvbihlKXt2YXIgdD1lWzBdLG49ZVsxXSxhPXt9O2Fbb1t0XV09MSxuJiYoYVtvW25dXT0xKTtyZXR1cm4gYX0obnx8XCJibFwiKSxpPGwpdGhyb3cgbmV3IEVycm9yKCdcIm1heERhdGVcIiBpbiBvcHRpb25zIGlzIGxlc3MgdGhhbiBcIm1pbkRhdGVcIi4nKTtkJiYobD5kJiZwKFwibWluXCIpLGk8ZCYmcCgpKTtpZihbXCJvblNlbGVjdFwiLFwib25TaG93XCIsXCJvbkhpZGVcIixcIm9uTW9udGhDaGFuZ2VcIixcImZvcm1hdHRlclwiLFwiZGlzYWJsZXJcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7XCJmdW5jdGlvblwiIT10eXBlb2YgdFtlXSYmKHRbZV09cyl9KSksW1wiY3VzdG9tRGF5c1wiLFwiY3VzdG9tTW9udGhzXCIsXCJjdXN0b21PdmVybGF5TW9udGhzXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUsbil7dmFyIGE9dFtlXSxyPW4/MTI6NztpZihhKXtpZighQXJyYXkuaXNBcnJheShhKXx8YS5sZW5ndGghPT1yfHxhLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlfSkpKXRocm93IG5ldyBFcnJvcignXCInK2UrJ1wiIG11c3QgYmUgYW4gYXJyYXkgd2l0aCAnK3IrXCIgc3RyaW5ncy5cIik7dFtuP248Mj9cIm1vbnRoc1wiOlwib3ZlcmxheU1vbnRoc1wiOlwiZGF5c1wiXT1hfX0pKSxmJiZmPjAmJmY8Nyl7dmFyIHc9KHQuY3VzdG9tRGF5c3x8cikuc2xpY2UoKSxEPXcuc3BsaWNlKDAsZik7dC5jdXN0b21EYXlzPXcuY29uY2F0KEQpLHQuc3RhcnREYXk9K2YsdC53ZWVrZW5kSW5kaWNlcz1bdy5sZW5ndGgtMSx3Lmxlbmd0aF19ZWxzZSB0LnN0YXJ0RGF5PTAsdC53ZWVrZW5kSW5kaWNlcz1bNiwwXTtcInN0cmluZ1wiIT10eXBlb2YgdSYmZGVsZXRlIHQub3ZlcmxheVBsYWNlaG9sZGVyO1wic3RyaW5nXCIhPXR5cGVvZiBoJiZkZWxldGUgdC5vdmVybGF5QnV0dG9uO3ZhciBxPXQuZGVmYXVsdFZpZXc7aWYocSYmXCJjYWxlbmRhclwiIT09cSYmXCJvdmVybGF5XCIhPT1xKXRocm93IG5ldyBFcnJvcignb3B0aW9ucy5kZWZhdWx0VmlldyBtdXN0IGVpdGhlciBiZSBcImNhbGVuZGFyXCIgb3IgXCJvdmVybGF5XCIuJyk7cmV0dXJuIHQuZGVmYXVsdFZpZXc9cXx8XCJjYWxlbmRhclwiLHR9KHR8fHtzdGFydERhdGU6ZyhuZXcgRGF0ZSkscG9zaXRpb246XCJibFwiLGRlZmF1bHRWaWV3OlwiY2FsZW5kYXJcIn0pLHU9ZTtpZihcInN0cmluZ1wiPT10eXBlb2YgdSl1PVwiI1wiPT09dVswXT9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh1LnNsaWNlKDEpKTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHUpO2Vsc2V7aWYoXCJbb2JqZWN0IFNoYWRvd1Jvb3RdXCI9PT14KHUpKXRocm93IG5ldyBFcnJvcihcIlVzaW5nIGEgc2hhZG93IERPTSBhcyB5b3VyIHNlbGVjdG9yIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO2Zvcih2YXIgaCxmPXUucGFyZW50Tm9kZTshaDspe3ZhciB2PXgoZik7XCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIj09PXY/aD0hMDpcIltvYmplY3QgU2hhZG93Um9vdF1cIj09PXY/KGg9ITAsbj1mLGw9Zi5ob3N0KTpmPWYucGFyZW50Tm9kZX19aWYoIXUpdGhyb3cgbmV3IEVycm9yKFwiTm8gc2VsZWN0b3IgLyBlbGVtZW50IGZvdW5kLlwiKTtpZihhLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVsPT09dX0pKSl0aHJvdyBuZXcgRXJyb3IoXCJBIGRhdGVwaWNrZXIgYWxyZWFkeSBleGlzdHMgb24gdGhhdCBlbGVtZW50LlwiKTt2YXIgbT11PT09ZG9jdW1lbnQuYm9keSx5PW4/dS5wYXJlbnRFbGVtZW50fHxuOm0/ZG9jdW1lbnQuYm9keTp1LnBhcmVudEVsZW1lbnQsdz1uP3UucGFyZW50RWxlbWVudHx8bDp5LEQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7RC5jbGFzc05hbWU9XCJxcy1kYXRlcGlja2VyLWNvbnRhaW5lciBxcy1oaWRkZW5cIixxLmNsYXNzTmFtZT1cInFzLWRhdGVwaWNrZXJcIjt2YXIgTT17c2hhZG93RG9tOm4sY3VzdG9tRWxlbWVudDpsLHBvc2l0aW9uZWRFbDp3LGVsOnUscGFyZW50Onksbm9uSW5wdXQ6XCJJTlBVVFwiIT09dS5ub2RlTmFtZSxub1Bvc2l0aW9uOm0scG9zaXRpb246IW0mJmQucG9zaXRpb24sc3RhcnREYXRlOmQuc3RhcnREYXRlLGRhdGVTZWxlY3RlZDpkLmRhdGVTZWxlY3RlZCxkaXNhYmxlZERhdGVzOmQuZGlzYWJsZWREYXRlcyxtaW5EYXRlOmQubWluRGF0ZSxtYXhEYXRlOmQubWF4RGF0ZSxub1dlZWtlbmRzOiEhZC5ub1dlZWtlbmRzLHdlZWtlbmRJbmRpY2VzOmQud2Vla2VuZEluZGljZXMsY2FsZW5kYXJDb250YWluZXI6RCxjYWxlbmRhcjpxLGN1cnJlbnRNb250aDooZC5zdGFydERhdGV8fGQuZGF0ZVNlbGVjdGVkKS5nZXRNb250aCgpLGN1cnJlbnRNb250aE5hbWU6KGQubW9udGhzfHxpKVsoZC5zdGFydERhdGV8fGQuZGF0ZVNlbGVjdGVkKS5nZXRNb250aCgpXSxjdXJyZW50WWVhcjooZC5zdGFydERhdGV8fGQuZGF0ZVNlbGVjdGVkKS5nZXRGdWxsWWVhcigpLGV2ZW50czpkLmV2ZW50c3x8e30sZGVmYXVsdFZpZXc6ZC5kZWZhdWx0VmlldyxzZXREYXRlOk8scmVtb3ZlOlIsc2V0TWluOk4sc2V0TWF4Ol8sc2hvdzpQLGhpZGU6ayxuYXZpZ2F0ZTpGLHRvZ2dsZU92ZXJsYXk6QixvblNlbGVjdDpkLm9uU2VsZWN0LG9uU2hvdzpkLm9uU2hvdyxvbkhpZGU6ZC5vbkhpZGUsb25Nb250aENoYW5nZTpkLm9uTW9udGhDaGFuZ2UsZm9ybWF0dGVyOmQuZm9ybWF0dGVyLGRpc2FibGVyOmQuZGlzYWJsZXIsbW9udGhzOmQubW9udGhzfHxpLGRheXM6ZC5jdXN0b21EYXlzfHxyLHN0YXJ0RGF5OmQuc3RhcnREYXksb3ZlcmxheU1vbnRoczpkLm92ZXJsYXlNb250aHN8fChkLm1vbnRoc3x8aSkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS5zbGljZSgwLDMpfSkpLG92ZXJsYXlQbGFjZWhvbGRlcjpkLm92ZXJsYXlQbGFjZWhvbGRlcnx8XCI0LWRpZ2l0IHllYXJcIixvdmVybGF5QnV0dG9uOmQub3ZlcmxheUJ1dHRvbnx8XCJTdWJtaXRcIixkaXNhYmxlWWVhck92ZXJsYXk6ISFkLmRpc2FibGVZZWFyT3ZlcmxheSxkaXNhYmxlTW9iaWxlOiEhZC5kaXNhYmxlTW9iaWxlLGlzTW9iaWxlOlwib250b3VjaHN0YXJ0XCJpbiB3aW5kb3csYWx3YXlzU2hvdzohIWQuYWx3YXlzU2hvdyxpZDpkLmlkLHNob3dBbGxEYXRlczohIWQuc2hvd0FsbERhdGVzLHJlc3BlY3REaXNhYmxlZFJlYWRPbmx5OiEhZC5yZXNwZWN0RGlzYWJsZWRSZWFkT25seSxmaXJzdDpkLmZpcnN0LHNlY29uZDpkLnNlY29uZH07aWYoZC5zaWJsaW5nKXt2YXIgRT1kLnNpYmxpbmcsQz1NLEw9RS5taW5EYXRlfHxDLm1pbkRhdGUsWT1FLm1heERhdGV8fEMubWF4RGF0ZTtDLnNpYmxpbmc9RSxFLnNpYmxpbmc9QyxFLm1pbkRhdGU9TCxFLm1heERhdGU9WSxDLm1pbkRhdGU9TCxDLm1heERhdGU9WSxFLm9yaWdpbmFsTWluRGF0ZT1MLEUub3JpZ2luYWxNYXhEYXRlPVksQy5vcmlnaW5hbE1pbkRhdGU9TCxDLm9yaWdpbmFsTWF4RGF0ZT1ZLEUuZ2V0UmFuZ2U9QSxDLmdldFJhbmdlPUF9ZC5kYXRlU2VsZWN0ZWQmJnAodSxNKTt2YXIgaj1nZXRDb21wdXRlZFN0eWxlKHcpLnBvc2l0aW9uO218fGomJlwic3RhdGljXCIhPT1qfHwoTS5pbmxpbmVQb3NpdGlvbj0hMCx3LnN0eWxlLnNldFByb3BlcnR5KFwicG9zaXRpb25cIixcInJlbGF0aXZlXCIpKTt2YXIgST1hLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIGUucG9zaXRpb25lZEVsPT09TS5wb3NpdGlvbmVkRWx9KSk7SS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gZS5pbmxpbmVQb3NpdGlvbn0pKSYmKE0uaW5saW5lUG9zaXRpb249ITAsSS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmlubGluZVBvc2l0aW9uPSEwfSkpKTtELmFwcGVuZENoaWxkKHEpLHkuYXBwZW5kQ2hpbGQoRCksTS5hbHdheXNTaG93JiZTKE0pO3JldHVybiBNfShlLHQpO2lmKGEubGVuZ3RofHxkKGRvY3VtZW50KSxuLnNoYWRvd0RvbSYmKGEuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2hhZG93RG9tPT09bi5zaGFkb3dEb219KSl8fGQobi5zaGFkb3dEb20pKSxhLnB1c2gobiksbi5zZWNvbmQpe3ZhciBsPW4uc2libGluZzt5KHtpbnN0YW5jZTpuLGRlc2VsZWN0OiFuLmRhdGVTZWxlY3RlZH0pLHkoe2luc3RhbmNlOmwsZGVzZWxlY3Q6IWwuZGF0ZVNlbGVjdGVkfSksdShsKX1yZXR1cm4gdShuLG4uc3RhcnREYXRlfHxuLmRhdGVTZWxlY3RlZCksbi5hbHdheXNTaG93JiZEKG4pLG59fV0pLmRlZmF1bHR9KSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///448\n')},379:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///379\n")}},__webpack_module_cache__={};function __webpack_require__(I){if(__webpack_module_cache__[I])return __webpack_module_cache__[I].exports;var g=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](g,g.exports,__webpack_require__),g.exports}__webpack_require__.n=I=>{var g=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=(I,g)=>{for(var n in g)__webpack_require__.o(g,n)&&!__webpack_require__.o(I,n)&&Object.defineProperty(I,n,{enumerable:!0,get:g[n]})},__webpack_require__.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),__webpack_require__.p="",(()=>{"use strict";eval("\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/toInteger/index.js\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/requiredArgs/index.js\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/toDate/index.js\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/addDays/index.js\n\n\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nfunction addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/addMonths/index.js\n\n\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nfunction addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/add/index.js\n\n\n\n\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added       |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * var result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\n\nfunction add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = 'years' in duration ? toInteger(duration.years) : 0;\n  var months = 'months' in duration ? toInteger(duration.months) : 0;\n  var weeks = 'weeks' in duration ? toInteger(duration.weeks) : 0;\n  var days = 'days' in duration ? toInteger(duration.days) : 0;\n  var hours = 'hours' in duration ? toInteger(duration.hours) : 0;\n  var minutes = 'minutes' in duration ? toInteger(duration.minutes) : 0;\n  var seconds = 'seconds' in duration ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isValid/index.js\n\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nfunction isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nfunction formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js\nfunction buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js\n\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\n/* harmony default export */ const _lib_formatLong = (formatLong);\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js\nvar formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nfunction formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js\nfunction buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js\n\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\n/* harmony default export */ const _lib_localize = (localize);\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js\nfunction buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js\nfunction buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js\n\n\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\n/* harmony default export */ const _lib_match = (match);\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-US/index.js\n\n\n\n\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: _lib_formatLong,\n  formatRelative: formatRelative,\n  localize: _lib_localize,\n  match: _lib_match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\n/* harmony default export */ const en_US = (locale);\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/addMilliseconds/index.js\n\n\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nfunction addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/subMilliseconds/index.js\n\n\n\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nfunction subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js\nfunction addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\n/* harmony default export */ const lightFormatters = (formatters);\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js\n\n\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js\n\n // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js\n\n\n // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js\n\n\n // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js\n\n\n\n\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js\n\n\n // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js\n\n\n\n // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js\n\n\n\n // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/getUTCWeek/index.js\n\n\n\n\nvar getUTCWeek_MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / getUTCWeek_MILLISECONDS_IN_WEEK) + 1;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/format/formatters/index.js\n\n\n\n\n\n\n\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters_formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\n/* harmony default export */ const format_formatters = (formatters_formatters);\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/format/longFormatters/index.js\nfunction dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\n/* harmony default export */ const format_longFormatters = (longFormatters);\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js\nvar MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nfunction getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/protectedTokens/index.js\nvar protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nfunction isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nfunction isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nfunction throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/format/index.js\n\n\n\n\n\n\n\n\n\n // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nfunction format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || en_US;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = format_longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = format_formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/startOfDay/index.js\n\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nfunction startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isSameDay/index.js\n\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nfunction isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/isToday/index.js\n\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nfunction isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}\n// EXTERNAL MODULE: ./node_modules/js-datepicker/dist/datepicker.min.js\nvar datepicker_min = __webpack_require__(448);\nvar datepicker_min_default = /*#__PURE__*/__webpack_require__.n(datepicker_min);\n;// CONCATENATED MODULE: ./node_modules/simple-color-picker/dist/simple-color-picker.module.js\nfunction t(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function e(e,i,o){return i&&t(e.prototype,i),o&&t(e,o),e}function i(t){return\"number\"==typeof t&&!isNaN(t)}function o(t,e,i){return Math.min(Math.max(t,e),i)}function n(t){if(0===t.type.indexOf(\"touch\")){var e=t.touches[0];return{x:e.clientX,y:e.clientY}}return{x:t.clientX,y:t.clientY}}function s(t){return 1==t.length?\"0\"+t:\"\"+t}var r=function(){function t(t){this._rgba={r:0,g:0,b:0,a:1},this._hsva={h:0,s:0,v:0,a:1},this.fromHex(t)}var o=t.prototype;return o.fromHex=function(t){t||(t=0),i(t)?(this._hexNumber=t,this._hexString=function(t){return\"#\"+(\"00000\"+(0|t).toString(16)).substr(-6).toUpperCase()}(this._hexNumber)):(this._hexString=t.toUpperCase(),this._hexNumber=h(this._hexString));var e=function(t){return{r:(t>>16&255)/255,g:(t>>8&255)/255,b:(255&t)/255}}(this._hexNumber),o=e.g,n=e.b;this._rgba.r=e.r,this._rgba.g=o,this._rgba.b=n;var s=function(t){var e,i=t.r,o=t.g,n=t.b,s=Math.max(i,o,n),r=Math.min(i,o,n),h=s-r,u=0===s?0:h/s,a=s;if(s==r)e=0;else{switch(s){case i:e=(o-n)/h+(o<n?6:0);break;case o:e=(n-i)/h+2;break;case n:e=(i-o)/h+4}e/=6}return{h:e,s:u,v:a}}(this._rgba),r=s.s,u=s.v;this._hsva.h=s.h,this._hsva.s=r,this._hsva.v=u,this._updateBrightness()},o.fromHsv=function(t){var e=t.s,i=t.v;this._hsva.h=t.h,this._hsva.s=e,this._hsva.v=i;var o=function(t){var e=t.h,i=t.s,o=t.v;e*=6;var n=Math.floor(e),s=e-n,r=o*(1-i),h=o*(1-s*i),u=o*(1-(1-s)*i),a=n%6;return{r:[o,h,r,r,u,o][a],g:[u,o,o,h,r,r][a],b:[r,r,u,o,o,h][a]}}(this._hsva),n=o.g,r=o.b;this._rgba.r=o.r,this._rgba.g=n,this._rgba.b=r,this._hexString=function(t){var e=t.g,i=t.b;return[\"#\",s(Math.round(255*t.r).toString(16)),s(Math.round(255*e).toString(16)),s(Math.round(255*i).toString(16))].join(\"\").toUpperCase()}(this._rgba),this._hexNumber=h(this._hexString),this._updateBrightness()},o._updateBrightness=function(){var t=this._rgba;this._brightness=(299*t.r+587*t.g+114*t.b)/1e3,this._isDark=this._brightness<.5,this._isLight=!this._isDark},e(t,[{key:\"rgb\",get:function(){return this._rgba}},{key:\"hsv\",get:function(){return this._hsva}},{key:\"hex\",get:function(){return this._hexNumber}},{key:\"hexString\",get:function(){return this._hexString}},{key:\"brightness\",get:function(){return this._brightness}},{key:\"isDark\",get:function(){return this._isDark}},{key:\"isLight\",get:function(){return this._isLight}}]),t}();function h(t){return parseInt(t.replace(\"#\",\"\"),16)}var u=function(){function t(t){var e=this;void 0===t&&(t={}),this._widthUnits=\"px\",this._heightUnits=\"px\",this._huePosition=0,this._hueHeight=0,this._maxHue=0,this._inputIsNumber=!1,this._saturationWidth=0,this._isChoosing=!1,this._callbacks=[],this.width=0,this.height=0,this.hue=0,this.position={x:0,y:0},this.color=new r(0),this.backgroundColor=new r(0),this.hueColor=new r(0),this._onSaturationMouseDown=function(t){var i=e.$saturation.getBoundingClientRect(),o=n(t),s=o.x,r=o.y;e._isChoosing=!0,e._moveSelectorTo(s-i.left,r-i.top),e._updateColorFromPosition(),e._window.addEventListener(\"mouseup\",e._onSaturationMouseUp),e._window.addEventListener(\"touchend\",e._onSaturationMouseUp),e._window.addEventListener(\"mousemove\",e._onSaturationMouseMove),e._window.addEventListener(\"touchmove\",e._onSaturationMouseMove),t.preventDefault()},this._onSaturationMouseMove=function(t){var i=e.$saturation.getBoundingClientRect(),o=n(t);e._moveSelectorTo(o.x-i.left,o.y-i.top),e._updateColorFromPosition()},this._onSaturationMouseUp=function(){e._isChoosing=!1,e._window.removeEventListener(\"mouseup\",e._onSaturationMouseUp),e._window.removeEventListener(\"touchend\",e._onSaturationMouseUp),e._window.removeEventListener(\"mousemove\",e._onSaturationMouseMove),e._window.removeEventListener(\"touchmove\",e._onSaturationMouseMove)},this._onHueMouseDown=function(t){var i=e.$hue.getBoundingClientRect(),o=n(t).y;e._isChoosing=!0,e._moveHueTo(o-i.top),e._updateHueFromPosition(),e._window.addEventListener(\"mouseup\",e._onHueMouseUp),e._window.addEventListener(\"touchend\",e._onHueMouseUp),e._window.addEventListener(\"mousemove\",e._onHueMouseMove),e._window.addEventListener(\"touchmove\",e._onHueMouseMove),t.preventDefault()},this._onHueMouseMove=function(t){var i=e.$hue.getBoundingClientRect(),o=n(t);e._moveHueTo(o.y-i.top),e._updateHueFromPosition()},this._onHueMouseUp=function(){e._isChoosing=!1,e._window.removeEventListener(\"mouseup\",e._onHueMouseUp),e._window.removeEventListener(\"touchend\",e._onHueMouseUp),e._window.removeEventListener(\"mousemove\",e._onHueMouseMove),e._window.removeEventListener(\"touchmove\",e._onHueMouseMove)},this._window=t.window||window,this._document=this._window.document,this.$el=this._document.createElement(\"div\"),this.$el.className=\"Scp\",this.$el.innerHTML='\\n      <div class=\"Scp-saturation\">\\n        <div class=\"Scp-brightness\"></div>\\n        <div class=\"Scp-sbSelector\"></div>\\n      </div>\\n      <div class=\"Scp-hue\">\\n        <div class=\"Scp-hSelector\"></div>\\n      </div>\\n    ',this.$saturation=this.$el.querySelector(\".Scp-saturation\"),this.$hue=this.$el.querySelector(\".Scp-hue\"),this.$sbSelector=this.$el.querySelector(\".Scp-sbSelector\"),this.$hSelector=this.$el.querySelector(\".Scp-hSelector\"),this.$saturation.addEventListener(\"mousedown\",this._onSaturationMouseDown),this.$saturation.addEventListener(\"touchstart\",this._onSaturationMouseDown),this.$hue.addEventListener(\"mousedown\",this._onHueMouseDown),this.$hue.addEventListener(\"touchstart\",this._onHueMouseDown),t.el&&this.appendTo(t.el),t.background&&this.setBackgroundColor(t.background),t.widthUnits&&(this._widthUnits=t.widthUnits),t.heightUnits&&(this._heightUnits=t.heightUnits),this.setSize(t.width||175,t.height||150),this.setColor(t.color)}var s=t.prototype;return s.appendTo=function(t){return\"string\"==typeof t?document.querySelector(t).appendChild(this.$el):t.appendChild(this.$el),this},s.remove=function(){this._callbacks=[],this._onSaturationMouseUp(),this._onHueMouseUp(),this.$saturation.removeEventListener(\"mousedown\",this._onSaturationMouseDown),this.$saturation.removeEventListener(\"touchstart\",this._onSaturationMouseDown),this.$hue.removeEventListener(\"mousedown\",this._onHueMouseDown),this.$hue.removeEventListener(\"touchstart\",this._onHueMouseDown),this.$el.parentNode&&this.$el.parentNode.removeChild(this.$el)},s.setColor=function(t){this._inputIsNumber=i(t),this.color.fromHex(t);var e=this.color.hsv,o=e.h,n=e.s,s=e.v;return isNaN(o)||(this.hue=o),this._moveSelectorTo(this._saturationWidth*n,(1-s)*this._hueHeight),this._moveHueTo((1-this.hue)*this._hueHeight),this._updateHue(),this},s.setSize=function(t,e){return this.width=t,this.height=e,this.$el.style.width=this.width+this._widthUnits,this.$el.style.height=this.height+this._heightUnits,this._saturationWidth=this.width-25,this.$saturation.style.width=this._saturationWidth+\"px\",this._hueHeight=this.height,this._maxHue=this._hueHeight-2,this},s.setBackgroundColor=function(t){return this.backgroundColor.fromHex(t),this.$el.style.padding=\"5px\",this.$el.style.background=this.backgroundColor.hexString,this},s.setNoBackground=function(){return this.$el.style.padding=\"0px\",this.$el.style.background=\"none\",this},s.onChange=function(t){return this._callbacks.indexOf(t)<0&&(this._callbacks.push(t),t(this.getHexString())),this},s.getColor=function(){return this._inputIsNumber?this.getHexNumber():this.getHexString()},s.getHexString=function(){return this.color.hexString.toUpperCase()},s.getHexNumber=function(){return this.color.hex},s.getRGB=function(){return this.color.rgb},s.getHSV=function(){return this.color.hsv},s.isDark=function(){return this.color.isDark},s.isLight=function(){return this.color.isLight},s._moveSelectorTo=function(t,e){this.position.x=o(t,0,this._saturationWidth),this.position.y=o(e,0,this._hueHeight),this.$sbSelector.style.transform=\"translate(\"+this.position.x+\"px, \"+this.position.y+\"px)\"},s._updateColorFromPosition=function(){this.color.fromHsv({h:this.hue,s:this.position.x/this._saturationWidth,v:1-this.position.y/this._hueHeight}),this._updateColor()},s._moveHueTo=function(t){this._huePosition=o(t,0,this._maxHue),this.$hSelector.style.transform=\"translateY(\"+this._huePosition+\"px)\"},s._updateHueFromPosition=function(){var t=this.getHSV();this.hue=1-this._huePosition/this._maxHue,this.color.fromHsv({h:this.hue,s:t.s,v:t.v}),this._updateHue()},s._updateHue=function(){this.hueColor.fromHsv({h:this.hue,s:1,v:1}),this.$saturation.style.background=\"linear-gradient(to right, #fff, \"+this.hueColor.hexString+\")\",this._updateColor()},s._updateColor=function(){this.$sbSelector.style.background=this.getHexString(),this.$sbSelector.style.borderColor=this.isDark()?\"#fff\":\"#000\",this._triggerChange()},s._triggerChange=function(){var t=this;this._callbacks.forEach(function(e){return e(t.getHexString())})},e(t,[{key:\"isChoosing\",get:function(){return this._isChoosing}}]),t}();!function(t,e){void 0===e&&(e={});var i=e.insertAt;if(\"undefined\"!=typeof document){var o=document.head||document.getElementsByTagName(\"head\")[0],n=document.createElement(\"style\");n.type=\"text/css\",\"top\"===i&&o.firstChild?o.insertBefore(n,o.firstChild):o.appendChild(n),n.styleSheet?n.styleSheet.cssText=t:n.appendChild(document.createTextNode(t))}}(\".Scp{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative}.Scp-saturation{position:relative;height:100%;background:linear-gradient(90deg,#fff,red);float:left;margin-right:5px}.Scp-brightness{width:100%;height:100%;background:linear-gradient(hsla(0,0%,100%,0),#000)}.Scp-sbSelector{border:2px solid #fff;position:absolute;width:14px;height:14px;background:#fff;border-radius:10px;top:-7px;left:-7px;box-sizing:border-box;z-index:10}.Scp-hue{width:20px;height:100%;position:relative;float:left;background:linear-gradient(red,#f0f 17%,#00f 34%,#0ff 50%,#0f0 67%,#ff0 84%,red)}.Scp-hSelector{position:absolute;background:#fff;border-bottom:1px solid #000;right:-3px;width:10px;height:2px}\",{insertAt:\"top\"});/* harmony default export */ const simple_color_picker_module = (u);\n//# sourceMappingURL=simple-color-picker.module.js.map\n\n;// CONCATENATED MODULE: ./src/modules/createNode.js\nfunction createNode(type, parent, idName = \"\", className = []) {\n    const node = document.createElement(type)\n    if (parent == undefined) {\n        document.querySelector(\"#projectContainer\").appendChild(node)\n    } else {\n        parent.appendChild(node)\n    }\n\n    if (idName) {\n        node.setAttribute(\"id\", idName)\n    }\n\n    if (className) {\n        if (Array.isArray(className)) {\n            for (let i = 0; i < className.length; i++) {\n                node.classList.add(className[i])\n            }\n        } else if (typeof className == \"string\") {\n            node.classList.add(className)\n        }\n    }\n\n\n    return node\n}\n;// CONCATENATED MODULE: ./src/modules/publishEvent.js\n// Custom event for NodeObjectBinder class.\nconst publish = new Event('publish');\n\n/* harmony default export */ const publishEvent = ((/* unused pure expression or super */ null && (publish)));\n;// CONCATENATED MODULE: ./src/modules/ListBinderClass.js\n\n\nclass ListBinder {\n    constructor(node, container, hash) {\n\n        this.node = node\n        this.container = container\n        this.obj = container.list\n        this.listHash = hash\n        node.addEventListener(\"publish\", this)\n\n    }\n\n    // PUBLISH Handles transfer of data from node dataset to object\n    handleEvent(thing) {\n        const nodeName = this.node.dataset.name\n        this.obj.name = nodeName\n        console.log(this)\n    }\n\n    // CHANGE handles transfer of data from object to node\n    change() {\n        const listObjectName = this.container.name\n        this.node.querySelector(\".listName\").textContent = listObjectName\n        const listObjectColor = this.container.color\n        this.node.querySelector(\".listPointer\").style.backgroundColor = listObjectColor\n        console.log(this)\n        const listCounter = this.node.querySelector(\".listCount\")\n        if (this.container.lightToggle === false || this.container.lightToggle === \"false\") {\n            listCounter.style.color = \"white\"\n        } else {\n            listCounter.style.color = \"black\"\n        }\n    }\n}\n// EXTERNAL MODULE: ./src/img/flag.svg\nvar flag = __webpack_require__(845);\n;// CONCATENATED MODULE: ./src/img/square.svg\n/* harmony default export */ const square = (__webpack_require__.p + \"imgs/square.20ddc8f48802e8724a19343ff7c8c69e.svg\");\n;// CONCATENATED MODULE: ./src/img/square-fill.svg\n/* harmony default export */ const square_fill = (__webpack_require__.p + \"imgs/square-fill.703b437b31f52c79bb679320b10d3aac.svg\");\n;// CONCATENATED MODULE: ./src/modules/TaskBinderClass.js\n\n\n\n\n\n\n\nclass TaskBinderClass_TaskBinder {\n    constructor(node, obj, listHash, taskHash) {\n\n        this.node = node\n        this.obj = obj\n        this.listHash = listHash\n        this.taskHash = taskHash\n        node.addEventListener(\"publish\", this)\n\n        // DEMO THING\n        // node.addEventListener(\"click\", function () { node.dispatchEvent(publish) })\n\n    }\n\n    // PUBLISH Handles transfer of data from node dataset to object\n    handleEvent(thing) {\n        const nodeTitle = this.node.dataset.name\n        const nodeDueDate = this.node.dataset.duedate\n\n        this.obj.name = nodeTitle\n        this.obj.date = nodeDueDate\n\n        console.log(this)\n    }\n\n    // CHANGE handles transfer of data from object to node\n    change() {\n        // Title\n        const objectTitle = this.obj.name\n\n        // Date\n        let objectDueDate\n        if (this.obj.date) {\n            objectDueDate = format(this.obj.date, \"dd/MM/yy\")\n        }\n\n        // Flag\n        if (this.obj.flagged) {\n            this.node.querySelector(\".taskFlagIcon\").src = flag/* default */.Z\n        } else {\n            this.node.querySelector(\".taskFlagIcon\").src = \"\"\n        }\n\n        // Complete checkbox\n        const taskNodeCheckbox = this.node.querySelector(\".checkbox\")\n        if (this.obj.completeBool) {\n            taskNodeCheckbox.src = square_fill\n        } else {\n            taskNodeCheckbox.src = square\n        }\n\n        this.node.querySelector(\".taskDescription\").textContent = objectTitle\n        this.node.querySelector(\".taskDueDate\").textContent = objectDueDate\n    }\n}\n;// CONCATENATED MODULE: ./src/img/app.svg\n/* harmony default export */ const app = (__webpack_require__.p + \"imgs/app.48d9eded2742df5bb43867dd72884a28.svg\");\n;// CONCATENATED MODULE: ./src/img/pencil-square.svg\n/* harmony default export */ const pencil_square = (__webpack_require__.p + \"imgs/pencil-square.6ddc91ca032162479d28d2e9038ca648.svg\");\n;// CONCATENATED MODULE: ./src/img/trash.svg\n/* harmony default export */ const trash = (__webpack_require__.p + \"imgs/trash.f1497a79274fd4b15a1d7ad66725119e.svg\");\n;// CONCATENATED MODULE: ./src/img/plus-square.svg\n/* harmony default export */ const plus_square = (__webpack_require__.p + \"imgs/plus-square.ae289d0cb310b8da975aacebf8835005.svg\");\n;// CONCATENATED MODULE: ./src/modules/app.js\n// Foreign modules\n\n\n\n\n\n// Helper home-made modules\n\n\n\n\n// Images\n\n\n\n\n\n\n\n\nconst runApp = () => {\n\n    // List stores and creates/edits/deletes objects that hold groups of task objects. i.e \"Grocery List\".\n    const List = (() => {\n\n        // This contains all the list objects, which in turn contain all the task objects. List objects also contain other data,\n        // like list title and list color.\n        const ListStorage = new Map()\n\n        // This is a storage object for list binders. Used to keep references to pairs of list nodes and list objects.\n        // Can be used to enable list nodes & object pairs to be renamed by the user, \n        // and to update side bar count of tasks within a list.\n        const ListBinderStorage = new Map()\n\n        function createListObject(listParameters) {\n\n            const newList = new Map()\n            const hash = listParameters.name + new Date()\n            const listContainer = {\n                name: listParameters.name,\n                list: newList,\n                hash: hash,\n            }\n\n            if (listParameters.color != \"\") {\n                listContainer.color = listParameters.color\n                listContainer.lightToggle = listParameters.lightToggle\n            }\n\n            List.ListStorage.set(hash, listContainer)\n            Storage.populateStorage()\n\n            return hash\n        }\n\n        function createListNode(listContainer) {\n            const listNode = createNode(\"div\", listsContainer, \"\", \"sideBarList\")\n            const listPointer = createNode(\"div\", listNode, \"\", \"listPointer\")\n            if (listContainer.color) {\n                listPointer.style.backgroundColor = listContainer.color\n            }\n            const listName = createNode(\"div\", listNode, \"\", \"listName\")\n            listName.textContent = listContainer.name\n            const listCount = createNode(\"div\", listPointer, \"\", \"listCount\")\n            listCount.textContent = listContainer.list.size\n            if (listContainer.lightToggle === 'true' || listContainer.lightToggle === true) {\n                listCount.style.color = \"black\"\n            } else {\n                listCount.style.color = \"white\"\n            }\n            const listEditIcon = createNode(\"img\", listNode, \"\", [\"editListIcon\", \"listIcon\"])\n            listEditIcon.src = pencil_square\n            const listDeleteIcon = createNode(\"img\", listNode, \"\", [\"deleteListIcon\", \"listIcon\"])\n            listDeleteIcon.src = trash\n\n            return listNode\n        }\n\n        function createListBinder(listContainer, listNode) {\n            const listHash = listContainer.hash\n            const listBinder = new ListBinder(listNode, listContainer, listHash)\n            ListBinderStorage.set(listHash, listBinder)\n            return listBinder\n        }\n\n        function editListBinder(listParameters) {\n\n            if (listParameters.name !== \"\") {\n                listParameters.listBinder.container.name = listParameters.name\n            }\n\n            listParameters.listBinder.container.color = listParameters.color\n            listParameters.listBinder.container.lightToggle = listParameters.lightToggle\n            listParameters.listBinder.change()\n\n            Storage.populateStorage()\n        }\n\n        function updateTaskCounters() {\n\n            ListBinderStorage.forEach(function (listBinder) {\n                const taskCount = listBinder.node.querySelector(\".listCount\")\n                taskCount.textContent = listBinder.obj.size\n            })\n        }\n\n        function deleteListBinder(listBinder) {\n            listBinder.node.remove()\n            listBinder.obj = null\n            List.ListStorage.delete(listBinder.container.hash)\n\n            Storage.populateStorage()\n        }\n\n        function submitNewList(listParameters) {\n\n            const listObjectHash = List.createListObject(listParameters)\n            const listObject = List.ListStorage.get(listObjectHash)\n            const listNode = List.createListNode(listObject)\n            const listBinder = List.createListBinder(listObject, listNode)\n            Listeners.applyListListeners(listBinder)\n            userContentContainer.setAttribute(\"data-activelist\", listBinder.listHash)\n            contentController.unloadLists()\n            contentController.loadList(listBinder.listHash)\n            contentController.refreshTopBar(listBinder.listHash)\n            Render.renderAddListForm.hide()\n            document.getElementById(\"newListForm\").reset()\n            document.getElementById(\"newListColor\").removeAttribute(\"data-color\")\n            document.getElementById(\"newListColor\").removeAttribute(\"style\")\n            document.getElementById(\"lowerAddTask\").style.display = \"flex\"\n\n            return listObjectHash\n        }\n\n        return { ListStorage, createListObject, createListNode, createListBinder, ListBinderStorage, updateTaskCounters, editListBinder, deleteListBinder, submitNewList }\n    })()\n\n    // TaskBinder creates/edits/deletes objects that pair together a task node and a task object.\n    const TaskBinder = (() => {\n\n        const TaskBinderStorage = new Map()\n\n        function createTaskObject(taskParameters) {\n\n            const taskHash = taskParameters.name + new Date()\n\n            const task = {\n                completeBool: taskParameters.completeBool,\n                name: taskParameters.name,\n                date: taskParameters.date,\n                taskHash: taskHash,\n                flagged: taskParameters.flagged,\n                scheduled: taskParameters.scheduled,\n                listHash: taskParameters.listHash,\n            }\n\n            return task\n        }\n\n        function createTaskNode(taskObject) {\n\n            const taskNode = createNode(\"li\", userContentContainer, \"\", \"task\")\n            if (List.ListStorage.get(taskObject.listHash).color) {\n                taskNode.style.backgroundColor = List.ListStorage.get(taskObject.listHash).color\n            }\n            const checkbox = createNode(\"img\", taskNode, \"\", \"checkbox\")\n            if (!taskObject.completeBool) {\n                checkbox.src = square\n            } else {\n                checkbox.src = square_fill\n            }\n\n            const taskDescription = createNode(\"div\", taskNode, \"\", \"taskDescription\")\n            taskDescription.textContent = taskObject.name\n\n            const taskDueDate = createNode(\"div\", taskNode, \"\", \"taskDueDate\")\n            if (taskObject.date) {\n                let date = taskObject.date\n                date = format(date, \"dd/MM/yy\")\n                taskDueDate.textContent = date\n            }\n\n            const editTaskIcon = createNode(\"img\", taskNode, \"\", \"editTaskIcon\")\n            editTaskIcon.src = pencil_square\n            const deleteTaskIcon = createNode(\"img\", taskNode, \"\", \"deleteTaskIcon\")\n            deleteTaskIcon.src = trash\n\n            const flagNodeHolder = createNode(\"div\", taskNode, \"\", \"flagNodeHolder\")\n            const flagNode = createNode(\"img\", flagNodeHolder, \"\", \"taskFlagIcon\")\n            if (taskObject.flagged) {\n                flagNode.src = flag/* default */.Z\n            }\n\n            if (List.ListStorage.get(taskObject.listHash).lightToggle === 'true' || List.ListStorage.get(taskObject.listHash).lightToggle === true) {\n                taskNode.style.color = \"black\"\n            } else if (List.ListStorage.get(taskObject.listHash).lightToggle === 'false' || List.ListStorage.get(taskObject.listHash).lightToggle === false) {\n                taskNode.style.color = \"white\"\n                taskDueDate.style.color = \"white\"\n                // make complete checkbox, flag, edit, and delete icons all white\n                const elements = [checkbox, editTaskIcon, deleteTaskIcon, flagNode]\n                for (let i = 0; i < elements.length; i++) {\n                    elements[i].classList.add(\"whiteColouringForDarkBackground\")\n                }\n            }\n\n            taskNode.insertBefore(flagNodeHolder, editTaskIcon)\n\n            document.getElementById(\"userContentContainer\").insertBefore(taskNode, document.getElementById(\"lowerAddTask\"))\n            taskNode.setAttribute(\"data-hash\", taskObject.hash)\n\n            taskNode.setAttribute(\"data-title\", taskObject.name)\n            taskNode.setAttribute(\"data-duedate\", taskObject.date)\n\n            return taskNode\n        }\n\n        function storeTaskBinder(taskBinder) {\n            List.ListStorage.get(taskBinder.listHash).list.set(taskBinder.taskHash, taskBinder.obj)\n        }\n\n        function createTaskBinder(taskNode, taskObject, listHash) {\n            const taskHash = taskObject.taskHash\n            const taskBinder = new TaskBinderClass_TaskBinder(taskNode, taskObject, listHash, taskHash)\n            TaskBinderStorage.set(taskBinder.taskHash, taskBinder)\n\n            return taskBinder\n        }\n\n        function deleteTaskBinder(taskBinder) {\n            taskBinder.node.remove()\n            taskBinder.obj = null\n            List.ListStorage.get(taskBinder.listHash).list.delete(taskBinder.taskHash)\n            TaskBinder.TaskBinderStorage.delete(taskBinder.taskHash)\n\n            Storage.populateStorage()\n        }\n\n        function editTaskBinder(taskParameters) {\n\n            const taskBinder = taskParameters.taskBinder\n\n            if (taskParameters.name !== \"\") {\n                taskBinder.obj.name = taskParameters.name\n            }\n\n            taskBinder.obj.date = taskParameters.date\n\n            if (!isNaN(taskParameters.date)) {\n                taskBinder.obj.scheduled = true\n            } else {\n                taskBinder.obj.scheduled = false\n            }\n\n            if (taskBinder.obj.flagged != taskParameters.flagged) {\n                taskBinder.obj.flagged = taskParameters.flagged\n            }\n\n            if (taskParameters.completeBool) {\n                taskBinder.obj.completeBool = true\n            } else {\n                taskBinder.obj.completeBool = false\n            }\n\n            taskBinder.change()\n\n            Storage.populateStorage()\n        }\n\n        function submitNewTask(taskParameters) {\n\n            const taskObject = TaskBinder.createTaskObject(taskParameters)\n            const taskNode = TaskBinder.createTaskNode(taskObject)\n            const taskBinder = TaskBinder.createTaskBinder(taskNode, taskObject, taskParameters.listHash)\n            TaskBinder.storeTaskBinder(taskBinder)\n            Listeners.applyTaskListeners(taskBinder)\n\n            Storage.populateStorage()\n        }\n\n        return { TaskBinderStorage, storeTaskBinder, createTaskBinder, deleteTaskBinder, editTaskBinder, createTaskObject, createTaskNode, submitNewTask }\n    })()\n\n    // Search uses the sidebar interface to allow a user to search through all tasks\n    const Search = (() => {\n\n        const toggles = {\n            scheduled: false,\n            flagged: false,\n            today: false,\n            all: false,\n        }\n\n        function runSearch(searchType, searchParameters) {\n\n            function _createSearchTest() {\n                if (searchType == \"toggle\") {\n                    function searchTest(task, searchParameters) {\n\n                        let shouldAddThisOne = false\n                        for (const [key, value] of Object.entries(searchParameters)) {\n\n                            if (key == \"all\") {\n                                if (value) {\n                                    shouldAddThisOne = true\n                                    break\n                                }\n                            }\n\n                            else if (key == \"today\") {\n                                if (value) {\n                                    if (isToday(task.date)) {\n                                        shouldAddThisOne = true\n                                        break\n                                    }\n                                }\n                            }\n\n                            else if (value) {\n                                if (task[key])\n                                    shouldAddThisOne = true\n                            }\n                        }\n                        return shouldAddThisOne\n                    }\n                    return searchTest\n\n                } else if (searchType == \"text\") {\n                    function searchTest(task, searchParameters) {\n                        if (searchParameters == \"\") {\n                            return true\n                        } else if (task.name.includes(searchParameters)) {\n                            return true\n                        } else {\n                            return false\n                        }\n                    }\n                    return searchTest\n                }\n            }\n\n            const searchTest = _createSearchTest(searchType, searchParameters)\n\n            let searchResultObjects = []\n\n            List.ListStorage.forEach((listContainer) => {\n                const list = listContainer.list\n                list.forEach((task) => {\n                    if (searchTest(task, searchParameters)) {\n                        searchResultObjects.push(task)\n                    }\n                })\n            })\n\n            return searchResultObjects\n        }\n\n        function publishSearchResults(searchResults) {\n\n            searchResults.forEach((taskObject) => {\n                const listHash = 'searchResults'\n                const taskNode = TaskBinder.createTaskNode(taskObject)\n                const taskBinder = TaskBinder.createTaskBinder(taskNode, taskObject, listHash)\n                Listeners.applyTaskListeners(taskBinder)\n            })\n\n            document.getElementById(\"lowerAddTask\").style.display = \"none\"\n\n            document.getElementById(\"listTitle\").textContent = \"Search\"\n            document.getElementById(\"listTitle\").style.color = \"black\"\n            document.getElementById(\"topBarListCount\").textContent = Object.keys(searchResults).length\n\n        }\n\n        return { runSearch, toggles, publishSearchResults }\n\n    })()\n\n    // Listeners applies functionality to buttons in DOM elements.\n    const Listeners = (() => {\n\n        // Edit and Delete buttons for task nodes\n        function applyTaskListeners(taskBinder) {\n            function _addDeletionListener(taskBinder) {\n                const button = taskBinder.node.querySelector(\".deleteTaskIcon\")\n                button.addEventListener(\"click\", function () {\n                    TaskBinder.deleteTaskBinder(taskBinder)\n                    List.updateTaskCounters()\n                    Listeners.sideBarToggles.updateSideBarToggleCounts()\n                })\n            }\n\n            function _addEditListener(taskBinder) {\n                const button = taskBinder.node.querySelector(\".editTaskIcon\")\n                button.addEventListener(\"click\", () => {\n                    taskBinder.node.style.display = \"none\"\n                    Render.hideAllForms()\n                    Render.renderEditTaskForm.show(taskBinder)\n                })\n            }\n\n            function _addCheckBoxListener(taskBinder) {\n                const checkbox = taskBinder.node.querySelector(\".checkbox\")\n                checkbox.addEventListener(\"click\", () => {\n\n                    taskBinder.obj.completeBool = !taskBinder.obj.completeBool\n\n                    if (taskBinder.obj.completeBool) {\n                        checkbox.src = square_fill\n                    } else if (!taskBinder.obj.completeBool) {\n                        checkbox.src = square\n                    }\n                })\n            }\n            _addCheckBoxListener(taskBinder)\n            _addDeletionListener(taskBinder)\n            _addEditListener(taskBinder)\n        }\n\n        function applyListListeners(listBinder) {\n            const node = listBinder.node\n\n            const clickBoxElements = []\n\n            clickBoxElements.push(node.querySelector(\".listPointer\"))\n            clickBoxElements.push(node.querySelector(\".listName\"))\n\n            clickBoxElements.forEach(element => {\n                element.addEventListener(\"click\", function () {\n\n                    Render.hideAllForms()\n                    Listeners.sideBarToggles.deactivate()\n                    contentController.unloadLists()\n\n                    contentController.loadList(listBinder.listHash)\n                    contentController.refreshTopBar(listBinder.listHash)\n                    document.getElementById(\"lowerAddTask\").style.display = \"flex\"\n                })\n            })\n\n            const editButton = listBinder.node.querySelector(\".editListIcon\")\n            editButton.addEventListener(\"click\", () => {\n                node.style.display = \"none\"\n                Render.renderEditListForm.show(listBinder)\n            })\n\n            const deleteButton = listBinder.node.querySelector(\".deleteListIcon\")\n            deleteButton.addEventListener(\"click\", () => {\n                List.deleteListBinder(listBinder)\n                contentController.unloadLists()\n                contentController.generateHome()\n            })\n        }\n\n        const expandableMenu = (() => {\n\n            const sideBarContent = document.getElementById(\"sideBarContentContainer\")\n\n            function openNav() {\n                document.getElementById(\"sideBar\").style.width = \"270px\";\n                document.getElementById(\"sideBarContentContainer\").style.width = \"90%\"\n            }\n\n            function closeNav() {\n                // document.getElementById(\"sideBar\").style.width = \"0px\";\n                document.getElementById(\"sideBar\").removeAttribute(\"style\")\n            }\n\n\n            const openButton = document.getElementById(\"expandMenu\")\n            openButton.addEventListener(\"click\", () => {\n                openNav()\n            })\n\n            const closeButton = document.getElementById(\"closeSideBarButton\")\n            closeButton.addEventListener(\"click\", () => {\n                closeNav()\n            })\n        })()\n\n        const searchBar = (() => {\n            const searchInputNode = document.getElementById(\"searchBar\")\n            searchInputNode.addEventListener(\"input\", function (e) {\n                document.getElementById(\"clearIcon\").style.visibility = \"visible\"\n                contentController.unloadLists()\n                Render.hideAllForms()\n                const searchResults = Search.runSearch(\"text\", e.target.value)\n                Search.publishSearchResults(searchResults)\n            })\n\n            const searchClearButton = document.getElementById(\"clearIcon\")\n            searchClearButton.addEventListener(\"click\", () => {\n                searchInputNode.value = \"\"\n                contentController.unloadLists()\n            })\n        })()\n\n        const addListButton = (() => {\n            const button = document.getElementById(\"addListButton\")\n            button.addEventListener(\"click\", function () {\n                Render.hideAllForms()\n                Render.renderAddListForm.show()\n            })\n        })()\n\n        const addTaskButtons = (() => {\n            const buttons = document.getElementsByClassName(\"addTaskButton\")\n            for (let i = 0; i < buttons.length; i++) {\n                const button = buttons[i]\n                button.addEventListener(\"click\", function () {\n                    Render.hideAllForms()\n                    Render.renderAddTaskForm.show()\n                })\n            }\n        })()\n\n        const datePickers = (() => {\n            const dateInputs = document.querySelectorAll(\".date\")\n            dateInputs.forEach(function (dateNode) {\n                const dateChange = new Event(\"dateChange\")\n                const datePicker = datepicker_min_default()(dateNode, {\n                    formatter: (input, date) => {\n                        input.value = format(date, \"eee d/M/yy\")\n                    },\n                    onSelect: (instance, date) => {\n\n                        dateNode.dispatchEvent(dateChange)\n                        const formType = instance.parent.parentNode.id\n                        const parsedDate = Date.parse(date)\n\n                        instance.setDate()\n                        dateNode.value = format(date, \"eee d/M/yy\")\n\n\n                        if (formType == \"newTaskForm\") {\n\n                            dateNode.setAttribute(\"data-date\", parsedDate)\n                            const newFormDateCheckBox = document.getElementById(\"newFormDateCheckBox\")\n                            newFormDateCheckBox.style.display = \"flex\"\n                            newFormDateCheckBox.checked = true\n                        }\n\n                        else if (formType == \"editTaskForm\") {\n                            dateNode.setAttribute(\"data-date\", parsedDate)\n                            const editFormDateCheckBox = document.getElementById(\"editFormDateDeleteButton\")\n                            editFormDateCheckBox.style.display = \"flex\"\n                            editFormDateCheckBox.checked = true\n                        }\n                    }\n                })\n\n                dateNode.addEventListener(\"dateChange\", () => {\n                    dateNode.classList.add(\"dateChosen\")\n                })\n            })\n        })()\n\n        const colorPicker = (() => {\n\n            const buttons = document.querySelectorAll(\".colorPicker\")\n\n            buttons.forEach(button => {\n                const colorButton = button\n                const colorPickerHolder = colorButton.parentElement.querySelector(\".colorPickerHolder\")\n                let colorPickerActive = false\n                colorButton.addEventListener(\"click\", () => {\n                    if (colorPickerActive) {\n                        return\n                    } else {\n                        colorPickerActive = true\n                    }\n                    const colorPicker = new simple_color_picker_module();\n\n                    if (colorButton.dataset.color) {\n                        colorPicker.setColor(colorButton.dataset.color)\n                    }\n\n                    colorPicker.appendTo(colorPickerHolder)\n                    const buttonRect = colorButton.getBoundingClientRect()\n                    colorPickerHolder.style.top = `${buttonRect.bottom}px`\n                    colorPickerHolder.style.left = `${buttonRect.left}px`\n\n                    const colorButtonHolder = createNode(\"div\", colorPickerHolder, \"colorButtonHolder\", \"\")\n                    const colorSubmit = createNode(\"button\", colorButtonHolder, \"colorSubmit\", \"listButton\")\n                    colorSubmit.textContent = \"Accept\"\n                    const colorAbort = createNode(\"button\", colorButtonHolder, \"colorAbort\", \"listButton\")\n                    colorAbort.textContent = \"Remove\"\n\n                    colorSubmit.addEventListener(\"click\", () => {\n                        const color = colorPicker.getColor()\n                        colorButton.style.backgroundColor = color\n                        colorButton.setAttribute(\"data-color\", color)\n                        if (colorPicker.isDark()) {\n                            colorButton.setAttribute(\"data-lightToggle\", false)\n                        } else if (colorPicker.isLight()) {\n                            colorButton.setAttribute(\"data-lightToggle\", true)\n                        }\n                        colorPicker.remove()\n                        colorSubmit.remove()\n                        colorAbort.remove()\n                        colorPickerActive = false\n                    })\n\n                    colorAbort.addEventListener(\"click\", () => {\n                        colorButton.removeAttribute(\"data-color\")\n                        colorButton.style.backgroundColor = \"#F1FAEE\"\n                        colorPicker.remove()\n                        colorSubmit.remove()\n                        colorAbort.remove()\n                        colorPickerActive = false\n                    })\n                })\n            })\n        })()\n\n        const locationButton = (() => {\n            const buttons = document.querySelectorAll(\".location\")\n            buttons.forEach((button) => {\n                button.addEventListener(\"click\", () => {\n                    alert(\"The location feature has not yet been implemented. Try choosing a date or flagging this task instead :)\")\n                })\n            })\n        })()\n\n        const flagButtons = (() => {\n\n            const buttons = document.getElementsByClassName(\"flagButton\")\n            for (let i = 0; i < buttons.length; i++) {\n                let button = buttons[i]\n                button.setAttribute(\"data-flagged\", false)\n                button.addEventListener(\"click\", () => {\n                    // get current state in BOOLEAN\n                    const priorFlagState = (button.dataset.flagged == \"true\")\n                    // swap to new state\n                    if (priorFlagState) {\n                        // If it was already flagged, turn flag off\n                        button.classList.remove(\"flagActive\")\n                        button.setAttribute(\"data-flagged\", false)\n                    } else if (!priorFlagState) {\n                        // If it wasn't flagged\n                        button.classList.add(\"flagActive\")\n                        button.setAttribute(\"data-flagged\", true)\n                    }\n                })\n            }\n        })()\n\n        const cancelButton = (() => {\n            const newTaskButton = document.getElementById(\"newItemAbort\")\n            newTaskButton.addEventListener(\"click\", function () {\n                document.getElementById(\"newTaskForm\").reset()\n                Render.renderAddTaskForm.hide()\n                const lowerAddButton = document.getElementById(\"lowerAddTask\")\n                lowerAddButton.style.display = \"flex\"\n            })\n\n            const editTaskButton = document.getElementById(\"editTaskAbort\")\n            editTaskButton.addEventListener(\"click\", function () {\n                document.getElementById(\"editTaskForm\").reset()\n                Render.renderEditTaskForm.hide()\n            })\n\n            const newListAbortButton = document.getElementById(\"newListAbort\")\n            newListAbortButton.addEventListener(\"click\", function () {\n                document.getElementById(\"newListForm\").reset()\n                document.getElementById(\"newListContainer\").style.display = \"none\"\n                document.getElementById(\"newListColor\").removeAttribute(\"data-color\")\n                document.getElementById(\"newListColor\").removeAttribute(\"style\")\n            })\n\n            const editListAbortButton = document.getElementById(\"editListAbort\")\n            editListAbortButton.addEventListener(\"click\", function () {\n                document.getElementById(\"editListForm\").reset()\n                Render.renderEditListForm.hide()\n            })\n        })()\n\n        const submitButtons = (() => {\n\n            const _submitRefreshBlocker = (() => {\n                const buttons = document.querySelectorAll(\".submitRefreshBlocker\")\n                buttons.forEach(function (button) {\n                    button.addEventListener(\"submit\", (e) => {\n                        e.preventDefault()\n                    })\n                })\n            })()\n\n            const editTaskSubmitButton = document.querySelector(\"#editTaskSubmit\")\n            editTaskSubmitButton.addEventListener(\"click\", function () {\n\n                // GET THE EDIT FORM INFORMATION\n\n                const editTaskContainer = document.getElementById(\"editTaskContainer\")\n                const taskHash = editTaskContainer.dataset.taskhash\n                const taskBinder = TaskBinder.TaskBinderStorage.get(taskHash)\n                const completeBool = (editTaskContainer.dataset.complete === 'true');\n                const name = document.getElementById(\"editItemTitle\").value\n                const dateInput = document.getElementById(\"editDateInput\")\n                const date = parseInt(dateInput.dataset.date)\n                const flagButton = document.getElementById(\"editItemFlag\")\n                const flagged = (flagButton.dataset.flagged == \"true\")\n\n\n                const taskParameters = {\n                    taskBinder,\n                    completeBool,\n                    name,\n                    date,\n                    flagged,\n                }\n\n\n                TaskBinder.editTaskBinder(taskParameters)\n\n                // RESET AND HIDE THE FORM\n                const editFormCheckBox = editTaskContainer.querySelector(\".checkbox\")\n                editFormCheckBox.removeEventListener(\"click\", Listeners.completeCheckBoxEditForm)\n\n                editTaskContainer.removeAttribute(\"data-complete\")\n\n                dateInput.classList.remove(\"dateChosen\")\n                dateInput.removeAttribute(\"data-date\")\n                dateInput.setAttribute(\"placeholder\", \"Add Date\")\n                document.getElementById(\"editFormDateDeleteButton\").style.display = \"none\"\n                flagButton.removeAttribute(\"data-flagged\")\n                flagButton.classList.remove(\"flagActive\")\n\n                document.getElementById(\"editTaskForm\").reset()\n                editTaskContainer.style.display = \"none\"\n                editTaskContainer.removeAttribute(\"data-taskhash\")\n\n                // REVEAL THE EDITED NODE\n                taskBinder.node.style.display = \"grid\"\n\n                // Update side bar toggle counts\n                Listeners.sideBarToggles.updateSideBarToggleCounts()\n            })\n\n            const editListSubmitButton = document.querySelector(\"#editListSubmit\")\n            editListSubmitButton.addEventListener(\"click\", function () {\n                // Get the edited form data\n                const name = document.getElementById(\"editListTitle\").value\n                const color = document.getElementById(\"editListColor\").dataset.color\n                const lightToggle = document.getElementById(\"editListColor\").dataset.lighttoggle\n\n                const editListContainer = document.getElementById(\"editListContainer\")\n                const listHash = editListContainer.dataset.listhash\n                const listBinder = List.ListBinderStorage.get(listHash)\n                const listParameters = {\n                    name: name,\n                    color: color,\n                    listBinder: listBinder,\n                    lightToggle: lightToggle,\n                }\n                List.editListBinder(listParameters)\n\n                // Reset the form\n                document.getElementById(\"editListForm\").reset()\n\n                // Reveal the edited node\n                Render.renderEditListForm.hide()\n                listBinder.node.querySelector(\".listName\").click()\n\n                // Update the TopBar\n                contentController.refreshTopBar(listHash)\n            })\n\n            const newTaskSubmitButton = document.getElementById(\"newItemSubmit\")\n            newTaskSubmitButton.addEventListener(\"click\", function () {\n\n                // TASK PARAMETERS\n                // {\n                //     name\n                //     date\n                //     completeBool\n                //     flagged\n                //     listHash\n                // }\n\n                // EXTRACT FORM DATA\n                const name = document.getElementById(\"newItemTitle\").value\n                if (name == \"\") {\n                    alert(\"Remember to give your task a title!\")\n                    return\n                }\n                const date = parseInt(document.getElementById(\"dateInput\").dataset.date)\n                let scheduled = false\n                if (!isNaN(date)) {\n                    scheduled = true\n                }\n                const completeBool = false\n                const listHash = userContentContainer.dataset.activelist\n                const flagButton = document.getElementById(\"newItemFlag\")\n                let flagged = false\n                if (flagButton.dataset.flagged == \"true\") {\n                    flagged = true\n                }\n                const taskParameters = {\n                    name: name,\n                    date: date,\n                    completeBool: completeBool,\n                    listHash: listHash,\n                    flagged: flagged,\n                    scheduled: scheduled,\n                }\n\n                // GENERATE NEW TASK\n                TaskBinder.submitNewTask(taskParameters)\n\n                // RESET THE FORM\n                if (document.getElementById(\"dateDeleteButton\")) {\n                    document.getElementById(\"dateDeleteButton\").remove()\n                }\n                document.getElementById(\"dateInput\").value = \"\"\n                document.getElementById(\"dateInput\").setAttribute(\"placeholder\", \"Add Date\")\n                flagButton.removeAttribute(\"data-flagged\")\n                flagButton.classList.remove(\"flagActive\")\n                document.getElementById(\"dateInput\").setAttribute(\"data-date\", NaN)\n                document.getElementById(\"dateInput\").classList.remove(\"dateChosen\")\n                document.getElementById(\"newFormDateCheckBox\").style.display = \"none\"\n                Render.renderAddTaskForm.hide()\n                const lowerAddButton = document.getElementById(\"lowerAddTask\")\n                lowerAddButton.style.display = \"flex\"\n                document.getElementById(\"newTaskForm\").reset()\n\n                // UPDATE SIDE BAR AND TOP BAR\n                List.updateTaskCounters()\n                contentController.refreshTopBar(listHash)\n                Listeners.sideBarToggles.updateSideBarToggleCounts()\n            })\n\n            const newListSubmitButton = document.getElementById(\"newListSubmit\")\n            newListSubmitButton.addEventListener(\"click\", function () {\n                const listTitle = document.getElementById(\"newListTitle\").value\n                const listColor = document.getElementById(\"newListColor\").dataset.color\n                const lightToggle = document.getElementById(\"newListColor\").dataset.lighttoggle\n                const listParameters = {\n                    name: listTitle,\n                    color: listColor,\n                    lightToggle: lightToggle,\n                }\n                List.submitNewList(listParameters)\n            })\n        })()\n\n        const sideBarToggles = (() => {\n\n            const toggles = [\"scheduled\", \"flagged\", \"today\", \"all\"]\n\n            toggles.forEach(toggle => {\n                const button = document.getElementById(`${toggle}Toggle`)\n                button.addEventListener(\"click\", () => {\n                    contentController.unloadLists()\n                    Render.hideAllForms()\n                    if (button.classList.contains(`${toggle}ToggleActive`)) {\n                        button.classList.remove(`${toggle}ToggleActive`)\n                        Search.toggles[`${toggle}`] = false\n\n                    } else {\n                        contentController.unloadLists()\n                        button.classList.add(`${toggle}ToggleActive`)\n                        document.getElementById(\"listTitle\").textContent = \"Search\"\n                        document.getElementById(\"listTitle\").style.color = \"black\"\n                        Search.toggles[`${toggle}`] = true\n                    }\n\n                    const searchResults = Search.runSearch(\"toggle\", Search.toggles)\n                    Search.publishSearchResults(searchResults)\n                })\n            })\n\n            function updateSideBarToggleCounts() {\n\n                toggles.forEach(toggle => {\n\n                    function generateSearchParameters(toggle) {\n                        let togglesRange = Object.assign({}, Search.toggles)\n                        for (const tog in togglesRange) {\n                            togglesRange[tog] = false\n                        }\n                        togglesRange[toggle] = true\n\n                        return togglesRange\n                    }\n\n                    const countNode = document.querySelector(`.${toggle}Count`)\n                    const searchParameters = generateSearchParameters(toggle)\n                    const searchResults = Search.runSearch(\"toggle\", searchParameters)\n                    countNode.textContent = searchResults.length\n\n                })\n            }\n\n            function deactivate() {\n\n                toggles.forEach(toggle => {\n                    const button = document.querySelector(`#${toggle}Toggle`)\n                    if (button.classList.contains(`${toggle}ToggleActive`)) {\n                        button.classList.remove(`${toggle}ToggleActive`)\n                        Search.toggles[`${toggle}`] = false\n                    }\n                })\n            }\n\n            return { updateSideBarToggleCounts, deactivate }\n        })()\n\n        const dateCheckBox = (() => {\n\n            const newForm = (() => {\n                const newFormDateCheckBox = document.getElementById(\"newFormDateCheckBox\")\n                const newFormDateSelector = document.getElementById(\"dateInput\")\n                newFormDateCheckBox.addEventListener(\"click\", () => {\n                    newFormDateSelector.value = \"\"\n                    newFormDateSelector.setAttribute(\"placeholder\", \"Add Date\")\n                    newFormDateSelector.removeAttribute(\"data-date\")\n                    newFormDateCheckBox.style.display = \"none\"\n                    document.getElementById(\"dateInput\").classList.remove(\"dateChosen\")\n                })\n            })()\n\n            const editForm = (() => {\n                const editFormDateCheckBox = document.getElementById(\"editFormDateDeleteButton\")\n                const editDateInput = document.getElementById(\"editDateInput\")\n                editFormDateCheckBox.addEventListener(\"click\", () => {\n                    editDateInput.value = \"\"\n                    editDateInput.setAttribute(\"placeholder\", \"Add Date\")\n                    editDateInput.removeAttribute(\"data-date\")\n                    editFormDateCheckBox.style.display = \"none\"\n                    document.getElementById(\"editDateInput\").classList.remove(\"dateChosen\")\n                })\n\n            })()\n        })()\n\n        const completeCheckBoxEditForm = () => {\n\n            const editTaskContainer = document.querySelector(\"#editTaskContainer\")\n            const checkbox = editTaskContainer.querySelector(\".checkbox\")\n\n            let isComplete = (editTaskContainer.dataset.complete === 'true')\n            if (isComplete) {\n                checkbox.src = square\n                editTaskContainer.setAttribute(\"data-complete\", \"false\")\n            } else {\n                checkbox.src = square_fill\n                editTaskContainer.setAttribute(\"data-complete\", \"true\")\n            }\n        }\n\n        return { applyTaskListeners, applyListListeners, sideBarToggles, completeCheckBoxEditForm }\n\n    })()\n\n    // contentController loads/unloads stored user content into the DOM.\n    const contentController = (() => {\n\n        function loadListsIntoSideBar() {\n            let listIterator = List.ListStorage.values()\n            for (let i = 0; i < List.ListStorage.size; i++) {\n                let listContainer = listIterator.next().value\n                let listNode = List.createListNode(listContainer)\n                let listBinder = List.createListBinder(listContainer, listNode)\n                Listeners.applyListListeners(listBinder)\n            }\n        }\n\n        function refreshTopBar(listHash) {\n            const listContainer = List.ListStorage.get(listHash)\n            const topBarTitle = document.getElementById(\"listTitle\")\n            topBarTitle.textContent = listContainer.name\n            if (listContainer.color) {\n                topBarTitle.style.color = listContainer.color\n            } else {\n                topBarTitle.style.color = \"black\"\n            }\n            const topBarCount = document.getElementById(\"topBarListCount\")\n            topBarCount.textContent = listContainer.list.size\n        }\n\n        function loadList(listHash) {\n\n            userContentContainer.setAttribute(\"data-activeList\", listHash)\n\n            const listContainer = List.ListStorage.get(listHash)\n\n            listContainer.list.forEach(function (taskObject) {\n                let taskNode = TaskBinder.createTaskNode(taskObject)\n                let taskBinder = TaskBinder.createTaskBinder(taskNode, taskObject, listHash)\n                Listeners.applyTaskListeners(taskBinder)\n            })\n        }\n\n        function unloadLists() {\n            TaskBinder.TaskBinderStorage.forEach(function (taskBinder) {\n                taskBinder.node.remove()\n                TaskBinder.TaskBinderStorage.delete(taskBinder.taskHash)\n            })\n        }\n\n        function generateHome() {\n            const topBarTitle = document.getElementById(\"listTitle\")\n            topBarTitle.textContent = \"Select or add a list to get started!\"\n            topBarTitle.style.color = \"black\"\n            document.getElementById(\"lowerAddTask\").style.display = \"none\"\n            userContentContainer.removeAttribute(\"data-activeList\")\n        }\n\n        return { loadList, unloadLists, loadListsIntoSideBar, refreshTopBar, generateHome }\n    })()\n\n    // Render loads/unloads interactable DOM elements such as forms and buttons.\n    const Render = (() => {\n\n        const renderAddListForm = (() => {\n\n            const form = document.getElementById(\"newListContainer\")\n            const inputFocus = document.getElementById(\"newListTitle\")\n\n            function show() {\n                form.style.display = \"flex\"\n                inputFocus.focus()\n            }\n\n            function hide() {\n                form.style.display = \"none\"\n                const newItem = document.getElementById(\"listsContainer\").lastChild\n                newItem.parentNode.insertBefore(form, newItem.nextSibling)\n            }\n\n            return { show, hide }\n\n        })()\n\n        const renderAddTaskForm = (() => {\n\n            const form = document.getElementById(\"newTaskContainer\")\n            const lowerAddButton = document.getElementById(\"lowerAddTask\")\n            const inputFocus = document.getElementById(\"newItemTitle\")\n\n            function show() {\n                form.style.display = \"flex\"\n                lowerAddButton.style.display = \"none\"\n                inputFocus.focus()\n            }\n\n            function hide() {\n                form.style.display = \"none\"\n                const newItem = document.getElementById(\"userContentContainer\").lastChild\n                newItem.parentNode.insertBefore(lowerAddButton, newItem.nextSibling)\n                newItem.parentNode.insertBefore(form, newItem.nextSibling)\n            }\n\n            return { show, hide }\n\n        })()\n\n        const renderEditListForm = (() => {\n\n            const editListFormContainer = document.getElementById(\"editListContainer\")\n\n            function show(listBinder) {\n\n                Render.renderEditListForm.editListFormActive = true\n                editListFormContainer.style.display = \"flex\"\n\n                document.getElementById(\"listsContainer\").insertBefore(editListFormContainer, listBinder.node)\n\n                const titleSelector = editListFormContainer.querySelector(\"#editListTitle\")\n                const priorTitle = listBinder.container.name\n                titleSelector.setAttribute(\"placeholder\", priorTitle)\n\n                const colourSelector = editListFormContainer.querySelector(\"#editListColor\")\n                const priorColour = listBinder.container.color\n                if (priorColour) {\n                    colourSelector.style.backgroundColor = priorColour\n                    colourSelector.setAttribute(\"data-color\", priorColour)\n                }\n\n                editListFormContainer.setAttribute(\"data-listHash\", listBinder.container.hash)\n                editListFormContainer.style.display = \"flex\"\n            }\n\n            function hide() {\n\n                const listHash = editListFormContainer.dataset.listhash\n                const listBinderInstance = List.ListBinderStorage.get(listHash)\n                if (listBinderInstance) {\n                    listBinderInstance.node.style.display = \"grid\"\n                }\n\n                editListFormContainer.style.display = \"none\"\n                editListFormContainer.removeAttribute(\"data-listHash\")\n\n            }\n\n            return { show, hide }\n        })()\n\n        const renderEditTaskForm = (() => {\n\n            const editTaskContainer = document.querySelector(\"#editTaskContainer\")\n\n            function show(taskBinder) {\n\n                userContentContainer.insertBefore(editTaskContainer, taskBinder.node)\n\n                const checkbox = editTaskContainer.querySelector(\".checkbox\")\n                if (taskBinder.obj.completeBool) {\n                    checkbox.src = square_fill\n                    editTaskContainer.setAttribute(\"data-complete\", \"true\")\n                } else if (!taskBinder.obj.completeBool) {\n                    checkbox.src = square\n                    editTaskContainer.setAttribute(\"data-complete\", \"false\")\n                }\n                checkbox.addEventListener(\"click\", Listeners.completeCheckBoxEditForm)\n\n                const titleSelector = editTaskContainer.querySelector(\"#editItemTitle\")\n                const priorTitle = taskBinder.obj.name\n                titleSelector.setAttribute(\"placeholder\", priorTitle)\n\n                const dateSelector = editTaskContainer.querySelector(\"#editDateInput\")\n                if (!isNaN(taskBinder.obj.date)) {\n                    const priorDate = format(taskBinder.obj.date, \"eee d/M/yy\")\n                    dateSelector.setAttribute(\"placeholder\", priorDate)\n                    dateSelector.setAttribute(\"data-date\", taskBinder.obj.date)\n                    const editDateCheckBox = document.getElementById(\"editFormDateDeleteButton\")\n                    editDateCheckBox.style.display = \"flex\"\n                    editDateCheckBox.checked = true\n                    dateSelector.classList.add(\"dateChosen\")\n                }\n\n                if (taskBinder.obj.flagged) {\n                    const flagButton = document.getElementById(\"editItemFlag\")\n                    flagButton.setAttribute(\"data-flagged\", true)\n                    flagButton.classList.add(\"flagActive\")\n                }\n\n                editTaskContainer.setAttribute(\"data-taskHash\", taskBinder.taskHash)\n                editTaskContainer.setAttribute(\"data-listHash\", taskBinder.listHash)\n\n                editTaskContainer.style.display = \"flex\"\n            }\n\n            function hide() {\n\n                const taskHash = editTaskContainer.dataset.taskhash\n                const taskBinderInstance = TaskBinder.TaskBinderStorage.get(taskHash)\n                if (taskBinderInstance) {\n                    taskBinderInstance.node.style.display = \"grid\"\n                }\n                editTaskContainer.style.display = \"none\"\n                editTaskContainer.removeAttribute(\"data-taskHash\")\n                editTaskContainer.removeAttribute(\"data-listHash\")\n            }\n\n            return { show, hide }\n        })()\n\n        const hideAllForms = () => {\n            renderAddListForm.hide()\n            renderAddTaskForm.hide()\n            renderEditListForm.hide()\n            renderEditTaskForm.hide()\n        }\n\n        return { renderAddTaskForm, renderEditTaskForm, renderAddListForm, renderEditListForm, hideAllForms }\n    })()\n\n    // Storage handles the packing/unpacking of user content for access across multiple sessions.\n    const Storage = (() => {\n\n        // DEMO CONTENT\n        const demoContent = () => {\n\n            const listOne = List.createListObject({\n                name: \"Reminders\",\n                color: \"#FFC285\",\n                lightToggle: true,\n            })\n\n            const listTwo = List.createListObject({\n                name: \"Groceries\",\n                color: \"#B8AFD5\",\n                lightToggle: true,\n            })\n\n            const listThree = List.createListObject({\n                name: \"Coding\",\n                color: \"#ED96B3\",\n                lightToggle: true,\n            })\n\n            const currentDate = new Date()\n\n            const tasks = [\n                {\n                    name: \"Get lo-fi playlist from Daniel\",\n                    listHash: `${listOne}`,\n                    flagged: true,\n                    scheduled: true,\n                    completeBool: false,\n                    date: add(currentDate, {\n                        days: 4\n                    })\n                },\n                {\n                    name: \"Pick up gels for peloton this weekend\",\n                    listHash: `${listOne}`,\n                    flagged: false,\n                    scheduled: true,\n                    completeBool: false,\n                    date: add(currentDate, {\n                        days: 0\n                    })\n                },\n                {\n                    name: \"Get timber to build new desk from Bunnings\",\n                    listHash: `${listOne}`,\n                    flagged: false,\n                    scheduled: true,\n                    date: add(currentDate, {\n                        days: 1\n                    })\n                },\n                {\n                    name: \"Stay late at work until jazz gig with Ebony\",\n                    listHash: `${listOne}`,\n                    flagged: true,\n                    scheduled: true,\n                    date: add(currentDate, {\n                        days: 3\n                    })\n                },\n                {\n                    name: \"Review CV and GitHub profile\",\n                    listHash: `${listThree}`,\n                    flagged: true,\n                },\n                {\n                    name: \"Bananas\",\n                    listHash: `${listTwo}`,\n                    completeBool: false,\n                },\n                {\n                    name: \"Cereal\",\n                    listHash: `${listTwo}`,\n                    completeBool: true,\n                },\n                {\n                    name: \"Bread\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Avocado (2)\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Greek Yoghurt\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Roti Bread\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Hummus\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Carrots\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Celery\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Kombucha\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Wine\",\n                    listHash: `${listTwo}`,\n                },\n                {\n                    name: \"Review code organisation best practice\",\n                    listHash: `${listThree}`,\n                    flagged: false,\n                    scheduled: true,\n                    date: add(currentDate, {\n                        days: 2\n                    })\n                },\n                {\n                    name: \"Follow up on that networking opportunity with Tristan\",\n                    listHash: `${listThree}`,\n                    flagged: true,\n                    scheduled: true,\n                    date: add(currentDate, {\n                        days: 0\n                    })\n                },\n                {\n                    name: \"Review Odin Project submissions for ways to improve this app\",\n                    listHash: `${listThree}`,\n                    flagged: true,\n                },\n                {\n                    name: \"Investigate colour design theory, CSS best practice\",\n                    listHash: `${listThree}`,\n                    flagged: false,\n                },\n            ]\n\n            for (let i = 0; i < tasks.length; i++) {\n                TaskBinder.submitNewTask(tasks[i])\n            }\n\n            List.updateTaskCounters()\n        }\n\n        function generateStringableRecursive(data) {\n\n            let object = {}\n\n            let dataTypes = ['string', 'boolean', 'number', 'undefined']\n            if (dataTypes.includes(typeof data) || data instanceof Date) {\n                return data\n            }\n            else if (data instanceof Map) {\n                for (let [key, value] of data) {\n                    object[key] = generateStringableRecursive(value)\n                }\n            }\n            else if (data instanceof Object) {\n                for (let property in data) {\n                    object[property] = generateStringableRecursive(data[property])\n                }\n            }\n            return object\n        }\n\n        function restoreListMap(jsonObject) {\n\n            const restoredListMap = new Map()\n\n            for (let property in jsonObject) {\n                let listObject = jsonObject[property]\n                let listHash = property\n\n                let listOfTasks = listObject.list\n\n                let newListMap = new Map()\n\n                for (let task in listOfTasks) {\n                    let taskObject = listOfTasks[task]\n                    let taskHash = task\n\n                    if (taskObject.date) {\n                        taskObject.date = new Date(taskObject.date)\n                    }\n\n                    newListMap.set(taskHash, taskObject)\n                }\n\n                listObject.list = newListMap\n                restoredListMap.set(listHash, listObject)\n            }\n            return restoredListMap\n        }\n\n        function loadStorage() {\n            contentController.unloadLists()\n            const storedInfo = window.localStorage.getItem('listMap')\n            const destringified = JSON.parse(storedInfo)\n            const restoredListMap = restoreListMap(destringified)\n            List.ListStorage = restoredListMap\n            contentController.loadListsIntoSideBar()\n            const listMapIterator = List.ListStorage.keys()\n            for (let i = 0; i < List.ListStorage.size; i++) {\n                contentController.loadList(listMapIterator.next().value)\n            }\n\n            List.updateTaskCounters()\n            contentController.generateHome()\n            Listeners.sideBarToggles.updateSideBarToggleCounts()\n        }\n\n        function populateStorage() {\n            const listMap = List.ListStorage\n            const stringableObject = generateStringableRecursive(listMap)\n            const stringified = JSON.stringify(stringableObject)\n            window.localStorage.setItem('listMap', stringified)\n        }\n\n        return { populateStorage, demoContent, populateStorage, generateStringableRecursive, restoreListMap, loadStorage }\n    })()\n\n    // Executes application\n    const App = (() => {\n\n        if (localStorage.getItem('listMap')) {\n            Storage.loadStorage()\n        } else {\n            Storage.demoContent()\n            Storage.populateStorage()\n            Storage.loadStorage()\n        }\n    })()\n}\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/index.css\nvar cjs_js_src = __webpack_require__(424);\n;// CONCATENATED MODULE: ./src/index.css\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = injectStylesIntoStyleTag_default()(cjs_js_src/* default */.Z, options);\n\n\n\n/* harmony default export */ const src = (cjs_js_src/* default.locals */.Z.locals || {});\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\nrunApp()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///998\n")})()})();